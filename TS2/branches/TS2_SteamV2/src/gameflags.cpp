#include "GameAppPch.hpp"
#include "gameflags.hpp"

// Auto-generated file containing the project's list of game flags and game enumerations.
// These values are exposed to the editor, script, and code.
// DO NOT EDIT THIS FILE MANUALLY

namespace Sig { namespace GameFlags { namespace Detail
{

	const tStringPtr cGameFlagNames[]={
		tStringPtr( "FLAG_GROUND" ),
		tStringPtr( "FLAG_SELECTABLE" ),
		tStringPtr( "FLAG_DUMMY" ),
		tStringPtr( "FLAG_COLLISION" ),
		tStringPtr( "FLAG_CONTEXT_ANIMATION" ),
		tStringPtr( "FLAG_SAVEABLE" ),
		tStringPtr( "FLAG_PARK_VEHICLE" ),
		tStringPtr( "FLAG_DROP_CARGO" ),
		tStringPtr( "FLAG_TURRET_BASE" ),
		tStringPtr( "FLAG_PROXY_COLLISION_ROOT" ),
		tStringPtr( "FLAG_PROXY_COLLISION_SHAPE" ),
		tStringPtr( "FLAG_DEFAULT_END_TRANSITION" ),
		tStringPtr( "FLAG_DONT_STOP_BULLETS" ),
		tStringPtr( "FLAG_VEHICLE_FACE_PATH_DIRECTION" ),
		tStringPtr( "FLAG_DONT_INHERIT_STATE_CHANGE" ),
		tStringPtr( "FLAG_SPAWN_AS_DEBRIS" ),
		tStringPtr( "FLAG_INWARD_COLLISION" ),
		tStringPtr( "FLAG_DOESNT_END_IN_GOALBOX" ),
		tStringPtr( "FLAG_LOCKED" ),
		tStringPtr( "FLAG_SHOW_RANGE_RINGS" ),
		tStringPtr( "FLAG_WALL_VOLUME" ),
		tStringPtr( "FLAG_WALL_PLACEMENT_ZONE" ),
		tStringPtr( "FLAG_DETACH_FLYING_BASE" ),
		tStringPtr( "FLAG_DONT_INSTA_DESTROY" ),
		tStringPtr( "FLAG_MINIGAME_UNIT" ),
		tStringPtr( "FLAG_DOESNT_TAKE_DAMAGE" ),
		tStringPtr( "FLAG_INSTA_DESTROY" ),
		tStringPtr( "FLAG_FOCAL_PROMPT" ),
		tStringPtr( "FLAG_BULLET_PROOF" ),
		tStringPtr( "FLAG_STOP_AI" ),
		tStringPtr( "FLAG_LOOP" ),
		tStringPtr::cNullPtr
	};


	const u32 cGameFlagValues[]={
		( 1u << 0u ),
		( 1u << 1u ),
		( 1u << 2u ),
		( 1u << 3u ),
		( 1u << 4u ),
		( 1u << 5u ),
		( 1u << 6u ),
		( 1u << 7u ),
		( 1u << 8u ),
		( 1u << 9u ),
		( 1u << 10u ),
		( 1u << 11u ),
		( 1u << 12u ),
		( 1u << 13u ),
		( 1u << 14u ),
		( 1u << 15u ),
		( 1u << 16u ),
		( 1u << 17u ),
		( 1u << 18u ),
		( 1u << 19u ),
		( 1u << 20u ),
		( 1u << 21u ),
		( 1u << 22u ),
		( 1u << 23u ),
		( 1u << 24u ),
		( 1u << 25u ),
		( 1u << 26u ),
		( 1u << 27u ),
		( 1u << 28u ),
		( 1u << 29u ),
		( 1u << 30u ),
		0
	};


	const tStringPtr cGameEventNames[]={
		tStringPtr( "GAME_EVENT_INVALID" ),
		tStringPtr( "GAME_EVENT_ANIMATION" ),
		tStringPtr( "GAME_EVENT_FALL" ),
		tStringPtr( "GAME_EVENT_LAND" ),
		tStringPtr( "GAME_EVENT_USER_CONTROL_BEGIN" ),
		tStringPtr( "GAME_EVENT_USER_CONTROL_END" ),
		tStringPtr( "GAME_EVENT_TARGET_ACQUIRED" ),
		tStringPtr( "GAME_EVENT_RELOAD_START" ),
		tStringPtr( "GAME_EVENT_FOLLOW_PATH" ),
		tStringPtr( "GAME_EVENT_REACHED_END_OF_PATH" ),
		tStringPtr( "GAME_EVENT_WAYPOINT_REACHED" ),
		tStringPtr( "GAME_EVENT_USER_FIRE_BEGIN" ),
		tStringPtr( "GAME_EVENT_USER_FIRE_END" ),
		tStringPtr( "GAME_EVENT_UNIT_DESTROYED" ),
		tStringPtr( "GAME_EVENT_UNIT_ZERO_HIT_POINTS" ),
		tStringPtr( "GAME_EVENT_USER_THROW_GRENADE" ),
		tStringPtr( "GAME_EVENT_USER_MELEE" ),
		tStringPtr( "GAME_EVENT_PATH_WAIT" ),
		tStringPtr( "GAME_EVENT_CONTEXT_ANIM_START" ),
		tStringPtr( "GAME_EVENT_CONTEXT_ANIM_END" ),
		tStringPtr( "GAME_EVENT_UNIT_ALIGNED" ),
		tStringPtr( "GAME_EVENT_REAPPLY_MOTION_STATE" ),
		tStringPtr( "GAME_EVENT_BARRAGE_ENDED" ),
		tStringPtr( "GAME_EVENT_TARGET_LOST" ),
		tStringPtr( "GAME_EVENT_UPGRADE_BEGIN" ),
		tStringPtr( "GAME_EVENT_REPAIR_BEGIN" ),
		tStringPtr( "GAME_EVENT_UNIT_DAMAGED" ),
		tStringPtr( "GAME_EVENT_UNIT_STATE_CHANGED" ),
		tStringPtr( "GAME_EVENT_WEAPON_ACTION" ),
		tStringPtr( "GAME_EVENT_RANDOM_CHARACTER_ANIM" ),
		tStringPtr( "GAME_EVENT_ENTER_VEHICLE" ),
		tStringPtr( "GAME_EVENT_EXIT_VEHICLE" ),
		tStringPtr( "GAME_EVENT_TUTORIAL_EVENT" ),
		tStringPtr( "GAME_EVENT_CARGO_DROP_BEGIN" ),
		tStringPtr( "GAME_EVENT_CARGO_DROP_SPAWN" ),
		tStringPtr( "GAME_EVENT_CARGO_DROP_END" ),
		tStringPtr( "GAME_EVENT_CARGO_DROP_READY" ),
		tStringPtr( "GAME_EVENT_CANCEL_RELOAD" ),
		tStringPtr( "GAME_EVENT_REAPPLY_ONESHOT_MOTION_STATE" ),
		tStringPtr( "GAME_EVENT_GAME_EFFECT" ),
		tStringPtr( "GAME_EVENT_DO_SPECIAL_MOVE" ),
		tStringPtr( "GAME_EVENT_CONTROL_OVERRIDE_BEGIN" ),
		tStringPtr( "GAME_EVENT_CONTROL_OVERRIDE_END" ),
		tStringPtr( "GAME_EVENT_INPUT_CONFIG_CHANGED" ),
		tStringPtr( "GAME_EVENT_REST_BEGIN" ),
		tStringPtr( "GAME_EVENT_REST_END" ),
		tStringPtr( "GAME_EVENT_DEPLOY_BEGIN" ),
		tStringPtr( "GAME_EVENT_FORCE_FIRE" ),
		tStringPtr( "GAME_EVENT_ROBOT_ATTACK" ),
		tStringPtr::cNullPtr
	};

	const tStringPtr cGameEventValueNames[]={
		tStringPtr( "INVALID" ),
		tStringPtr( "ANIMATION" ),
		tStringPtr( "FALL" ),
		tStringPtr( "LAND" ),
		tStringPtr( "USER_CONTROL_BEGIN" ),
		tStringPtr( "USER_CONTROL_END" ),
		tStringPtr( "TARGET_ACQUIRED" ),
		tStringPtr( "RELOAD_START" ),
		tStringPtr( "FOLLOW_PATH" ),
		tStringPtr( "REACHED_END_OF_PATH" ),
		tStringPtr( "WAYPOINT_REACHED" ),
		tStringPtr( "USER_FIRE_BEGIN" ),
		tStringPtr( "USER_FIRE_END" ),
		tStringPtr( "UNIT_DESTROYED" ),
		tStringPtr( "UNIT_ZERO_HIT_POINTS" ),
		tStringPtr( "USER_THROW_GRENADE" ),
		tStringPtr( "USER_MELEE" ),
		tStringPtr( "PATH_WAIT" ),
		tStringPtr( "CONTEXT_ANIM_START" ),
		tStringPtr( "CONTEXT_ANIM_END" ),
		tStringPtr( "UNIT_ALIGNED" ),
		tStringPtr( "REAPPLY_MOTION_STATE" ),
		tStringPtr( "BARRAGE_ENDED" ),
		tStringPtr( "TARGET_LOST" ),
		tStringPtr( "UPGRADE_BEGIN" ),
		tStringPtr( "REPAIR_BEGIN" ),
		tStringPtr( "UNIT_DAMAGED" ),
		tStringPtr( "UNIT_STATE_CHANGED" ),
		tStringPtr( "WEAPON_ACTION" ),
		tStringPtr( "RANDOM_CHARACTER_ANIM" ),
		tStringPtr( "ENTER_VEHICLE" ),
		tStringPtr( "EXIT_VEHICLE" ),
		tStringPtr( "TUTORIAL_EVENT" ),
		tStringPtr( "CARGO_DROP_BEGIN" ),
		tStringPtr( "CARGO_DROP_SPAWN" ),
		tStringPtr( "CARGO_DROP_END" ),
		tStringPtr( "CARGO_DROP_READY" ),
		tStringPtr( "CANCEL_RELOAD" ),
		tStringPtr( "REAPPLY_ONESHOT_MOTION_STATE" ),
		tStringPtr( "GAME_EFFECT" ),
		tStringPtr( "DO_SPECIAL_MOVE" ),
		tStringPtr( "CONTROL_OVERRIDE_BEGIN" ),
		tStringPtr( "CONTROL_OVERRIDE_END" ),
		tStringPtr( "INPUT_CONFIG_CHANGED" ),
		tStringPtr( "REST_BEGIN" ),
		tStringPtr( "REST_END" ),
		tStringPtr( "DEPLOY_BEGIN" ),
		tStringPtr( "FORCE_FIRE" ),
		tStringPtr( "ROBOT_ATTACK" ),
		tStringPtr::cNullPtr
	};


	const u32 cGameEventValues[]={
		( 0u ),
		( 1u ),
		( 2u ),
		( 3u ),
		( 4u ),
		( 5u ),
		( 6u ),
		( 7u ),
		( 8u ),
		( 9u ),
		( 10u ),
		( 11u ),
		( 12u ),
		( 13u ),
		( 14u ),
		( 15u ),
		( 16u ),
		( 17u ),
		( 18u ),
		( 19u ),
		( 20u ),
		( 21u ),
		( 22u ),
		( 23u ),
		( 24u ),
		( 25u ),
		( 26u ),
		( 27u ),
		( 28u ),
		( 29u ),
		( 30u ),
		( 31u ),
		( 32u ),
		( 33u ),
		( 34u ),
		( 35u ),
		( 36u ),
		( 37u ),
		( 38u ),
		( 39u ),
		( 40u ),
		( 41u ),
		( 42u ),
		( 43u ),
		( 44u ),
		( 45u ),
		( 46u ),
		( 47u ),
		( 48u ),
		( 0u ), // placeholder to make name and value arrays the same length
	};


	const tStringPtr cAIFlagNames[]={
		tStringPtr::cNullPtr
	};


	const tStringPtr cAIFlagValueNames[]={
		tStringPtr::cNullPtr
	};


	const u32 cAIFlagValues[]={
		( 0u ), // placeholder to make name and value arrays the same length
	};


	const tStringPtr cKeyFrameEventNames[]={
		tStringPtr( "KEYFRAME_EVENT_DEFAULT" ),
		tStringPtr( "KEYFRAME_EVENT_EFFECT" ),
		tStringPtr( "KEYFRAME_EVENT_SPAWN_CARTRIDGE" ),
		tStringPtr( "KEYFRAME_EVENT_EJECT_CARTRIDGE" ),
		tStringPtr( "KEYFRAME_EVENT_DOOR_POP" ),
		tStringPtr( "KEYFRAME_EVENT_DOOR_CLOSE" ),
		tStringPtr( "KEYFRAME_EVENT_TOGGLE_PROPS" ),
		tStringPtr( "KEYFRAME_EVENT_FIRE_WEAPON" ),
		tStringPtr( "KEYFRAME_EVENT_ENGINE_START" ),
		tStringPtr( "KEYFRAME_EVENT_CHANGE_STATE" ),
		tStringPtr( "KEYFRAME_EVENT_REAL_DEATH" ),
		tStringPtr::cNullPtr
	};


	const u32 cKeyFrameEventValues[]={
		( 0u ),
		( 1u ),
		( 2u ),
		( 3u ),
		( 4u ),
		( 5u ),
		( 6u ),
		( 7u ),
		( 8u ),
		( 9u ),
		( 10u ),
	};


	const tStringPtr cGameEnumTypeNames[]={
		tStringPtr( "ENUM_TEAM" ),
		tStringPtr( "ENUM_UNIT_TYPE" ),
		tStringPtr( "ENUM_UNIT_LEVEL_DEPRECATED" ),
		tStringPtr( "ENUM_UNIT_ID" ),
		tStringPtr( "ENUM_BUILD_SITE" ),
		tStringPtr( "ENUM_MAP_TYPE" ),
		tStringPtr( "ENUM_ARTILLERY_SOLDIER" ),
		tStringPtr( "ENUM_COUNTRY" ),
		tStringPtr( "ENUM_SPECIAL_LEVEL_OBJECT" ),
		tStringPtr( "ENUM_DAMAGE_TYPE" ),
		tStringPtr( "ENUM_TRIGGERED_BREAK_STATE" ),
		tStringPtr( "ENUM_DEBRIS_TYPE" ),
		tStringPtr( "ENUM_CONTEXT_ANIM_TYPE" ),
		tStringPtr( "ENUM_GROUND_TYPE_DEPRICATED" ),
		tStringPtr( "ENUM_LEVEL_EVENT" ),
		tStringPtr( "ENUM_LINKED_HITPOINTS" ),
		tStringPtr( "ENUM_TRACER_TYPE" ),
		tStringPtr( "ENUM_DIFFICULTY" ),
		tStringPtr( "ENUM_CARGO_INDEX" ),
		tStringPtr( "ENUM_WEAPON_INDEX" ),
		tStringPtr( "ENUM_THROTTLE" ),
		tStringPtr( "ENUM_WEAPON_ACTION" ),
		tStringPtr( "ENUM_SURFACE_TYPE" ),
		tStringPtr( "ENUM_CHARACTER_PROPS" ),
		tStringPtr( "ENUM_WEAPON_STATE" ),
		tStringPtr( "ENUM_AUDIO_TYPE_ID" ),
		tStringPtr( "ENUM_EXTRA_SEAT_INDEX" ),
		tStringPtr( "ENUM_WHEEL_INDEX" ),
		tStringPtr( "ENUM_TUTORIAL_EVENT" ),
		tStringPtr( "ENUM_PERSISTENT_EFFECT_BEHAVIOR" ),
		tStringPtr( "ENUM_SPECIAL_ENTRANCE" ),
		tStringPtr( "ENUM_ACHIEVEMENTS" ),
		tStringPtr( "ENUM_SESSION_STATS" ),
		tStringPtr( "ENUM_COMBO" ),
		tStringPtr( "ENUM_CHALLENGE_MODE" ),
		tStringPtr( "ENUM_DLC" ),
		tStringPtr( "ENUM_DAMAGE_TRANSFER_MULTIPLIER" ),
		tStringPtr( "ENUM_TARGET_INDEX" ),
		tStringPtr( "ENUM_LOGIC_TYPE" ),
		tStringPtr( "ENUM_PICKUPS" ),
		tStringPtr( "ENUM_CONTROLS" ),
		tStringPtr( "ENUM_CONTROLS_SETTING" ),
		tStringPtr( "ENUM_PERSONALITY_TYPE" ),
		tStringPtr( "ENUM_CREWMAN" ),
		tStringPtr( "ENUM_FIREEFFECTOVERRIDE" ),
		tStringPtr( "ENUM_VEHICLE_MOTION_FX" ),
		tStringPtr( "ENUM_KILL_FLAG" ),
		tStringPtr( "ENUM_LEADERBOARD_COLUMN_TYPE" ),
		tStringPtr( "ENUM_PLATFORM_TYPE" ),
		tStringPtr( "ENUM_DEBRIS_BEHAVIOR" ),
		tStringPtr( "ENUM_AVATAR_AWARDS" ),
		tStringPtr( "ENUM_LANGUAGE" ),
		tStringPtr( "ENUM_REGION" ),
		tStringPtr( "ENUM_LOCALE" ),
		tStringPtr( "ENUM_MOBILE_MINIGAME" ),
		tStringPtr( "ENUM_GAME_CONTROLS" ),
		tStringPtr( "ENUM_GAMECONTROLLER_MODE" ),
		tStringPtr::cNullPtr
	};


	const u32 cGameEnumTypeKeys[]={
		1,
		2,
		3,
		4,
		5,
		6,
		8,
		9,
		11,
		12,
		13,
		14,
		15,
		16,
		18,
		19,
		20,
		21,
		22,
		23,
		24,
		25,
		26,
		27,
		29,
		30,
		31,
		32,
		33,
		34,
		35,
		36,
		37,
		38,
		39,
		40,
		41,
		42,
		43,
		44,
		45,
		46,
		47,
		48,
		49,
		50,
		51,
		52,
		53,
		54,
		55,
		56,
		57,
		58,
		59,
		60,
		61,
		~0u
	};


	static const tStringPtr cGameEnumValueNames0[]={
		tStringPtr( "TEAM_NONE" ),
		tStringPtr( "TEAM_RED" ),
		tStringPtr( "TEAM_BLUE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw0[]={
		tStringPtr( "NONE" ),
		tStringPtr( "RED" ),
		tStringPtr( "BLUE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames1[]={
		tStringPtr( "UNIT_TYPE_NONE" ),
		tStringPtr( "UNIT_TYPE_TURRET" ),
		tStringPtr( "UNIT_TYPE_VEHICLE" ),
		tStringPtr( "UNIT_TYPE_INFANTRY" ),
		tStringPtr( "UNIT_TYPE_AIR" ),
		tStringPtr( "UNIT_TYPE_BOSS" ),
		tStringPtr( "UNIT_TYPE_LIGHT_PROP" ),
		tStringPtr( "UNIT_TYPE_HEAVY_PROP" ),
		tStringPtr( "UNIT_TYPE_I_NEED_A_UNIT_ID_AND_COUNTRY" ),
		tStringPtr( "UNIT_TYPE_I_NEED_A_BREAKABLE_UNIT_ID_AND_DEFAULT_COUNTRY" ),
		tStringPtr( "UNIT_TYPE_TARGET" ),
		tStringPtr( "UNIT_TYPE_TOY_BOX" ),
		tStringPtr( "UNIT_TYPE_PICKUP" ),
		tStringPtr( "UNIT_TYPE_PASSENGER" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw1[]={
		tStringPtr( "NONE" ),
		tStringPtr( "TURRET" ),
		tStringPtr( "VEHICLE" ),
		tStringPtr( "INFANTRY" ),
		tStringPtr( "AIR" ),
		tStringPtr( "BOSS" ),
		tStringPtr( "LIGHT_PROP" ),
		tStringPtr( "HEAVY_PROP" ),
		tStringPtr( "I_NEED_A_UNIT_ID_AND_COUNTRY" ),
		tStringPtr( "I_NEED_A_BREAKABLE_UNIT_ID_AND_DEFAULT_COUNTRY" ),
		tStringPtr( "TARGET" ),
		tStringPtr( "TOY_BOX" ),
		tStringPtr( "PICKUP" ),
		tStringPtr( "PASSENGER" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames2[]={
		tStringPtr( "UNIT_LEVEL_DEPRECATED_1" ),
		tStringPtr( "UNIT_LEVEL_DEPRECATED_2" ),
		tStringPtr( "UNIT_LEVEL_DEPRECATED_3" ),
		tStringPtr( "UNIT_LEVEL_DEPRECATED_4" ),
		tStringPtr( "UNIT_LEVEL_DEPRECATED_5" ),
		tStringPtr( "UNIT_LEVEL_DEPRECATED_6" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw2[]={
		tStringPtr( "1" ),
		tStringPtr( "2" ),
		tStringPtr( "3" ),
		tStringPtr( "4" ),
		tStringPtr( "5" ),
		tStringPtr( "6" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames3[]={
		tStringPtr( "UNIT_ID_NONE" ),
		tStringPtr( "UNIT_ID_TURRET_MG_01" ),
		tStringPtr( "UNIT_ID_TURRET_MG_02" ),
		tStringPtr( "UNIT_ID_TURRET_MG_03" ),
		tStringPtr( "UNIT_ID_TURRET_MORTAR_01" ),
		tStringPtr( "UNIT_ID_TURRET_MORTAR_02" ),
		tStringPtr( "UNIT_ID_TURRET_MORTAR_03" ),
		tStringPtr( "UNIT_ID_TURRET_AT_01" ),
		tStringPtr( "UNIT_ID_TURRET_AT_02" ),
		tStringPtr( "UNIT_ID_TURRET_AT_03" ),
		tStringPtr( "UNIT_ID_TURRET_ARTY_01" ),
		tStringPtr( "UNIT_ID_TURRET_ARTY_02" ),
		tStringPtr( "UNIT_ID_TURRET_ARTY_03" ),
		tStringPtr( "UNIT_ID_TURRET_AA_01" ),
		tStringPtr( "UNIT_ID_TURRET_AA_02" ),
		tStringPtr( "UNIT_ID_TURRET_AA_03" ),
		tStringPtr( "UNIT_ID_TURRET_FLAME_01" ),
		tStringPtr( "UNIT_ID_TURRET_FLAME_02" ),
		tStringPtr( "UNIT_ID_TURRET_FLAME_03" ),
		tStringPtr( "UNIT_ID_INFANTRY_BASIC_01" ),
		tStringPtr( "UNIT_ID_INFANTRY_BASIC_02" ),
		tStringPtr( "UNIT_ID_INFANTRY_BASIC_03" ),
		tStringPtr( "UNIT_ID_INFANTRY_BASIC_04" ),
		tStringPtr( "UNIT_ID_INFANTRY_COWBOY_01" ),
		tStringPtr( "UNIT_ID_INFANTRY_ELITE_01" ),
		tStringPtr( "UNIT_ID_INFANTRY_ELITE_02" ),
		tStringPtr( "UNIT_ID_INFANTRY_MOBILE_01" ),
		tStringPtr( "UNIT_ID_INFANTRY_MOBILE_02" ),
		tStringPtr( "UNIT_ID_INFANTRY_ATV" ),
		tStringPtr( "UNIT_ID_CAR_01" ),
		tStringPtr( "UNIT_ID_APC_MG_01" ),
		tStringPtr( "UNIT_ID_APC_AT_01" ),
		tStringPtr( "UNIT_ID_APC_ARTY_01" ),
		tStringPtr( "UNIT_ID_APC_AA_01" ),
		tStringPtr( "UNIT_ID_APC_IFV_01" ),
		tStringPtr( "UNIT_ID_TANK_MEDIUM_01" ),
		tStringPtr( "UNIT_ID_TANK_HEAVY_01" ),
		tStringPtr( "UNIT_ID_HELO_TRANSPORT_01" ),
		tStringPtr( "UNIT_ID_HELO_TRANSPORT_02" ),
		tStringPtr( "UNIT_ID_HELO_ATTACK_01" ),
		tStringPtr( "UNIT_ID_PLANE_TRANSPORT_01" ),
		tStringPtr( "UNIT_ID_PLANE_FIGHTER_01" ),
		tStringPtr( "UNIT_ID_PLANE_FIGHTER_02" ),
		tStringPtr( "UNIT_ID_PLANE_BOMBER_01" ),
		tStringPtr( "UNIT_ID_PROP_1" ),
		tStringPtr( "UNIT_ID_PROP_2" ),
		tStringPtr( "UNIT_ID_PROP_3" ),
		tStringPtr( "UNIT_ID_PROP_4" ),
		tStringPtr( "UNIT_ID_PROP_5" ),
		tStringPtr( "UNIT_ID_PROP_6" ),
		tStringPtr( "UNIT_ID_PROP_7" ),
		tStringPtr( "UNIT_ID_PROP_8" ),
		tStringPtr( "UNIT_ID_PROP_9" ),
		tStringPtr( "UNIT_ID_PROP_10" ),
		tStringPtr( "UNIT_ID_INFANTRY_GENERATOR" ),
		tStringPtr( "UNIT_ID_ARMOR_GENERATOR" ),
		tStringPtr( "UNIT_ID_AIR_GENERATOR" ),
		tStringPtr( "UNIT_ID_BOSS_MI12" ),
		tStringPtr( "UNIT_ID_WALL_WIRE" ),
		tStringPtr( "UNIT_ID_BOSS_MI12_AA" ),
		tStringPtr( "UNIT_ID_BOSS_MI12_MG" ),
		tStringPtr( "UNIT_ID_BOSS_MI12_ROTOR" ),
		tStringPtr( "UNIT_ID_BOSS_TANK" ),
		tStringPtr( "UNIT_ID_BOSS_TANK_TURRET" ),
		tStringPtr( "UNIT_ID_BOSS_TANK_ENGINE" ),
		tStringPtr( "UNIT_ID_BOSS_SUB" ),
		tStringPtr( "UNIT_ID_BOSS_SUB_TOWER" ),
		tStringPtr( "UNIT_ID_BOSS_SUB_SILOS" ),
		tStringPtr( "UNIT_ID_SUBBOSS_TANK_01" ),
		tStringPtr( "UNIT_ID_SUBBOSS_TANK_02" ),
		tStringPtr( "UNIT_ID_SUBBOSS_TANK_03" ),
		tStringPtr( "UNIT_ID_SUBBOSS_TANK_04" ),
		tStringPtr( "UNIT_ID_SUBBOSS_HELICOPTER_01" ),
		tStringPtr( "UNIT_ID_INFANTRY_OFFICER_01" ),
		tStringPtr( "UNIT_ID_EXTRA_VEHICLE_1" ),
		tStringPtr( "UNIT_ID_EXTRA_VEHICLE_2" ),
		tStringPtr( "UNIT_ID_EXTRA_GYROCOPTER" ),
		tStringPtr( "UNIT_ID_EXTRA_PAPAGALLO" ),
		tStringPtr( "UNIT_ID_BOSS_FLYINGTANK" ),
		tStringPtr( "UNIT_ID_BOSS_FLYINGTANK_AA" ),
		tStringPtr( "UNIT_ID_BOSS_FLYINGTANK_MG" ),
		tStringPtr( "UNIT_ID_TANK_SCREW_01" ),
		tStringPtr( "UNIT_ID_TARGET_100" ),
		tStringPtr( "UNIT_ID_TARGET_200" ),
		tStringPtr( "UNIT_ID_TARGET_300" ),
		tStringPtr( "UNIT_ID_BUILD_SITE" ),
		tStringPtr( "UNIT_ID_BARRAGE_ARTILLERY" ),
		tStringPtr( "UNIT_ID_BARRAGE_RAMBO" ),
		tStringPtr( "UNIT_ID_BARRAGE_AC130_MG" ),
		tStringPtr( "UNIT_ID_BARRAGE_AC130_CANNON" ),
		tStringPtr( "UNIT_ID_BARRAGE_AC130_AUTOGUN" ),
		tStringPtr( "UNIT_ID_TANK_ROCKET_01" ),
		tStringPtr( "UNIT_ID_TANK_NUKEPROOF_01" ),
		tStringPtr( "UNIT_ID_BARRAGE_AC130" ),
		tStringPtr( "UNIT_ID_BARRAGE_F117" ),
		tStringPtr( "UNIT_ID_FLYINGTANK_AIRBASE" ),
		tStringPtr( "UNIT_ID_INFANTRY_CAPTAIN_01" ),
		tStringPtr( "UNIT_ID_INFANTRY_CAPTAIN_02" ),
		tStringPtr( "UNIT_ID_INFANTRY_CAPTAIN_03" ),
		tStringPtr( "UNIT_ID_INFANTRY_ATV_FULL_PHYSICS" ),
		tStringPtr( "UNIT_ID_CAR_01_FULL_PHYSICS" ),
		tStringPtr( "UNIT_ID_BOSS_FLYINGTANK_WEAKPOINT" ),
		tStringPtr( "UNIT_ID_TOY_BOX" ),
		tStringPtr( "UNIT_ID_FLY_SMALL_01" ),
		tStringPtr( "UNIT_ID_FLY_MEDIUM_01" ),
		tStringPtr( "UNIT_ID_FLY_LARGE_01" ),
		tStringPtr( "UNIT_ID_FLY_GOLD_01" ),
		tStringPtr( "UNIT_ID_BATTERY_01" ),
		tStringPtr( "UNIT_ID_BATTERY_02" ),
		tStringPtr( "UNIT_ID_PASSENGER" ),
		tStringPtr( "UNIT_ID_PASSENGER_01" ),
		tStringPtr( "UNIT_ID_BARRAGE_SPIN" ),
		tStringPtr( "UNIT_ID_BATTERY_CHARGER" ),
		tStringPtr( "UNIT_ID_EXPLODING_PROP_1" ),
		tStringPtr( "UNIT_ID_EXPLODING_PROP_2" ),
		tStringPtr( "UNIT_ID_EXPLODING_PROP_3" ),
		tStringPtr( "UNIT_ID_EXPLODING_PROP_4" ),
		tStringPtr( "UNIT_ID_EXPLODING_PROP_5" ),
		tStringPtr( "UNIT_ID_BOSS_SUPERTANK" ),
		tStringPtr( "UNIT_ID_USA_BARRAGE_BOMBER" ),
		tStringPtr( "UNIT_ID_USSR_BARRAGE_BOMBER" ),
		tStringPtr( "UNIT_ID_INFANTRY_CYCLE" ),
		tStringPtr( "UNIT_ID_HELO_SUPER_HORMONE" ),
		tStringPtr( "UNIT_ID_SUPERTANK_PHALANX" ),
		tStringPtr( "UNIT_ID_SUPERTANK_ROCKETS" ),
		tStringPtr( "UNIT_ID_WHAC_PIG" ),
		tStringPtr( "UNIT_ID_WHAC_BABUSHKA" ),
		tStringPtr( "UNIT_ID_TANK_ROCKET_02" ),
		tStringPtr( "UNIT_ID_TRUCK_CONVOY_01" ),
		tStringPtr( "UNIT_ID_INFANTRY_CIVILIAN_01" ),
		tStringPtr( "UNIT_ID_HELO_TRANSPORT_CHOPLIFTER_01" ),
		tStringPtr( "UNIT_ID_HELO_CHOPLIFTER_01" ),
		tStringPtr( "UNIT_ID_PIG" ),
		tStringPtr( "UNIT_ID_JET_PACK" ),
		tStringPtr( "UNIT_ID_BOSS_ZEPPELIN" ),
		tStringPtr( "UNIT_ID_SNIPER_TOWER" ),
		tStringPtr( "UNIT_ID_BOSS_ZEPPELIN_ENGINE" ),
		tStringPtr( "UNIT_ID_BOSS_UBER" ),
		tStringPtr( "UNIT_ID_BOSS_RAILGUN" ),
		tStringPtr( "UNIT_ID_RAIL_TRANSPORT" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw3[]={
		tStringPtr( "NONE" ),
		tStringPtr( "TURRET_MG_01" ),
		tStringPtr( "TURRET_MG_02" ),
		tStringPtr( "TURRET_MG_03" ),
		tStringPtr( "TURRET_MORTAR_01" ),
		tStringPtr( "TURRET_MORTAR_02" ),
		tStringPtr( "TURRET_MORTAR_03" ),
		tStringPtr( "TURRET_AT_01" ),
		tStringPtr( "TURRET_AT_02" ),
		tStringPtr( "TURRET_AT_03" ),
		tStringPtr( "TURRET_ARTY_01" ),
		tStringPtr( "TURRET_ARTY_02" ),
		tStringPtr( "TURRET_ARTY_03" ),
		tStringPtr( "TURRET_AA_01" ),
		tStringPtr( "TURRET_AA_02" ),
		tStringPtr( "TURRET_AA_03" ),
		tStringPtr( "TURRET_FLAME_01" ),
		tStringPtr( "TURRET_FLAME_02" ),
		tStringPtr( "TURRET_FLAME_03" ),
		tStringPtr( "INFANTRY_BASIC_01" ),
		tStringPtr( "INFANTRY_BASIC_02" ),
		tStringPtr( "INFANTRY_BASIC_03" ),
		tStringPtr( "INFANTRY_BASIC_04" ),
		tStringPtr( "INFANTRY_COWBOY_01" ),
		tStringPtr( "INFANTRY_ELITE_01" ),
		tStringPtr( "INFANTRY_ELITE_02" ),
		tStringPtr( "INFANTRY_MOBILE_01" ),
		tStringPtr( "INFANTRY_MOBILE_02" ),
		tStringPtr( "INFANTRY_ATV" ),
		tStringPtr( "CAR_01" ),
		tStringPtr( "APC_MG_01" ),
		tStringPtr( "APC_AT_01" ),
		tStringPtr( "APC_ARTY_01" ),
		tStringPtr( "APC_AA_01" ),
		tStringPtr( "APC_IFV_01" ),
		tStringPtr( "TANK_MEDIUM_01" ),
		tStringPtr( "TANK_HEAVY_01" ),
		tStringPtr( "HELO_TRANSPORT_01" ),
		tStringPtr( "HELO_TRANSPORT_02" ),
		tStringPtr( "HELO_ATTACK_01" ),
		tStringPtr( "PLANE_TRANSPORT_01" ),
		tStringPtr( "PLANE_FIGHTER_01" ),
		tStringPtr( "PLANE_FIGHTER_02" ),
		tStringPtr( "PLANE_BOMBER_01" ),
		tStringPtr( "PROP_1" ),
		tStringPtr( "PROP_2" ),
		tStringPtr( "PROP_3" ),
		tStringPtr( "PROP_4" ),
		tStringPtr( "PROP_5" ),
		tStringPtr( "PROP_6" ),
		tStringPtr( "PROP_7" ),
		tStringPtr( "PROP_8" ),
		tStringPtr( "PROP_9" ),
		tStringPtr( "PROP_10" ),
		tStringPtr( "INFANTRY_GENERATOR" ),
		tStringPtr( "ARMOR_GENERATOR" ),
		tStringPtr( "AIR_GENERATOR" ),
		tStringPtr( "BOSS_MI12" ),
		tStringPtr( "WALL_WIRE" ),
		tStringPtr( "BOSS_MI12_AA" ),
		tStringPtr( "BOSS_MI12_MG" ),
		tStringPtr( "BOSS_MI12_ROTOR" ),
		tStringPtr( "BOSS_TANK" ),
		tStringPtr( "BOSS_TANK_TURRET" ),
		tStringPtr( "BOSS_TANK_ENGINE" ),
		tStringPtr( "BOSS_SUB" ),
		tStringPtr( "BOSS_SUB_TOWER" ),
		tStringPtr( "BOSS_SUB_SILOS" ),
		tStringPtr( "SUBBOSS_TANK_01" ),
		tStringPtr( "SUBBOSS_TANK_02" ),
		tStringPtr( "SUBBOSS_TANK_03" ),
		tStringPtr( "SUBBOSS_TANK_04" ),
		tStringPtr( "SUBBOSS_HELICOPTER_01" ),
		tStringPtr( "INFANTRY_OFFICER_01" ),
		tStringPtr( "EXTRA_VEHICLE_1" ),
		tStringPtr( "EXTRA_VEHICLE_2" ),
		tStringPtr( "EXTRA_GYROCOPTER" ),
		tStringPtr( "EXTRA_PAPAGALLO" ),
		tStringPtr( "BOSS_FLYINGTANK" ),
		tStringPtr( "BOSS_FLYINGTANK_AA" ),
		tStringPtr( "BOSS_FLYINGTANK_MG" ),
		tStringPtr( "TANK_SCREW_01" ),
		tStringPtr( "TARGET_100" ),
		tStringPtr( "TARGET_200" ),
		tStringPtr( "TARGET_300" ),
		tStringPtr( "BUILD_SITE" ),
		tStringPtr( "BARRAGE_ARTILLERY" ),
		tStringPtr( "BARRAGE_RAMBO" ),
		tStringPtr( "BARRAGE_AC130_MG" ),
		tStringPtr( "BARRAGE_AC130_CANNON" ),
		tStringPtr( "BARRAGE_AC130_AUTOGUN" ),
		tStringPtr( "TANK_ROCKET_01" ),
		tStringPtr( "TANK_NUKEPROOF_01" ),
		tStringPtr( "BARRAGE_AC130" ),
		tStringPtr( "BARRAGE_F117" ),
		tStringPtr( "FLYINGTANK_AIRBASE" ),
		tStringPtr( "INFANTRY_CAPTAIN_01" ),
		tStringPtr( "INFANTRY_CAPTAIN_02" ),
		tStringPtr( "INFANTRY_CAPTAIN_03" ),
		tStringPtr( "INFANTRY_ATV_FULL_PHYSICS" ),
		tStringPtr( "CAR_01_FULL_PHYSICS" ),
		tStringPtr( "BOSS_FLYINGTANK_WEAKPOINT" ),
		tStringPtr( "TOY_BOX" ),
		tStringPtr( "FLY_SMALL_01" ),
		tStringPtr( "FLY_MEDIUM_01" ),
		tStringPtr( "FLY_LARGE_01" ),
		tStringPtr( "FLY_GOLD_01" ),
		tStringPtr( "BATTERY_01" ),
		tStringPtr( "BATTERY_02" ),
		tStringPtr( "PASSENGER" ),
		tStringPtr( "PASSENGER_01" ),
		tStringPtr( "BARRAGE_SPIN" ),
		tStringPtr( "BATTERY_CHARGER" ),
		tStringPtr( "EXPLODING_PROP_1" ),
		tStringPtr( "EXPLODING_PROP_2" ),
		tStringPtr( "EXPLODING_PROP_3" ),
		tStringPtr( "EXPLODING_PROP_4" ),
		tStringPtr( "EXPLODING_PROP_5" ),
		tStringPtr( "BOSS_SUPERTANK" ),
		tStringPtr( "USA_BARRAGE_BOMBER" ),
		tStringPtr( "USSR_BARRAGE_BOMBER" ),
		tStringPtr( "INFANTRY_CYCLE" ),
		tStringPtr( "HELO_SUPER_HORMONE" ),
		tStringPtr( "SUPERTANK_PHALANX" ),
		tStringPtr( "SUPERTANK_ROCKETS" ),
		tStringPtr( "WHAC_PIG" ),
		tStringPtr( "WHAC_BABUSHKA" ),
		tStringPtr( "TANK_ROCKET_02" ),
		tStringPtr( "TRUCK_CONVOY_01" ),
		tStringPtr( "INFANTRY_CIVILIAN_01" ),
		tStringPtr( "HELO_TRANSPORT_CHOPLIFTER_01" ),
		tStringPtr( "HELO_CHOPLIFTER_01" ),
		tStringPtr( "PIG" ),
		tStringPtr( "JET_PACK" ),
		tStringPtr( "BOSS_ZEPPELIN" ),
		tStringPtr( "SNIPER_TOWER" ),
		tStringPtr( "BOSS_ZEPPELIN_ENGINE" ),
		tStringPtr( "BOSS_UBER" ),
		tStringPtr( "BOSS_RAILGUN" ),
		tStringPtr( "RAIL_TRANSPORT" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames4[]={
		tStringPtr( "BUILD_SITE_SMALL" ),
		tStringPtr( "BUILD_SITE_LARGE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw4[]={
		tStringPtr( "SMALL" ),
		tStringPtr( "LARGE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames5[]={
		tStringPtr( "MAP_TYPE_FRONTEND" ),
		tStringPtr( "MAP_TYPE_CAMPAIGN" ),
		tStringPtr( "MAP_TYPE_HEADTOHEAD" ),
		tStringPtr( "MAP_TYPE_SURVIVAL" ),
		tStringPtr( "MAP_TYPE_MINIGAME" ),
		tStringPtr( "MAP_TYPE_DEVSINGLEPLAYER" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw5[]={
		tStringPtr( "FRONTEND" ),
		tStringPtr( "CAMPAIGN" ),
		tStringPtr( "HEADTOHEAD" ),
		tStringPtr( "SURVIVAL" ),
		tStringPtr( "MINIGAME" ),
		tStringPtr( "DEVSINGLEPLAYER" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames6[]={
		tStringPtr( "ARTILLERY_SOLDIER_DEFAULT" ),
		tStringPtr( "ARTILLERY_SOLDIER_DYNAMIC" ),
		tStringPtr( "ARTILLERY_SOLDIER_INCONSEQUENTIAL" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw6[]={
		tStringPtr( "DEFAULT" ),
		tStringPtr( "DYNAMIC" ),
		tStringPtr( "INCONSEQUENTIAL" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames7[]={
		tStringPtr( "COUNTRY_DEFAULT" ),
		tStringPtr( "COUNTRY_USA" ),
		tStringPtr( "COUNTRY_USSR" ),
		tStringPtr( "COUNTRY_BRITISH" ),
		tStringPtr( "COUNTRY_GERMAN" ),
		tStringPtr( "COUNTRY_FRENCH" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw7[]={
		tStringPtr( "DEFAULT" ),
		tStringPtr( "USA" ),
		tStringPtr( "USSR" ),
		tStringPtr( "BRITISH" ),
		tStringPtr( "GERMAN" ),
		tStringPtr( "FRENCH" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames8[]={
		tStringPtr( "SPECIAL_LEVEL_OBJECT_DEFAULT" ),
		tStringPtr( "SPECIAL_LEVEL_OBJECT_BOSS" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw8[]={
		tStringPtr( "DEFAULT" ),
		tStringPtr( "BOSS" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames9[]={
		tStringPtr( "DAMAGE_TYPE_NONE" ),
		tStringPtr( "DAMAGE_TYPE_BULLET" ),
		tStringPtr( "DAMAGE_TYPE_EXPLOSION" ),
		tStringPtr( "DAMAGE_TYPE_IMPACT" ),
		tStringPtr( "DAMAGE_TYPE_FIRE" ),
		tStringPtr( "DAMAGE_TYPE_STAB" ),
		tStringPtr( "DAMAGE_TYPE_AREA" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw9[]={
		tStringPtr( "NONE" ),
		tStringPtr( "BULLET" ),
		tStringPtr( "EXPLOSION" ),
		tStringPtr( "IMPACT" ),
		tStringPtr( "FIRE" ),
		tStringPtr( "STAB" ),
		tStringPtr( "AREA" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames10[]={
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE0" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE1" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE2" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE3" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE4" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE5" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE6" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE7" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE8" ),
		tStringPtr( "TRIGGERED_BREAK_STATE_STATE9" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw10[]={
		tStringPtr( "STATE0" ),
		tStringPtr( "STATE1" ),
		tStringPtr( "STATE2" ),
		tStringPtr( "STATE3" ),
		tStringPtr( "STATE4" ),
		tStringPtr( "STATE5" ),
		tStringPtr( "STATE6" ),
		tStringPtr( "STATE7" ),
		tStringPtr( "STATE8" ),
		tStringPtr( "STATE9" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames11[]={
		tStringPtr( "DEBRIS_TYPE_NONE" ),
		tStringPtr( "DEBRIS_TYPE_CHARACTER" ),
		tStringPtr( "DEBRIS_TYPE_SMALL" ),
		tStringPtr( "DEBRIS_TYPE_MEDIUM" ),
		tStringPtr( "DEBRIS_TYPE_LARGE" ),
		tStringPtr( "DEBRIS_TYPE_SHELL_CASING" ),
		tStringPtr( "DEBRIS_TYPE_EXPLODING_BARREL" ),
		tStringPtr( "DEBRIS_TYPE_AIRPLANE_WRECKAGE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw11[]={
		tStringPtr( "NONE" ),
		tStringPtr( "CHARACTER" ),
		tStringPtr( "SMALL" ),
		tStringPtr( "MEDIUM" ),
		tStringPtr( "LARGE" ),
		tStringPtr( "SHELL_CASING" ),
		tStringPtr( "EXPLODING_BARREL" ),
		tStringPtr( "AIRPLANE_WRECKAGE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames12[]={
		tStringPtr( "CONTEXT_ANIM_TYPE_NONE" ),
		tStringPtr( "CONTEXT_ANIM_TYPE_BARBED_WIRE" ),
		tStringPtr( "CONTEXT_ANIM_TYPE_JUMP_DIRECTION" ),
		tStringPtr( "CONTEXT_ANIM_TYPE_LADDER_CLIMB" ),
		tStringPtr( "CONTEXT_ANIM_TYPE_TELEPORT" ),
		tStringPtr( "CONTEXT_ANIM_TYPE_STEP_UP" ),
		tStringPtr( "CONTEXT_ANIM_TYPE_WALL_CLIMB" ),
		tStringPtr( "CONTEXT_ANIM_TYPE_VAULT_OVER" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw12[]={
		tStringPtr( "NONE" ),
		tStringPtr( "BARBED_WIRE" ),
		tStringPtr( "JUMP_DIRECTION" ),
		tStringPtr( "LADDER_CLIMB" ),
		tStringPtr( "TELEPORT" ),
		tStringPtr( "STEP_UP" ),
		tStringPtr( "WALL_CLIMB" ),
		tStringPtr( "VAULT_OVER" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames13[]={
		tStringPtr( "GROUND_TYPE_DEPRICATED_NONE" ),
		tStringPtr( "GROUND_TYPE_DEPRICATED_DIRT" ),
		tStringPtr( "GROUND_TYPE_DEPRICATED_WATER" ),
		tStringPtr( "GROUND_TYPE_DEPRICATED_MUD" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw13[]={
		tStringPtr( "NONE" ),
		tStringPtr( "DIRT" ),
		tStringPtr( "WATER" ),
		tStringPtr( "MUD" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames14[]={
		tStringPtr( "LEVEL_EVENT_UNIT_DESTROYED" ),
		tStringPtr( "LEVEL_EVENT_REACHED_GOAL" ),
		tStringPtr( "LEVEL_EVENT_REACHED_END_OF_PATH" ),
		tStringPtr( "LEVEL_EVENT_ZERO_HITPOINTS" ),
		tStringPtr( "LEVEL_EVENT_BOSS_STAGE_CHANGED" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw14[]={
		tStringPtr( "UNIT_DESTROYED" ),
		tStringPtr( "REACHED_GOAL" ),
		tStringPtr( "REACHED_END_OF_PATH" ),
		tStringPtr( "ZERO_HITPOINTS" ),
		tStringPtr( "BOSS_STAGE_CHANGED" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames15[]={
		tStringPtr( "LINKED_HITPOINTS_DIRECT" ),
		tStringPtr( "LINKED_HITPOINTS_TRANSFER" ),
		tStringPtr( "LINKED_HITPOINTS_ON_DESTROYED" ),
		tStringPtr( "LINKED_HITPOINTS_DIRECT_AND_ON_DESTROYED" ),
		tStringPtr( "LINKED_HITPOINTS_TRANSFER_ONLY_DIRECT" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw15[]={
		tStringPtr( "DIRECT" ),
		tStringPtr( "TRANSFER" ),
		tStringPtr( "ON_DESTROYED" ),
		tStringPtr( "DIRECT_AND_ON_DESTROYED" ),
		tStringPtr( "TRANSFER_ONLY_DIRECT" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames16[]={
		tStringPtr( "TRACER_TYPE_SHELL_1" ),
		tStringPtr( "TRACER_TYPE_SHELL_2" ),
		tStringPtr( "TRACER_TYPE_SHELL_3" ),
		tStringPtr( "TRACER_TYPE_SHELL_4" ),
		tStringPtr( "TRACER_TYPE_BULLET_1" ),
		tStringPtr( "TRACER_TYPE_BULLET_2" ),
		tStringPtr( "TRACER_TYPE_BULLET_3" ),
		tStringPtr( "TRACER_TYPE_BULLET_4" ),
		tStringPtr( "TRACER_TYPE_BULLET_TRAIL_1" ),
		tStringPtr( "TRACER_TYPE_BULLET_TRAIL_2" ),
		tStringPtr( "TRACER_TYPE_BULLET_TRAIL_3" ),
		tStringPtr( "TRACER_TYPE_BULLET_TRAIL_4" ),
		tStringPtr( "TRACER_TYPE_ROCKET_1" ),
		tStringPtr( "TRACER_TYPE_ROCKET_2" ),
		tStringPtr( "TRACER_TYPE_ROCKET_3" ),
		tStringPtr( "TRACER_TYPE_ROCKET_4" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw16[]={
		tStringPtr( "SHELL_1" ),
		tStringPtr( "SHELL_2" ),
		tStringPtr( "SHELL_3" ),
		tStringPtr( "SHELL_4" ),
		tStringPtr( "BULLET_1" ),
		tStringPtr( "BULLET_2" ),
		tStringPtr( "BULLET_3" ),
		tStringPtr( "BULLET_4" ),
		tStringPtr( "BULLET_TRAIL_1" ),
		tStringPtr( "BULLET_TRAIL_2" ),
		tStringPtr( "BULLET_TRAIL_3" ),
		tStringPtr( "BULLET_TRAIL_4" ),
		tStringPtr( "ROCKET_1" ),
		tStringPtr( "ROCKET_2" ),
		tStringPtr( "ROCKET_3" ),
		tStringPtr( "ROCKET_4" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames17[]={
		tStringPtr( "DIFFICULTY_CASUAL" ),
		tStringPtr( "DIFFICULTY_NORMAL" ),
		tStringPtr( "DIFFICULTY_HARD" ),
		tStringPtr( "DIFFICULTY_ELITE" ),
		tStringPtr( "DIFFICULTY_GENERAL" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw17[]={
		tStringPtr( "CASUAL" ),
		tStringPtr( "NORMAL" ),
		tStringPtr( "HARD" ),
		tStringPtr( "ELITE" ),
		tStringPtr( "GENERAL" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames18[]={
		tStringPtr( "CARGO_INDEX_1" ),
		tStringPtr( "CARGO_INDEX_2" ),
		tStringPtr( "CARGO_INDEX_3" ),
		tStringPtr( "CARGO_INDEX_4" ),
		tStringPtr( "CARGO_INDEX_5" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw18[]={
		tStringPtr( "1" ),
		tStringPtr( "2" ),
		tStringPtr( "3" ),
		tStringPtr( "4" ),
		tStringPtr( "5" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames19[]={
		tStringPtr( "WEAPON_INDEX_1" ),
		tStringPtr( "WEAPON_INDEX_2" ),
		tStringPtr( "WEAPON_INDEX_3" ),
		tStringPtr( "WEAPON_INDEX_4" ),
		tStringPtr( "WEAPON_INDEX_5" ),
		tStringPtr( "WEAPON_INDEX_6" ),
		tStringPtr( "WEAPON_INDEX_7" ),
		tStringPtr( "WEAPON_INDEX_8" ),
		tStringPtr( "WEAPON_INDEX_9" ),
		tStringPtr( "WEAPON_INDEX_10" ),
		tStringPtr( "WEAPON_INDEX_11" ),
		tStringPtr( "WEAPON_INDEX_12" ),
		tStringPtr( "WEAPON_INDEX_13" ),
		tStringPtr( "WEAPON_INDEX_14" ),
		tStringPtr( "WEAPON_INDEX_15" ),
		tStringPtr( "WEAPON_INDEX_16" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw19[]={
		tStringPtr( "1" ),
		tStringPtr( "2" ),
		tStringPtr( "3" ),
		tStringPtr( "4" ),
		tStringPtr( "5" ),
		tStringPtr( "6" ),
		tStringPtr( "7" ),
		tStringPtr( "8" ),
		tStringPtr( "9" ),
		tStringPtr( "10" ),
		tStringPtr( "11" ),
		tStringPtr( "12" ),
		tStringPtr( "13" ),
		tStringPtr( "14" ),
		tStringPtr( "15" ),
		tStringPtr( "16" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames20[]={
		tStringPtr( "THROTTLE_0" ),
		tStringPtr( "THROTTLE_1" ),
		tStringPtr( "THROTTLE_2" ),
		tStringPtr( "THROTTLE_3" ),
		tStringPtr( "THROTTLE_4" ),
		tStringPtr( "THROTTLE_5" ),
		tStringPtr( "THROTTLE_6" ),
		tStringPtr( "THROTTLE_7" ),
		tStringPtr( "THROTTLE_8" ),
		tStringPtr( "THROTTLE_9" ),
		tStringPtr( "THROTTLE_10" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw20[]={
		tStringPtr( "0" ),
		tStringPtr( "1" ),
		tStringPtr( "2" ),
		tStringPtr( "3" ),
		tStringPtr( "4" ),
		tStringPtr( "5" ),
		tStringPtr( "6" ),
		tStringPtr( "7" ),
		tStringPtr( "8" ),
		tStringPtr( "9" ),
		tStringPtr( "10" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames21[]={
		tStringPtr( "WEAPON_ACTION_FIRE" ),
		tStringPtr( "WEAPON_ACTION_END_FIRE" ),
		tStringPtr( "WEAPON_ACTION_FIRE_INTERNAL" ),
		tStringPtr( "WEAPON_ACTION_END_FIRE_INTERNAL" ),
		tStringPtr( "WEAPON_ACTION_ENABLE" ),
		tStringPtr( "WEAPON_ACTION_DISABLE" ),
		tStringPtr( "WEAPON_ACTION_ENABLE_INTERNAL" ),
		tStringPtr( "WEAPON_ACTION_DISABLE_INTERNAL" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw21[]={
		tStringPtr( "FIRE" ),
		tStringPtr( "END_FIRE" ),
		tStringPtr( "FIRE_INTERNAL" ),
		tStringPtr( "END_FIRE_INTERNAL" ),
		tStringPtr( "ENABLE" ),
		tStringPtr( "DISABLE" ),
		tStringPtr( "ENABLE_INTERNAL" ),
		tStringPtr( "DISABLE_INTERNAL" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames22[]={
		tStringPtr( "SURFACE_TYPE_ARMOR_MAX" ),
		tStringPtr( "SURFACE_TYPE_ARMOR_MIN" ),
		tStringPtr( "SURFACE_TYPE_CEMENT" ),
		tStringPtr( "SURFACE_TYPE_DIRT" ),
		tStringPtr( "SURFACE_TYPE_FLESH" ),
		tStringPtr( "SURFACE_TYPE_GLASS" ),
		tStringPtr( "SURFACE_TYPE_GRASS" ),
		tStringPtr( "SURFACE_TYPE_METAL_THICK" ),
		tStringPtr( "SURFACE_TYPE_METAL_THIN" ),
		tStringPtr( "SURFACE_TYPE_METAL_HOLLOW" ),
		tStringPtr( "SURFACE_TYPE_SAND_BAG" ),
		tStringPtr( "SURFACE_TYPE_WATER" ),
		tStringPtr( "SURFACE_TYPE_WOOD" ),
		tStringPtr( "SURFACE_TYPE_CLOTH" ),
		tStringPtr( "SURFACE_TYPE_BARBWIRE" ),
		tStringPtr( "SURFACE_TYPE_SNOW" ),
		tStringPtr( "SURFACE_TYPE_INSECT_SKIN" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw22[]={
		tStringPtr( "ARMOR_MAX" ),
		tStringPtr( "ARMOR_MIN" ),
		tStringPtr( "CEMENT" ),
		tStringPtr( "DIRT" ),
		tStringPtr( "FLESH" ),
		tStringPtr( "GLASS" ),
		tStringPtr( "GRASS" ),
		tStringPtr( "METAL_THICK" ),
		tStringPtr( "METAL_THIN" ),
		tStringPtr( "METAL_HOLLOW" ),
		tStringPtr( "SAND_BAG" ),
		tStringPtr( "WATER" ),
		tStringPtr( "WOOD" ),
		tStringPtr( "CLOTH" ),
		tStringPtr( "BARBWIRE" ),
		tStringPtr( "SNOW" ),
		tStringPtr( "INSECT_SKIN" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames23[]={
		tStringPtr( "CHARACTER_PROPS_ROCKET_LAUNCHER" ),
		tStringPtr( "CHARACTER_PROPS_PISTOL" ),
		tStringPtr( "CHARACTER_PROPS_FLAG" ),
		tStringPtr( "CHARACTER_PROPS_WALKIE_TALKIE" ),
		tStringPtr( "CHARACTER_PROPS_REMOTE" ),
		tStringPtr( "CHARACTER_PROPS_RIFLE" ),
		tStringPtr( "CHARACTER_PROPS_BINOCULARS" ),
		tStringPtr( "CHARACTER_PROPS_WALKIE_TALKIE_LEFT" ),
		tStringPtr( "CHARACTER_PROPS_REMOTE_LEFT" ),
		tStringPtr( "CHARACTER_PROPS_BINOCULARS_LEFT" ),
		tStringPtr( "CHARACTER_PROPS_MATCHSTICK" ),
		tStringPtr( "CHARACTER_PROPS_MATCHSTICK_LEFT" ),
		tStringPtr( "CHARACTER_PROPS_VIETNAM_FLAG" ),
		tStringPtr( "CHARACTER_PROPS_KOREAN_FLAG" ),
		tStringPtr( "CHARACTER_PROPS_SPECIAL_HELMET" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw23[]={
		tStringPtr( "ROCKET_LAUNCHER" ),
		tStringPtr( "PISTOL" ),
		tStringPtr( "FLAG" ),
		tStringPtr( "WALKIE_TALKIE" ),
		tStringPtr( "REMOTE" ),
		tStringPtr( "RIFLE" ),
		tStringPtr( "BINOCULARS" ),
		tStringPtr( "WALKIE_TALKIE_LEFT" ),
		tStringPtr( "REMOTE_LEFT" ),
		tStringPtr( "BINOCULARS_LEFT" ),
		tStringPtr( "MATCHSTICK" ),
		tStringPtr( "MATCHSTICK_LEFT" ),
		tStringPtr( "VIETNAM_FLAG" ),
		tStringPtr( "KOREAN_FLAG" ),
		tStringPtr( "SPECIAL_HELMET" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames24[]={
		tStringPtr( "WEAPON_STATE_IDLE" ),
		tStringPtr( "WEAPON_STATE_FIRING" ),
		tStringPtr( "WEAPON_STATE_RELOADING" ),
		tStringPtr( "WEAPON_STATE_AIMING" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw24[]={
		tStringPtr( "IDLE" ),
		tStringPtr( "FIRING" ),
		tStringPtr( "RELOADING" ),
		tStringPtr( "AIMING" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames25[]={
		tStringPtr( "AUDIO_TYPE_ID_DEFAULT" ),
		tStringPtr( "AUDIO_TYPE_ID_OILBARREL" ),
		tStringPtr( "AUDIO_TYPE_ID_TREEBAMBOO" ),
		tStringPtr( "AUDIO_TYPE_ID_TREEPALM" ),
		tStringPtr( "AUDIO_TYPE_ID_STREETSIGN" ),
		tStringPtr( "AUDIO_TYPE_ID_TREE_DEAD" ),
		tStringPtr( "AUDIO_TYPE_ID_TREE_DRYLEAVES_LG" ),
		tStringPtr( "AUDIO_TYPE_ID_TREE_DRYLEAVES_SM" ),
		tStringPtr( "AUDIO_TYPE_ID_TREE_LEAFY_LG" ),
		tStringPtr( "AUDIO_TYPE_ID_TREE_LEAFY_SM" ),
		tStringPtr( "AUDIO_TYPE_ID_LAMPPOST" ),
		tStringPtr( "AUDIO_TYPE_ID_PARKBENCH" ),
		tStringPtr( "AUDIO_TYPE_ID_PHONEBOOTH" ),
		tStringPtr( "AUDIO_TYPE_ID_TRASHCAN" ),
		tStringPtr( "AUDIO_TYPE_ID_SANDBAG" ),
		tStringPtr( "AUDIO_TYPE_ID_CAR_TRABANT" ),
		tStringPtr( "AUDIO_TYPE_ID_WOODCRATE" ),
		tStringPtr( "AUDIO_TYPE_ID_BARBWIRE" ),
		tStringPtr( "AUDIO_TYPE_ID_TELEPHONEPOLE" ),
		tStringPtr( "AUDIO_TYPE_ID_BUSH_LEAFY" ),
		tStringPtr( "AUDIO_TYPE_ID_HELI_USA_APACHE" ),
		tStringPtr( "AUDIO_TYPE_ID_HELI_USSR_HIND" ),
		tStringPtr( "AUDIO_TYPE_ID_AIRPLANE_USSR_MIG23" ),
		tStringPtr( "AUDIO_TYPE_ID_AIRPLANE_USA_F14" ),
		tStringPtr( "AUDIO_TYPE_ID_TANK_USA_M1ABRAMS" ),
		tStringPtr( "AUDIO_TYPE_ID_INFANTRY_BASIC_CUBA" ),
		tStringPtr( "AUDIO_TYPE_ID_INFANTRY_BASIC_KOREA" ),
		tStringPtr( "AUDIO_TYPE_ID_INFANTRY_BASIC_USA" ),
		tStringPtr( "AUDIO_TYPE_ID_INFANTRY_BASIC_USSR" ),
		tStringPtr( "AUDIO_TYPE_ID_INFANTRY_BASIC_VIETNAM" ),
		tStringPtr( "AUDIO_TYPE_ID_ATV" ),
		tStringPtr( "AUDIO_TYPE_ID_TANK_USSR_T80" ),
		tStringPtr( "AUDIO_TYPE_ID_TANK_USA_M60PATTON" ),
		tStringPtr( "AUDIO_TYPE_ID_TANK_USSR_T55" ),
		tStringPtr( "AUDIO_TYPE_ID_IFV_USA_M2BRADLEY" ),
		tStringPtr( "AUDIO_TYPE_ID_IFV_USSR_BMP1" ),
		tStringPtr( "AUDIO_TYPE_ID_ARMOREDCAR_USA_M151JEEP" ),
		tStringPtr( "AUDIO_TYPE_ID_ARMOREDCAR_USSR_BRDM1" ),
		tStringPtr( "AUDIO_TYPE_ID_APC_USA_M106" ),
		tStringPtr( "AUDIO_TYPE_ID_APC_USSR_BTR60" ),
		tStringPtr( "AUDIO_TYPE_ID_OBJ_FLAGPOLL01" ),
		tStringPtr( "AUDIO_TYPE_ID_AIRPLANE_USA_B52" ),
		tStringPtr( "AUDIO_TYPE_ID_AIRPLANE_USSR_TU95" ),
		tStringPtr( "AUDIO_TYPE_ID_AIRPLANE_USSR_AN12" ),
		tStringPtr( "AUDIO_TYPE_ID_AIRPLANE_USA_C130" ),
		tStringPtr( "AUDIO_TYPE_ID_AIRPLANE_USA_MUSTANG" ),
		tStringPtr( "AUDIO_TYPE_ID_WOODTARGET_VERTICAL" ),
		tStringPtr( "AUDIO_TYPE_ID_WOODTARGET_ROTATE" ),
		tStringPtr( "AUDIO_TYPE_ID_HELI_USA_UH1_HUEY" ),
		tStringPtr( "AUDIO_TYPE_ID_HELI_USSR_MI8_HIP" ),
		tStringPtr( "AUDIO_TYPE_ID_COMMANDO_USSR" ),
		tStringPtr( "AUDIO_TYPE_ID_COMMANDO_USA" ),
		tStringPtr( "AUDIO_TYPE_ID_TENT" ),
		tStringPtr( "AUDIO_TYPE_ID_GAS_PUMP" ),
		tStringPtr( "AUDIO_TYPE_ID_BUILDING_GRASSHUT" ),
		tStringPtr( "AUDIO_TYPE_ID_BUILDING_GENERAL_SM" ),
		tStringPtr( "AUDIO_TYPE_ID_BUILDING_GENERAL_MD" ),
		tStringPtr( "AUDIO_TYPE_ID_BUILDING_GENERAL_LG" ),
		tStringPtr( "AUDIO_TYPE_ID_SHOOTINGGALLERY_TARGET" ),
		tStringPtr( "AUDIO_TYPE_ID_WOODCRATE_STACK" ),
		tStringPtr( "AUDIO_TYPE_ID_GASCANISTER" ),
		tStringPtr( "AUDIO_TYPE_ID_BABUSHKA_SM" ),
		tStringPtr( "AUDIO_TYPE_ID_BABUSHKA_LG" ),
		tStringPtr( "AUDIO_TYPE_ID_VEHICLE_LARGE" ),
		tStringPtr( "AUDIO_TYPE_ID_VEHICLE_BOXCAR" ),
		tStringPtr( "AUDIO_TYPE_ID_BATTERY" ),
		tStringPtr( "AUDIO_TYPE_ID_VEHICLE_ATV" ),
		tStringPtr( "AUDIO_TYPE_ID_COMMANDO_BOX" ),
		tStringPtr( "AUDIO_TYPE_ID_VEHICLE_PECHORA" ),
		tStringPtr( "AUDIO_TYPE_ID_VEHICLE_LAZERTANK" ),
		tStringPtr( "AUDIO_TYPE_ID_OILBARREL_STACK" ),
		tStringPtr( "AUDIO_TYPE_ID_MINIGAME_BONUS" ),
		tStringPtr( "AUDIO_TYPE_ID_TINSHELTER" ),
		tStringPtr( "AUDIO_TYPE_ID_BAMBOOFENCE" ),
		tStringPtr( "AUDIO_TYPE_ID_TOYBOX" ),
		tStringPtr( "AUDIO_TYPE_ID_TARGET_100" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_BALLOON" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_BOMBER" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_FIRETRUCK" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_MUSTANG" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_SPACETANK" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_TANK_ARMOREDCAR" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_TANK_AV7" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_TANK_PANZER" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_TANK_WAGON" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_TRIPLANE" ),
		tStringPtr( "AUDIO_TYPE_ID_TS1_VEHICLE_ZEPPELIN" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw25[]={
		tStringPtr( "DEFAULT" ),
		tStringPtr( "OILBARREL" ),
		tStringPtr( "TREEBAMBOO" ),
		tStringPtr( "TREEPALM" ),
		tStringPtr( "STREETSIGN" ),
		tStringPtr( "TREE_DEAD" ),
		tStringPtr( "TREE_DRYLEAVES_LG" ),
		tStringPtr( "TREE_DRYLEAVES_SM" ),
		tStringPtr( "TREE_LEAFY_LG" ),
		tStringPtr( "TREE_LEAFY_SM" ),
		tStringPtr( "LAMPPOST" ),
		tStringPtr( "PARKBENCH" ),
		tStringPtr( "PHONEBOOTH" ),
		tStringPtr( "TRASHCAN" ),
		tStringPtr( "SANDBAG" ),
		tStringPtr( "CAR_TRABANT" ),
		tStringPtr( "WOODCRATE" ),
		tStringPtr( "BARBWIRE" ),
		tStringPtr( "TELEPHONEPOLE" ),
		tStringPtr( "BUSH_LEAFY" ),
		tStringPtr( "HELI_USA_APACHE" ),
		tStringPtr( "HELI_USSR_HIND" ),
		tStringPtr( "AIRPLANE_USSR_MIG23" ),
		tStringPtr( "AIRPLANE_USA_F14" ),
		tStringPtr( "TANK_USA_M1ABRAMS" ),
		tStringPtr( "INFANTRY_BASIC_CUBA" ),
		tStringPtr( "INFANTRY_BASIC_KOREA" ),
		tStringPtr( "INFANTRY_BASIC_USA" ),
		tStringPtr( "INFANTRY_BASIC_USSR" ),
		tStringPtr( "INFANTRY_BASIC_VIETNAM" ),
		tStringPtr( "ATV" ),
		tStringPtr( "TANK_USSR_T80" ),
		tStringPtr( "TANK_USA_M60PATTON" ),
		tStringPtr( "TANK_USSR_T55" ),
		tStringPtr( "IFV_USA_M2BRADLEY" ),
		tStringPtr( "IFV_USSR_BMP1" ),
		tStringPtr( "ARMOREDCAR_USA_M151JEEP" ),
		tStringPtr( "ARMOREDCAR_USSR_BRDM1" ),
		tStringPtr( "APC_USA_M106" ),
		tStringPtr( "APC_USSR_BTR60" ),
		tStringPtr( "OBJ_FLAGPOLL01" ),
		tStringPtr( "AIRPLANE_USA_B52" ),
		tStringPtr( "AIRPLANE_USSR_TU95" ),
		tStringPtr( "AIRPLANE_USSR_AN12" ),
		tStringPtr( "AIRPLANE_USA_C130" ),
		tStringPtr( "AIRPLANE_USA_MUSTANG" ),
		tStringPtr( "WOODTARGET_VERTICAL" ),
		tStringPtr( "WOODTARGET_ROTATE" ),
		tStringPtr( "HELI_USA_UH1_HUEY" ),
		tStringPtr( "HELI_USSR_MI8_HIP" ),
		tStringPtr( "COMMANDO_USSR" ),
		tStringPtr( "COMMANDO_USA" ),
		tStringPtr( "TENT" ),
		tStringPtr( "GAS_PUMP" ),
		tStringPtr( "BUILDING_GRASSHUT" ),
		tStringPtr( "BUILDING_GENERAL_SM" ),
		tStringPtr( "BUILDING_GENERAL_MD" ),
		tStringPtr( "BUILDING_GENERAL_LG" ),
		tStringPtr( "SHOOTINGGALLERY_TARGET" ),
		tStringPtr( "WOODCRATE_STACK" ),
		tStringPtr( "GASCANISTER" ),
		tStringPtr( "BABUSHKA_SM" ),
		tStringPtr( "BABUSHKA_LG" ),
		tStringPtr( "VEHICLE_LARGE" ),
		tStringPtr( "VEHICLE_BOXCAR" ),
		tStringPtr( "BATTERY" ),
		tStringPtr( "VEHICLE_ATV" ),
		tStringPtr( "COMMANDO_BOX" ),
		tStringPtr( "VEHICLE_PECHORA" ),
		tStringPtr( "VEHICLE_LAZERTANK" ),
		tStringPtr( "OILBARREL_STACK" ),
		tStringPtr( "MINIGAME_BONUS" ),
		tStringPtr( "TINSHELTER" ),
		tStringPtr( "BAMBOOFENCE" ),
		tStringPtr( "TOYBOX" ),
		tStringPtr( "TARGET_100" ),
		tStringPtr( "TS1_VEHICLE_BALLOON" ),
		tStringPtr( "TS1_VEHICLE_BOMBER" ),
		tStringPtr( "TS1_VEHICLE_FIRETRUCK" ),
		tStringPtr( "TS1_VEHICLE_MUSTANG" ),
		tStringPtr( "TS1_VEHICLE_SPACETANK" ),
		tStringPtr( "TS1_VEHICLE_TANK_ARMOREDCAR" ),
		tStringPtr( "TS1_VEHICLE_TANK_AV7" ),
		tStringPtr( "TS1_VEHICLE_TANK_PANZER" ),
		tStringPtr( "TS1_VEHICLE_TANK_WAGON" ),
		tStringPtr( "TS1_VEHICLE_TRIPLANE" ),
		tStringPtr( "TS1_VEHICLE_ZEPPELIN" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames26[]={
		tStringPtr( "EXTRA_SEAT_INDEX_1" ),
		tStringPtr( "EXTRA_SEAT_INDEX_2" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw26[]={
		tStringPtr( "1" ),
		tStringPtr( "2" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames27[]={
		tStringPtr( "WHEEL_INDEX_LEFT_FRONT" ),
		tStringPtr( "WHEEL_INDEX_RIGHT_FRONT" ),
		tStringPtr( "WHEEL_INDEX_LEFT_REAR" ),
		tStringPtr( "WHEEL_INDEX_RIGHT_REAR" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw27[]={
		tStringPtr( "LEFT_FRONT" ),
		tStringPtr( "RIGHT_FRONT" ),
		tStringPtr( "LEFT_REAR" ),
		tStringPtr( "RIGHT_REAR" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames28[]={
		tStringPtr( "TUTORIAL_EVENT_INPUT" ),
		tStringPtr( "TUTORIAL_EVENT_UNIT_BUILT" ),
		tStringPtr( "TUTORIAL_EVENT_UNIT_DESTROYED" ),
		tStringPtr( "TUTORIAL_EVENT_USE_UNIT" ),
		tStringPtr( "TUTORIAL_EVENT_TURRET_UPGRADE" ),
		tStringPtr( "TUTORIAL_EVENT_TURRET_REPAIR" ),
		tStringPtr( "TUTORIAL_EVENT_TURRET_SELL" ),
		tStringPtr( "TUTORIAL_EVENT_BEGIN" ),
		tStringPtr( "TUTORIAL_EVENT_CONTINUE" ),
		tStringPtr( "TUTORIAL_EVENT_USE_MENU" ),
		tStringPtr( "TUTORIAL_EVENT_OVERCHARGE" ),
		tStringPtr( "TUTORIAL_EVENT_BARRAGE_RECEIVED" ),
		tStringPtr( "TUTORIAL_EVENT_BARRAGE_ACTIVATED" ),
		tStringPtr( "TUTORIAL_EVENT_MINIGAME_BEGIN" ),
		tStringPtr( "TUTORIAL_EVENT_MINIGAME_END" ),
		tStringPtr( "TUTORIAL_EVENT_MINIGAME_RESTART" ),
		tStringPtr( "TUTORIAL_EVENT_MINIGAME_CONTINUE" ),
		tStringPtr( "TUTORIAL_EVENT_PLACE_MENU" ),
		tStringPtr( "TUTORIAL_EVENT_BARRAGE_ENDED" ),
		tStringPtr( "TUTORIAL_EVENT_BARRAGE_USED" ),
		tStringPtr( "TUTORIAL_EVENT_SKIP" ),
		tStringPtr( "TUTORIAL_EVENT_MINIGAME_DEFEAT" ),
		tStringPtr( "TUTORIAL_EVENT_MINIGAME_BONUS" ),
		tStringPtr( "TUTORIAL_EVENT_SUSPEND" ),
		tStringPtr( "TUTORIAL_EVENT_COMBO_LOST" ),
		tStringPtr( "TUTORIAL_EVENT_SPECIAL_MOVE" ),
		tStringPtr( "TUTORIAL_EVENT_UNIT_IN_ALARM_ZONE" ),
		tStringPtr( "TUTORIAL_EVENT_ACHIEVEMENT" ),
		tStringPtr( "TUTORIAL_EVENT_LUCKY_STAR_BARRAGE" ),
		tStringPtr( "TUTORIAL_EVENT_HIT_APC_WITH_LOAD" ),
		tStringPtr( "TUTORIAL_EVENT_APC_BEGIN_UNLOAD" ),
		tStringPtr( "TUTORIAL_EVENT_TIME" ),
		tStringPtr( "TUTORIAL_EVENT_BEGIN_CHARGING" ),
		tStringPtr( "TUTORIAL_EVENT_UNIT_REACHED_GOAL" ),
		tStringPtr( "TUTORIAL_EVENT_UNIT_IGNITED" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw28[]={
		tStringPtr( "INPUT" ),
		tStringPtr( "UNIT_BUILT" ),
		tStringPtr( "UNIT_DESTROYED" ),
		tStringPtr( "USE_UNIT" ),
		tStringPtr( "TURRET_UPGRADE" ),
		tStringPtr( "TURRET_REPAIR" ),
		tStringPtr( "TURRET_SELL" ),
		tStringPtr( "BEGIN" ),
		tStringPtr( "CONTINUE" ),
		tStringPtr( "USE_MENU" ),
		tStringPtr( "OVERCHARGE" ),
		tStringPtr( "BARRAGE_RECEIVED" ),
		tStringPtr( "BARRAGE_ACTIVATED" ),
		tStringPtr( "MINIGAME_BEGIN" ),
		tStringPtr( "MINIGAME_END" ),
		tStringPtr( "MINIGAME_RESTART" ),
		tStringPtr( "MINIGAME_CONTINUE" ),
		tStringPtr( "PLACE_MENU" ),
		tStringPtr( "BARRAGE_ENDED" ),
		tStringPtr( "BARRAGE_USED" ),
		tStringPtr( "SKIP" ),
		tStringPtr( "MINIGAME_DEFEAT" ),
		tStringPtr( "MINIGAME_BONUS" ),
		tStringPtr( "SUSPEND" ),
		tStringPtr( "COMBO_LOST" ),
		tStringPtr( "SPECIAL_MOVE" ),
		tStringPtr( "UNIT_IN_ALARM_ZONE" ),
		tStringPtr( "ACHIEVEMENT" ),
		tStringPtr( "LUCKY_STAR_BARRAGE" ),
		tStringPtr( "HIT_APC_WITH_LOAD" ),
		tStringPtr( "APC_BEGIN_UNLOAD" ),
		tStringPtr( "TIME" ),
		tStringPtr( "BEGIN_CHARGING" ),
		tStringPtr( "UNIT_REACHED_GOAL" ),
		tStringPtr( "UNIT_IGNITED" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames29[]={
		tStringPtr( "PERSISTENT_EFFECT_BEHAVIOR_GAS" ),
		tStringPtr( "PERSISTENT_EFFECT_BEHAVIOR_FIRE" ),
		tStringPtr( "PERSISTENT_EFFECT_BEHAVIOR_STUN" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw29[]={
		tStringPtr( "GAS" ),
		tStringPtr( "FIRE" ),
		tStringPtr( "STUN" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames30[]={
		tStringPtr( "SPECIAL_ENTRANCE_HELI_RAMP" ),
		tStringPtr( "SPECIAL_ENTRANCE_ROPE_SLIDE" ),
		tStringPtr( "SPECIAL_ENTRANCE_USSR_APCMG01_LEFT" ),
		tStringPtr( "SPECIAL_ENTRANCE_USSR_APCMG01_RIGHT" ),
		tStringPtr( "SPECIAL_ENTRANCE_SUB_DEPLOY" ),
		tStringPtr( "SPECIAL_ENTRANCE_USA_APCMG01_LEFT" ),
		tStringPtr( "SPECIAL_ENTRANCE_USA_APCMG01_RIGHT" ),
		tStringPtr( "SPECIAL_ENTRANCE_USSR_APCIFV01_LEFT" ),
		tStringPtr( "SPECIAL_ENTRANCE_USSR_APCIFV01_RIGHT" ),
		tStringPtr( "SPECIAL_ENTRANCE_SUPERTANK_DEPLOY" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw30[]={
		tStringPtr( "HELI_RAMP" ),
		tStringPtr( "ROPE_SLIDE" ),
		tStringPtr( "USSR_APCMG01_LEFT" ),
		tStringPtr( "USSR_APCMG01_RIGHT" ),
		tStringPtr( "SUB_DEPLOY" ),
		tStringPtr( "USA_APCMG01_LEFT" ),
		tStringPtr( "USA_APCMG01_RIGHT" ),
		tStringPtr( "USSR_APCIFV01_LEFT" ),
		tStringPtr( "USSR_APCIFV01_RIGHT" ),
		tStringPtr( "SUPERTANK_DEPLOY" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames31[]={
		tStringPtr( "ACHIEVEMENTS_SHOCKING_RESULTS" ),
		tStringPtr( "ACHIEVEMENTS_SUNK" ),
		tStringPtr( "ACHIEVEMENTS_A_FEW_LOOSE_SCREWS" ),
		tStringPtr( "ACHIEVEMENTS_WITH_DISTINCTION" ),
		tStringPtr( "ACHIEVEMENTS_HIGHLY_DECORATED" ),
		tStringPtr( "ACHIEVEMENTS_LIKE_IT_NEVER_HAPPENED" ),
		tStringPtr( "ACHIEVEMENTS_A_JOB_WELL_DONE" ),
		tStringPtr( "ACHIEVEMENTS_EFFECTIVE_TACTICIAN" ),
		tStringPtr( "ACHIEVEMENTS_DEMOLITION_MAN" ),
		tStringPtr( "ACHIEVEMENTS_CONCENTRATED_FIRE" ),
		tStringPtr( "ACHIEVEMENTS_I_CAN_T_GET_A_TONE" ),
		tStringPtr( "ACHIEVEMENTS_BRUTE_FORCE" ),
		tStringPtr( "ACHIEVEMENTS_RESOLUTE" ),
		tStringPtr( "ACHIEVEMENTS_SYNERGY" ),
		tStringPtr( "ACHIEVEMENTS_IN_SYNC" ),
		tStringPtr( "ACHIEVEMENTS_CLUTCH_REPAIRS" ),
		tStringPtr( "ACHIEVEMENTS_AGGRESSIVE_INVESTMENT_STRATEGY" ),
		tStringPtr( "ACHIEVEMENTS_KING_OF_THE_HILL" ),
		tStringPtr( "ACHIEVEMENTS_PERSISTENCE" ),
		tStringPtr( "ACHIEVEMENTS_PERSEVERANCE" ),
		tStringPtr( "ACHIEVEMENTS_DLC1_DESTROY_SUPERTANK" ),
		tStringPtr( "ACHIEVEMENTS_DLC1_FIND_15_DOLLS" ),
		tStringPtr( "ACHIEVEMENTS_DLC1_BROVIET" ),
		tStringPtr( "ACHIEVEMENTS_DLC2_DESTROY_HOMER" ),
		tStringPtr( "ACHIEVEMENTS_DLC2_FIND_DOG_TAGS" ),
		tStringPtr( "ACHIEVEMENTS_DLC2_NAPALM_IN_VERSUS" ),
		tStringPtr( "ACHIEVEMENTS_TS1_FLYING_PIG" ),
		tStringPtr( "ACHIEVEMENTS_TS1_COFFIN_NAILS" ),
		tStringPtr( "ACHIEVEMENTS_TS1_THROW_A_SEVEN" ),
		tStringPtr( "ACHIEVEMENTS_TS1_BRASS_HAT" ),
		tStringPtr( "ACHIEVEMENTS_TS1_LAND_SHIP" ),
		tStringPtr( "ACHIEVEMENTS_TS1_MR_ROBOTO" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw31[]={
		tStringPtr( "SHOCKING_RESULTS" ),
		tStringPtr( "SUNK" ),
		tStringPtr( "A_FEW_LOOSE_SCREWS" ),
		tStringPtr( "WITH_DISTINCTION" ),
		tStringPtr( "HIGHLY_DECORATED" ),
		tStringPtr( "LIKE_IT_NEVER_HAPPENED" ),
		tStringPtr( "A_JOB_WELL_DONE" ),
		tStringPtr( "EFFECTIVE_TACTICIAN" ),
		tStringPtr( "DEMOLITION_MAN" ),
		tStringPtr( "CONCENTRATED_FIRE" ),
		tStringPtr( "I_CAN_T_GET_A_TONE" ),
		tStringPtr( "BRUTE_FORCE" ),
		tStringPtr( "RESOLUTE" ),
		tStringPtr( "SYNERGY" ),
		tStringPtr( "IN_SYNC" ),
		tStringPtr( "CLUTCH_REPAIRS" ),
		tStringPtr( "AGGRESSIVE_INVESTMENT_STRATEGY" ),
		tStringPtr( "KING_OF_THE_HILL" ),
		tStringPtr( "PERSISTENCE" ),
		tStringPtr( "PERSEVERANCE" ),
		tStringPtr( "DLC1_DESTROY_SUPERTANK" ),
		tStringPtr( "DLC1_FIND_15_DOLLS" ),
		tStringPtr( "DLC1_BROVIET" ),
		tStringPtr( "DLC2_DESTROY_HOMER" ),
		tStringPtr( "DLC2_FIND_DOG_TAGS" ),
		tStringPtr( "DLC2_NAPALM_IN_VERSUS" ),
		tStringPtr( "TS1_FLYING_PIG" ),
		tStringPtr( "TS1_COFFIN_NAILS" ),
		tStringPtr( "TS1_THROW_A_SEVEN" ),
		tStringPtr( "TS1_BRASS_HAT" ),
		tStringPtr( "TS1_LAND_SHIP" ),
		tStringPtr( "TS1_MR_ROBOTO" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames32[]={
		tStringPtr( "SESSION_STATS_SCORE" ),
		tStringPtr( "SESSION_STATS_ENEMIES_REACHED_GOAL" ),
		tStringPtr( "SESSION_STATS_INFANTRY_REACHED_GOAL" ),
		tStringPtr( "SESSION_STATS_TOTAL_MONEY" ),
		tStringPtr( "SESSION_STATS_MONEY_EARNED" ),
		tStringPtr( "SESSION_STATS_UNITS_PURCHASED" ),
		tStringPtr( "SESSION_STATS_UNITS_UPGRADED" ),
		tStringPtr( "SESSION_STATS_UNITS_REPAIRED" ),
		tStringPtr( "SESSION_STATS_KILLS" ),
		tStringPtr( "SESSION_STATS_HIGHEST_COMBO" ),
		tStringPtr( "SESSION_STATS_AMMO_EXPENDED" ),
		tStringPtr( "SESSION_STATS_BARRAGES_CALLED_IN" ),
		tStringPtr( "SESSION_STATS_KILLS_WITH_BARRAGES" ),
		tStringPtr( "SESSION_STATS_TOTAL_TIME" ),
		tStringPtr( "SESSION_STATS_TIME_IN_UNITS" ),
		tStringPtr( "SESSION_STATS_TIME_IN_VEHICLES" ),
		tStringPtr( "SESSION_STATS_TIME_IN_SHELLCAM" ),
		tStringPtr( "SESSION_STATS_TRIES_BEFORE_COMPLETION" ),
		tStringPtr( "SESSION_STATS_KILLS_IN_NIGHT_VISION" ),
		tStringPtr( "SESSION_STATS_HIGHEST_FLYING_SOLDIER" ),
		tStringPtr( "SESSION_STATS_SECONDS_SKIPPED" ),
		tStringPtr( "SESSION_STATS_OVER_KILL" ),
		tStringPtr( "SESSION_STATS_MONEY_SPENT" ),
		tStringPtr( "SESSION_STATS_DEFENSE_SUB_SCORE" ),
		tStringPtr( "SESSION_STATS_TIME_SUB_SCORE" ),
		tStringPtr( "SESSION_STATS_MONEY_SUB_SCORE" ),
		tStringPtr( "SESSION_STATS_MINIGAME_META_STAT" ),
		tStringPtr( "SESSION_STATS_ASSISTS" ),
		tStringPtr( "SESSION_STATS_OVERCHARGE" ),
		tStringPtr( "SESSION_STATS_WAVE_BONUS" ),
		tStringPtr( "SESSION_STATS_WAVE_CHAIN" ),
		tStringPtr( "SESSION_STATS_PAYBACK" ),
		tStringPtr( "SESSION_STATS_CLOSE_CALL" ),
		tStringPtr( "SESSION_STATS_BOMBING_RUN" ),
		tStringPtr( "SESSION_STATS_SPEED_BONUS" ),
		tStringPtr( "SESSION_STATS_KILLS_WHILE_USING_TURRETS" ),
		tStringPtr( "SESSION_STATS_BASIC_INFANTRY_KILLED" ),
		tStringPtr( "SESSION_STATS_ELITE_INFANTRY_KILLED" ),
		tStringPtr( "SESSION_STATS_ATVS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_CARS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_APCS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_IFVS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_MEDIUM_TANKS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_HEAVY_TANKS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_TRANSPORT_COPTERS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_GUNSHIPS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_ATTACK_COPTERS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_FIGHTER_PLANES_DESTROYED" ),
		tStringPtr( "SESSION_STATS_TRANSPORT_PLANES_DESTROYED" ),
		tStringPtr( "SESSION_STATS_BOMBERS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_TANKS_REACHED_TOY_BOX" ),
		tStringPtr( "SESSION_STATS_APCS_REACHED_TOY_BOX" ),
		tStringPtr( "SESSION_STATS_PLANES_REACHED_TOY_BOX" ),
		tStringPtr( "SESSION_STATS_HELICOPTERS_REACHED_TOY_BOX" ),
		tStringPtr( "SESSION_STATS_CARS_REACHED_TOY_BOX" ),
		tStringPtr( "SESSION_STATS_ATVS_REACHED_TOY_BOX" ),
		tStringPtr( "SESSION_STATS_TURRETS_LOST" ),
		tStringPtr( "SESSION_STATS_VEHICLES_PURCHASED" ),
		tStringPtr( "SESSION_STATS_VEHICLES_LOST" ),
		tStringPtr( "SESSION_STATS_VEHICLES_DRIVEN_INTO_GOAL" ),
		tStringPtr( "SESSION_STATS_VERSUS_WAVES_LAUNCHED" ),
		tStringPtr( "SESSION_STATS_TIME_USING_TURRETS" ),
		tStringPtr( "SESSION_STATS_TIME_USING_AC130" ),
		tStringPtr( "SESSION_STATS_TIME_USING_COMMANDO" ),
		tStringPtr( "SESSION_STATS_TIME_USING_IVAN" ),
		tStringPtr( "SESSION_STATS_TIME_USING_MEDIUM_TANK" ),
		tStringPtr( "SESSION_STATS_TIME_USING_HEAVY_TANK" ),
		tStringPtr( "SESSION_STATS_TIME_USING_ATTACK_HELICOPTER" ),
		tStringPtr( "SESSION_STATS_TIME_USING_HELICOPTER_GUNSHIP" ),
		tStringPtr( "SESSION_STATS_TIME_USING_FIGHTER_PLANE" ),
		tStringPtr( "SESSION_STATS_MOST_KILLS_WITH_A_NUKE" ),
		tStringPtr( "SESSION_STATS_TIME_SPENT_IN_TURBOCHARGE" ),
		tStringPtr( "SESSION_STATS_TURBOCHARGE_KILLS" ),
		tStringPtr( "SESSION_STATS_TURBOCHARGES_WITH_MACHINEGUNS" ),
		tStringPtr( "SESSION_STATS_TURBOCHARGES_WITH_HOWITZERS" ),
		tStringPtr( "SESSION_STATS_TURBOCHARGES_WITH_MORTARS" ),
		tStringPtr( "SESSION_STATS_TURBOCHARGES_WITH_ANTI_TANK" ),
		tStringPtr( "SESSION_STATS_TURBOCHARGES_WITH_MAKESHIFT" ),
		tStringPtr( "SESSION_STATS_TURBOCHARGES_WITH_ANTI_AIR" ),
		tStringPtr( "SESSION_STATS_MOST_HOTSWAPS_IN_A_SINGLE_TURBOCHARGE" ),
		tStringPtr( "SESSION_STATS_TICKETS_LOST_IN_HEAD_2_HEAD" ),
		tStringPtr( "SESSION_STATS_TICKETS_DEALT_IN_HEAD_2_HEAD" ),
		tStringPtr( "SESSION_STATS_VERSUS_WINS" ),
		tStringPtr( "SESSION_STATS_VERSUS_LOSSES" ),
		tStringPtr( "SESSION_STATS_VERSUS_WIN_LOSS_RATIO" ),
		tStringPtr( "SESSION_STATS_VERSUS_SHUT_OUTS" ),
		tStringPtr( "SESSION_STATS_VERSUS_TURRETS_DESTROYED" ),
		tStringPtr( "SESSION_STATS_VERSUS_PLATFORMS_CAPTURED" ),
		tStringPtr( "SESSION_STATS_DECORATIONS_ACQUIRED" ),
		tStringPtr( "SESSION_STATS_TOTAL_BRONZE_MEDALS" ),
		tStringPtr( "SESSION_STATS_TOTAL_SILVER_MEDALS" ),
		tStringPtr( "SESSION_STATS_TOTAL_GOLD_MEDALS" ),
		tStringPtr( "SESSION_STATS_TOTAL_PLATINUM_MEDALS" ),
		tStringPtr( "SESSION_STATS_TOTAL_CHALLENGES_EARNED" ),
		tStringPtr( "SESSION_STATS_5X_COMBOS" ),
		tStringPtr( "SESSION_STATS_10X_COMBOS" ),
		tStringPtr( "SESSION_STATS_20X_COMBOS" ),
		tStringPtr( "SESSION_STATS_40X_COMBOS" ),
		tStringPtr( "SESSION_STATS_80X_COMBOS" ),
		tStringPtr( "SESSION_STATS_100X_COMBOS" ),
		tStringPtr( "SESSION_STATS_150X_COMBOS" ),
		tStringPtr( "SESSION_STATS_200X_COMBOS" ),
		tStringPtr( "SESSION_STATS_250X_COMBOS" ),
		tStringPtr( "SESSION_STATS_300X_COMBOS" ),
		tStringPtr( "SESSION_STATS_BULLETS_FIRED" ),
		tStringPtr( "SESSION_STATS_MORTARS_SHELLS_FIRED" ),
		tStringPtr( "SESSION_STATS_HOWITZER_SHELLS_FIRED" ),
		tStringPtr( "SESSION_STATS_MISSILES_FIRED" ),
		tStringPtr( "SESSION_STATS_BARRAGES_EARNED_FROM_RED_STARS" ),
		tStringPtr( "SESSION_STATS_BARRAGES_EARNED_FROM_TURBOCHARGE" ),
		tStringPtr( "SESSION_STATS_BARRAGES_PURCHASED_IN_VERSUS" ),
		tStringPtr( "SESSION_STATS_INFANTRY_GASSED" ),
		tStringPtr( "SESSION_STATS_INFANTRY_SET_ON_FIRE" ),
		tStringPtr( "SESSION_STATS_HIGHEST_WITH_A_SINGLE_BARRAGE" ),
		tStringPtr( "SESSION_STATS_MOST_BARRAGES_IN_A_SINGLE_MAP" ),
		tStringPtr( "SESSION_STATS_HIGHEST_SURVIVAL_ROUND" ),
		tStringPtr( "SESSION_STATS_HIGHEST_LOCKDOWN_ROUND" ),
		tStringPtr( "SESSION_STATS_HIGHEST_HARDCORE_ROUND" ),
		tStringPtr( "SESSION_STATS_GOLDEN_FLIES_EXPLODED" ),
		tStringPtr( "SESSION_STATS_RESCUED" ),
		tStringPtr( "SESSION_STATS_GOLDEN_FLIES_BONUS" ),
		tStringPtr( "SESSION_STATS_STARS_SHATTERED" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw32[]={
		tStringPtr( "SCORE" ),
		tStringPtr( "ENEMIES_REACHED_GOAL" ),
		tStringPtr( "INFANTRY_REACHED_GOAL" ),
		tStringPtr( "TOTAL_MONEY" ),
		tStringPtr( "MONEY_EARNED" ),
		tStringPtr( "UNITS_PURCHASED" ),
		tStringPtr( "UNITS_UPGRADED" ),
		tStringPtr( "UNITS_REPAIRED" ),
		tStringPtr( "KILLS" ),
		tStringPtr( "HIGHEST_COMBO" ),
		tStringPtr( "AMMO_EXPENDED" ),
		tStringPtr( "BARRAGES_CALLED_IN" ),
		tStringPtr( "KILLS_WITH_BARRAGES" ),
		tStringPtr( "TOTAL_TIME" ),
		tStringPtr( "TIME_IN_UNITS" ),
		tStringPtr( "TIME_IN_VEHICLES" ),
		tStringPtr( "TIME_IN_SHELLCAM" ),
		tStringPtr( "TRIES_BEFORE_COMPLETION" ),
		tStringPtr( "KILLS_IN_NIGHT_VISION" ),
		tStringPtr( "HIGHEST_FLYING_SOLDIER" ),
		tStringPtr( "SECONDS_SKIPPED" ),
		tStringPtr( "OVER_KILL" ),
		tStringPtr( "MONEY_SPENT" ),
		tStringPtr( "DEFENSE_SUB_SCORE" ),
		tStringPtr( "TIME_SUB_SCORE" ),
		tStringPtr( "MONEY_SUB_SCORE" ),
		tStringPtr( "MINIGAME_META_STAT" ),
		tStringPtr( "ASSISTS" ),
		tStringPtr( "OVERCHARGE" ),
		tStringPtr( "WAVE_BONUS" ),
		tStringPtr( "WAVE_CHAIN" ),
		tStringPtr( "PAYBACK" ),
		tStringPtr( "CLOSE_CALL" ),
		tStringPtr( "BOMBING_RUN" ),
		tStringPtr( "SPEED_BONUS" ),
		tStringPtr( "KILLS_WHILE_USING_TURRETS" ),
		tStringPtr( "BASIC_INFANTRY_KILLED" ),
		tStringPtr( "ELITE_INFANTRY_KILLED" ),
		tStringPtr( "ATVS_DESTROYED" ),
		tStringPtr( "CARS_DESTROYED" ),
		tStringPtr( "APCS_DESTROYED" ),
		tStringPtr( "IFVS_DESTROYED" ),
		tStringPtr( "MEDIUM_TANKS_DESTROYED" ),
		tStringPtr( "HEAVY_TANKS_DESTROYED" ),
		tStringPtr( "TRANSPORT_COPTERS_DESTROYED" ),
		tStringPtr( "GUNSHIPS_DESTROYED" ),
		tStringPtr( "ATTACK_COPTERS_DESTROYED" ),
		tStringPtr( "FIGHTER_PLANES_DESTROYED" ),
		tStringPtr( "TRANSPORT_PLANES_DESTROYED" ),
		tStringPtr( "BOMBERS_DESTROYED" ),
		tStringPtr( "TANKS_REACHED_TOY_BOX" ),
		tStringPtr( "APCS_REACHED_TOY_BOX" ),
		tStringPtr( "PLANES_REACHED_TOY_BOX" ),
		tStringPtr( "HELICOPTERS_REACHED_TOY_BOX" ),
		tStringPtr( "CARS_REACHED_TOY_BOX" ),
		tStringPtr( "ATVS_REACHED_TOY_BOX" ),
		tStringPtr( "TURRETS_LOST" ),
		tStringPtr( "VEHICLES_PURCHASED" ),
		tStringPtr( "VEHICLES_LOST" ),
		tStringPtr( "VEHICLES_DRIVEN_INTO_GOAL" ),
		tStringPtr( "VERSUS_WAVES_LAUNCHED" ),
		tStringPtr( "TIME_USING_TURRETS" ),
		tStringPtr( "TIME_USING_AC130" ),
		tStringPtr( "TIME_USING_COMMANDO" ),
		tStringPtr( "TIME_USING_IVAN" ),
		tStringPtr( "TIME_USING_MEDIUM_TANK" ),
		tStringPtr( "TIME_USING_HEAVY_TANK" ),
		tStringPtr( "TIME_USING_ATTACK_HELICOPTER" ),
		tStringPtr( "TIME_USING_HELICOPTER_GUNSHIP" ),
		tStringPtr( "TIME_USING_FIGHTER_PLANE" ),
		tStringPtr( "MOST_KILLS_WITH_A_NUKE" ),
		tStringPtr( "TIME_SPENT_IN_TURBOCHARGE" ),
		tStringPtr( "TURBOCHARGE_KILLS" ),
		tStringPtr( "TURBOCHARGES_WITH_MACHINEGUNS" ),
		tStringPtr( "TURBOCHARGES_WITH_HOWITZERS" ),
		tStringPtr( "TURBOCHARGES_WITH_MORTARS" ),
		tStringPtr( "TURBOCHARGES_WITH_ANTI_TANK" ),
		tStringPtr( "TURBOCHARGES_WITH_MAKESHIFT" ),
		tStringPtr( "TURBOCHARGES_WITH_ANTI_AIR" ),
		tStringPtr( "MOST_HOTSWAPS_IN_A_SINGLE_TURBOCHARGE" ),
		tStringPtr( "TICKETS_LOST_IN_HEAD_2_HEAD" ),
		tStringPtr( "TICKETS_DEALT_IN_HEAD_2_HEAD" ),
		tStringPtr( "VERSUS_WINS" ),
		tStringPtr( "VERSUS_LOSSES" ),
		tStringPtr( "VERSUS_WIN_LOSS_RATIO" ),
		tStringPtr( "VERSUS_SHUT_OUTS" ),
		tStringPtr( "VERSUS_TURRETS_DESTROYED" ),
		tStringPtr( "VERSUS_PLATFORMS_CAPTURED" ),
		tStringPtr( "DECORATIONS_ACQUIRED" ),
		tStringPtr( "TOTAL_BRONZE_MEDALS" ),
		tStringPtr( "TOTAL_SILVER_MEDALS" ),
		tStringPtr( "TOTAL_GOLD_MEDALS" ),
		tStringPtr( "TOTAL_PLATINUM_MEDALS" ),
		tStringPtr( "TOTAL_CHALLENGES_EARNED" ),
		tStringPtr( "5X_COMBOS" ),
		tStringPtr( "10X_COMBOS" ),
		tStringPtr( "20X_COMBOS" ),
		tStringPtr( "40X_COMBOS" ),
		tStringPtr( "80X_COMBOS" ),
		tStringPtr( "100X_COMBOS" ),
		tStringPtr( "150X_COMBOS" ),
		tStringPtr( "200X_COMBOS" ),
		tStringPtr( "250X_COMBOS" ),
		tStringPtr( "300X_COMBOS" ),
		tStringPtr( "BULLETS_FIRED" ),
		tStringPtr( "MORTARS_SHELLS_FIRED" ),
		tStringPtr( "HOWITZER_SHELLS_FIRED" ),
		tStringPtr( "MISSILES_FIRED" ),
		tStringPtr( "BARRAGES_EARNED_FROM_RED_STARS" ),
		tStringPtr( "BARRAGES_EARNED_FROM_TURBOCHARGE" ),
		tStringPtr( "BARRAGES_PURCHASED_IN_VERSUS" ),
		tStringPtr( "INFANTRY_GASSED" ),
		tStringPtr( "INFANTRY_SET_ON_FIRE" ),
		tStringPtr( "HIGHEST_WITH_A_SINGLE_BARRAGE" ),
		tStringPtr( "MOST_BARRAGES_IN_A_SINGLE_MAP" ),
		tStringPtr( "HIGHEST_SURVIVAL_ROUND" ),
		tStringPtr( "HIGHEST_LOCKDOWN_ROUND" ),
		tStringPtr( "HIGHEST_HARDCORE_ROUND" ),
		tStringPtr( "GOLDEN_FLIES_EXPLODED" ),
		tStringPtr( "RESCUED" ),
		tStringPtr( "GOLDEN_FLIES_BONUS" ),
		tStringPtr( "STARS_SHATTERED" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames33[]={
		tStringPtr( "COMBO_1" ),
		tStringPtr( "COMBO_2" ),
		tStringPtr( "COMBO_3" ),
		tStringPtr( "COMBO_4" ),
		tStringPtr( "COMBO_5" ),
		tStringPtr( "COMBO_10" ),
		tStringPtr( "COMBO_20" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw33[]={
		tStringPtr( "1" ),
		tStringPtr( "2" ),
		tStringPtr( "3" ),
		tStringPtr( "4" ),
		tStringPtr( "5" ),
		tStringPtr( "10" ),
		tStringPtr( "20" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames34[]={
		tStringPtr( "CHALLENGE_MODE_SURVIVAL" ),
		tStringPtr( "CHALLENGE_MODE_LOCKDOWN" ),
		tStringPtr( "CHALLENGE_MODE_HARDCORE" ),
		tStringPtr( "CHALLENGE_MODE_TRAUMA" ),
		tStringPtr( "CHALLENGE_MODE_COMMANDO" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw34[]={
		tStringPtr( "SURVIVAL" ),
		tStringPtr( "LOCKDOWN" ),
		tStringPtr( "HARDCORE" ),
		tStringPtr( "TRAUMA" ),
		tStringPtr( "COMMANDO" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames35[]={
		tStringPtr( "DLC_COLD_WAR" ),
		tStringPtr( "DLC_EVIL_EMPIRE" ),
		tStringPtr( "DLC_NAPALM" ),
		tStringPtr( "DLC_UNUSED" ),
		tStringPtr( "DLC_BRITISH" ),
		tStringPtr( "DLC_GERMAN" ),
		tStringPtr( "DLC_KAISER" ),
		tStringPtr( "DLC_INVASION" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw35[]={
		tStringPtr( "COLD_WAR" ),
		tStringPtr( "EVIL_EMPIRE" ),
		tStringPtr( "NAPALM" ),
		tStringPtr( "UNUSED" ),
		tStringPtr( "BRITISH" ),
		tStringPtr( "GERMAN" ),
		tStringPtr( "KAISER" ),
		tStringPtr( "INVASION" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames36[]={
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_ONE_TENTH" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_HALF" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_ONE" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_TWO" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_THREE" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_FIVE" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_TEN" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_TWENTY" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_THIRTY" ),
		tStringPtr( "DAMAGE_TRANSFER_MULTIPLIER_FIFTY" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw36[]={
		tStringPtr( "ONE_TENTH" ),
		tStringPtr( "HALF" ),
		tStringPtr( "ONE" ),
		tStringPtr( "TWO" ),
		tStringPtr( "THREE" ),
		tStringPtr( "FIVE" ),
		tStringPtr( "TEN" ),
		tStringPtr( "TWENTY" ),
		tStringPtr( "THIRTY" ),
		tStringPtr( "FIFTY" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames37[]={
		tStringPtr( "TARGET_INDEX_NONE" ),
		tStringPtr( "TARGET_INDEX_RANDOM" ),
		tStringPtr( "TARGET_INDEX_1" ),
		tStringPtr( "TARGET_INDEX_2" ),
		tStringPtr( "TARGET_INDEX_3" ),
		tStringPtr( "TARGET_INDEX_4" ),
		tStringPtr( "TARGET_INDEX_5" ),
		tStringPtr( "TARGET_INDEX_6" ),
		tStringPtr( "TARGET_INDEX_7" ),
		tStringPtr( "TARGET_INDEX_8" ),
		tStringPtr( "TARGET_INDEX_9" ),
		tStringPtr( "TARGET_INDEX_10" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw37[]={
		tStringPtr( "NONE" ),
		tStringPtr( "RANDOM" ),
		tStringPtr( "1" ),
		tStringPtr( "2" ),
		tStringPtr( "3" ),
		tStringPtr( "4" ),
		tStringPtr( "5" ),
		tStringPtr( "6" ),
		tStringPtr( "7" ),
		tStringPtr( "8" ),
		tStringPtr( "9" ),
		tStringPtr( "10" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames38[]={
		tStringPtr( "LOGIC_TYPE_TURRET" ),
		tStringPtr( "LOGIC_TYPE_CHARACTER" ),
		tStringPtr( "LOGIC_TYPE_VEHICLE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw38[]={
		tStringPtr( "TURRET" ),
		tStringPtr( "CHARACTER" ),
		tStringPtr( "VEHICLE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames39[]={
		tStringPtr( "PICKUPS_BATTERY_1" ),
		tStringPtr( "PICKUPS_BATTERY_2" ),
		tStringPtr( "PICKUPS_OVERCHARGE" ),
		tStringPtr( "PICKUPS_BARRAGE_ROLL" ),
		tStringPtr( "PICKUPS_TINY_BATTERY_AMOUNT" ),
		tStringPtr( "PICKUPS_PLANETARGETS" ),
		tStringPtr( "PICKUPS_MORE_TIME" ),
		tStringPtr( "PICKUPS_LESS_TIME" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw39[]={
		tStringPtr( "BATTERY_1" ),
		tStringPtr( "BATTERY_2" ),
		tStringPtr( "OVERCHARGE" ),
		tStringPtr( "BARRAGE_ROLL" ),
		tStringPtr( "TINY_BATTERY_AMOUNT" ),
		tStringPtr( "PLANETARGETS" ),
		tStringPtr( "MORE_TIME" ),
		tStringPtr( "LESS_TIME" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames40[]={
		tStringPtr( "CONTROLS_CAMERA" ),
		tStringPtr( "CONTROLS_TURRETS" ),
		tStringPtr( "CONTROLS_SHELLCAM" ),
		tStringPtr( "CONTROLS_PLANES" ),
		tStringPtr( "CONTROLS_VEHICLES" ),
		tStringPtr( "CONTROLS_CHARACTER" ),
		tStringPtr( "CONTROLS_VIBRATION" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw40[]={
		tStringPtr( "CAMERA" ),
		tStringPtr( "TURRETS" ),
		tStringPtr( "SHELLCAM" ),
		tStringPtr( "PLANES" ),
		tStringPtr( "VEHICLES" ),
		tStringPtr( "CHARACTER" ),
		tStringPtr( "VIBRATION" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames41[]={
		tStringPtr( "CONTROLS_SETTING_NORMAL" ),
		tStringPtr( "CONTROLS_SETTING_SOUTHPAW" ),
		tStringPtr( "CONTROLS_SETTING_INVERTED" ),
		tStringPtr( "CONTROLS_SETTING_NORMALSOUTHPAW" ),
		tStringPtr( "CONTROLS_SETTING_INVERTEDSOUTHPAW" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw41[]={
		tStringPtr( "NORMAL" ),
		tStringPtr( "SOUTHPAW" ),
		tStringPtr( "INVERTED" ),
		tStringPtr( "NORMALSOUTHPAW" ),
		tStringPtr( "INVERTEDSOUTHPAW" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames42[]={
		tStringPtr( "PERSONALITY_TYPE_CRAZY" ),
		tStringPtr( "PERSONALITY_TYPE_HERO" ),
		tStringPtr( "PERSONALITY_TYPE_ROOKIE" ),
		tStringPtr( "PERSONALITY_TYPE_SERGEANT" ),
		tStringPtr( "PERSONALITY_TYPE_COMMANDO" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw42[]={
		tStringPtr( "CRAZY" ),
		tStringPtr( "HERO" ),
		tStringPtr( "ROOKIE" ),
		tStringPtr( "SERGEANT" ),
		tStringPtr( "COMMANDO" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames43[]={
		tStringPtr( "CREWMAN_A" ),
		tStringPtr( "CREWMAN_B" ),
		tStringPtr( "CREWMAN_C" ),
		tStringPtr( "CREWMAN_D" ),
		tStringPtr( "CREWMAN_E" ),
		tStringPtr( "CREWMAN_F" ),
		tStringPtr( "CREWMAN_G" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw43[]={
		tStringPtr( "A" ),
		tStringPtr( "B" ),
		tStringPtr( "C" ),
		tStringPtr( "D" ),
		tStringPtr( "E" ),
		tStringPtr( "F" ),
		tStringPtr( "G" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames44[]={
		tStringPtr( "FIREEFFECTOVERRIDE_NONE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_SOLDIER_ON_FIRE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_BASIC_FIRE_LIGHT_SMOKE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_BASIC_FIRE_HEAVY_SMOKE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_HEAVY_FIRE_WITH_SMOKE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_SMALL_CRATE_FIRE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_LARGE_CRATE_FIRE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_SMALL_CRATESTACK_FIRE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_BIG_CRATESTACK_FIRE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_SMALL_TREE_FIRE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_LARGE_TREE_FIRE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_FENCE_ON_FIRE" ),
		tStringPtr( "FIREEFFECTOVERRIDE_BARREL_ON_FIRE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw44[]={
		tStringPtr( "NONE" ),
		tStringPtr( "SOLDIER_ON_FIRE" ),
		tStringPtr( "BASIC_FIRE_LIGHT_SMOKE" ),
		tStringPtr( "BASIC_FIRE_HEAVY_SMOKE" ),
		tStringPtr( "HEAVY_FIRE_WITH_SMOKE" ),
		tStringPtr( "SMALL_CRATE_FIRE" ),
		tStringPtr( "LARGE_CRATE_FIRE" ),
		tStringPtr( "SMALL_CRATESTACK_FIRE" ),
		tStringPtr( "BIG_CRATESTACK_FIRE" ),
		tStringPtr( "SMALL_TREE_FIRE" ),
		tStringPtr( "LARGE_TREE_FIRE" ),
		tStringPtr( "FENCE_ON_FIRE" ),
		tStringPtr( "BARREL_ON_FIRE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames45[]={
		tStringPtr( "VEHICLE_MOTION_FX_PLUS_Z" ),
		tStringPtr( "VEHICLE_MOTION_FX_MINUS_Z" ),
		tStringPtr( "VEHICLE_MOTION_FX_PLUS_Y" ),
		tStringPtr( "VEHICLE_MOTION_FX_MINUS_Y" ),
		tStringPtr( "VEHICLE_MOTION_FX_RUNNING" ),
		tStringPtr( "VEHICLE_MOTION_FX_STARTUP" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw45[]={
		tStringPtr( "PLUS_Z" ),
		tStringPtr( "MINUS_Z" ),
		tStringPtr( "PLUS_Y" ),
		tStringPtr( "MINUS_Y" ),
		tStringPtr( "RUNNING" ),
		tStringPtr( "STARTUP" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames46[]={
		tStringPtr( "KILL_FLAG_OVERKILL" ),
		tStringPtr( "KILL_FLAG_ASSIST" ),
		tStringPtr( "KILL_FLAG_BARRAGE" ),
		tStringPtr( "KILL_FLAG_SPEEDBONUS" ),
		tStringPtr( "KILL_FLAG_NIGHT_VISION" ),
		tStringPtr( "KILL_FLAG_PRONE" ),
		tStringPtr( "KILL_FLAG_PLAYER_INFLUENCED" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw46[]={
		tStringPtr( "OVERKILL" ),
		tStringPtr( "ASSIST" ),
		tStringPtr( "BARRAGE" ),
		tStringPtr( "SPEEDBONUS" ),
		tStringPtr( "NIGHT_VISION" ),
		tStringPtr( "PRONE" ),
		tStringPtr( "PLAYER_INFLUENCED" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames47[]={
		tStringPtr( "LEADERBOARD_COLUMN_TYPE_NUMBER" ),
		tStringPtr( "LEADERBOARD_COLUMN_TYPE_TIME" ),
		tStringPtr( "LEADERBOARD_COLUMN_TYPE_MEDAL" ),
		tStringPtr( "LEADERBOARD_COLUMN_TYPE_CHALLENGEPROGRESS" ),
		tStringPtr( "LEADERBOARD_COLUMN_TYPE_MONEY" ),
		tStringPtr( "LEADERBOARD_COLUMN_TYPE_MINIGAME_META" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw47[]={
		tStringPtr( "NUMBER" ),
		tStringPtr( "TIME" ),
		tStringPtr( "MEDAL" ),
		tStringPtr( "CHALLENGEPROGRESS" ),
		tStringPtr( "MONEY" ),
		tStringPtr( "MINIGAME_META" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames48[]={
		tStringPtr( "PLATFORM_TYPE_TUTORIAL" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw48[]={
		tStringPtr( "TUTORIAL" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames49[]={
		tStringPtr( "DEBRIS_BEHAVIOR_SPAWN_ALL_TRANSITION" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw49[]={
		tStringPtr( "SPAWN_ALL_TRANSITION" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames50[]={
		tStringPtr( "AVATAR_AWARDS_FLIGHT_JACKET" ),
		tStringPtr( "AVATAR_AWARDS_COMMANDO_MULLET" ),
		tStringPtr( "AVATAR_AWARDS_T_SHIRT" ),
		tStringPtr( "AVATAR_AWARDS_DIVIDER" ),
		tStringPtr( "AVATAR_AWARDS_GAMER_PIC_BUY" ),
		tStringPtr( "AVATAR_AWARDS_GAMER_PIC_BEAT" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw50[]={
		tStringPtr( "FLIGHT_JACKET" ),
		tStringPtr( "COMMANDO_MULLET" ),
		tStringPtr( "T_SHIRT" ),
		tStringPtr( "DIVIDER" ),
		tStringPtr( "GAMER_PIC_BUY" ),
		tStringPtr( "GAMER_PIC_BEAT" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames51[]={
		tStringPtr( "LANGUAGE_ENGLISH" ),
		tStringPtr( "LANGUAGE_GERMAN" ),
		tStringPtr( "LANGUAGE_SPANISH" ),
		tStringPtr( "LANGUAGE_FRENCH" ),
		tStringPtr( "LANGUAGE_ITALIAN" ),
		tStringPtr( "LANGUAGE_JAPANESE" ),
		tStringPtr( "LANGUAGE_KOREAN" ),
		tStringPtr( "LANGUAGE_CHINESE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw51[]={
		tStringPtr( "ENGLISH" ),
		tStringPtr( "GERMAN" ),
		tStringPtr( "SPANISH" ),
		tStringPtr( "FRENCH" ),
		tStringPtr( "ITALIAN" ),
		tStringPtr( "JAPANESE" ),
		tStringPtr( "KOREAN" ),
		tStringPtr( "CHINESE" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames52[]={
		tStringPtr( "REGION_NORTH_AMERICA" ),
		tStringPtr( "REGION_ASIA" ),
		tStringPtr( "REGION_EUROPE" ),
		tStringPtr( "REGION_GERMANY" ),
		tStringPtr( "REGION_AUSTRALIA" ),
		tStringPtr( "REGION_KOREA" ),
		tStringPtr( "REGION_REST_OF_WORLD" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw52[]={
		tStringPtr( "NORTH_AMERICA" ),
		tStringPtr( "ASIA" ),
		tStringPtr( "EUROPE" ),
		tStringPtr( "GERMANY" ),
		tStringPtr( "AUSTRALIA" ),
		tStringPtr( "KOREA" ),
		tStringPtr( "REST_OF_WORLD" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames53[]={
		tStringPtr( "LOCALE_NO_LOCALE" ),
		tStringPtr( "LOCALE_AUSTRALIA" ),
		tStringPtr( "LOCALE_AUSTRIA" ),
		tStringPtr( "LOCALE_BELGIUM" ),
		tStringPtr( "LOCALE_BRAZIL" ),
		tStringPtr( "LOCALE_CANADA" ),
		tStringPtr( "LOCALE_CHILE" ),
		tStringPtr( "LOCALE_CHINA" ),
		tStringPtr( "LOCALE_COLOMBIA" ),
		tStringPtr( "LOCALE_CZECH_REPUBLIC" ),
		tStringPtr( "LOCALE_DENMARK" ),
		tStringPtr( "LOCALE_FINLAND" ),
		tStringPtr( "LOCALE_FRANCE" ),
		tStringPtr( "LOCALE_GERMANY" ),
		tStringPtr( "LOCALE_GREECE" ),
		tStringPtr( "LOCALE_HONG_KONG" ),
		tStringPtr( "LOCALE_HUNGARY" ),
		tStringPtr( "LOCALE_INDIA" ),
		tStringPtr( "LOCALE_IRELAND" ),
		tStringPtr( "LOCALE_ITALY" ),
		tStringPtr( "LOCALE_JAPAN" ),
		tStringPtr( "LOCALE_KOREA" ),
		tStringPtr( "LOCALE_MEXICO" ),
		tStringPtr( "LOCALE_NETHERLANDS" ),
		tStringPtr( "LOCALE_NEW_ZEALAND" ),
		tStringPtr( "LOCALE_NORWAY" ),
		tStringPtr( "LOCALE_POLAND" ),
		tStringPtr( "LOCALE_PORTUGAL" ),
		tStringPtr( "LOCALE_SINGAPORE" ),
		tStringPtr( "LOCALE_SLOVAK_REPUBLIC" ),
		tStringPtr( "LOCALE_SOUTH_AFRICA" ),
		tStringPtr( "LOCALE_SPAIN" ),
		tStringPtr( "LOCALE_SWEDEN" ),
		tStringPtr( "LOCALE_SWITZERLAND" ),
		tStringPtr( "LOCALE_TAIWAN" ),
		tStringPtr( "LOCALE_GREAT_BRITAIN" ),
		tStringPtr( "LOCALE_UNITED_STATES" ),
		tStringPtr( "LOCALE_RUSSIAN_FEDERATION" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw53[]={
		tStringPtr( "NO_LOCALE" ),
		tStringPtr( "AUSTRALIA" ),
		tStringPtr( "AUSTRIA" ),
		tStringPtr( "BELGIUM" ),
		tStringPtr( "BRAZIL" ),
		tStringPtr( "CANADA" ),
		tStringPtr( "CHILE" ),
		tStringPtr( "CHINA" ),
		tStringPtr( "COLOMBIA" ),
		tStringPtr( "CZECH_REPUBLIC" ),
		tStringPtr( "DENMARK" ),
		tStringPtr( "FINLAND" ),
		tStringPtr( "FRANCE" ),
		tStringPtr( "GERMANY" ),
		tStringPtr( "GREECE" ),
		tStringPtr( "HONG_KONG" ),
		tStringPtr( "HUNGARY" ),
		tStringPtr( "INDIA" ),
		tStringPtr( "IRELAND" ),
		tStringPtr( "ITALY" ),
		tStringPtr( "JAPAN" ),
		tStringPtr( "KOREA" ),
		tStringPtr( "MEXICO" ),
		tStringPtr( "NETHERLANDS" ),
		tStringPtr( "NEW_ZEALAND" ),
		tStringPtr( "NORWAY" ),
		tStringPtr( "POLAND" ),
		tStringPtr( "PORTUGAL" ),
		tStringPtr( "SINGAPORE" ),
		tStringPtr( "SLOVAK_REPUBLIC" ),
		tStringPtr( "SOUTH_AFRICA" ),
		tStringPtr( "SPAIN" ),
		tStringPtr( "SWEDEN" ),
		tStringPtr( "SWITZERLAND" ),
		tStringPtr( "TAIWAN" ),
		tStringPtr( "GREAT_BRITAIN" ),
		tStringPtr( "UNITED_STATES" ),
		tStringPtr( "RUSSIAN_FEDERATION" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames54[]={
		tStringPtr( "MOBILE_MINIGAME_FLY" ),
		tStringPtr( "MOBILE_MINIGAME_HALLWAY" ),
		tStringPtr( "MOBILE_MINIGAME_TRIAL_GAME_2" ),
		tStringPtr( "MOBILE_MINIGAME_BOOT_CAMP" ),
		tStringPtr( "MOBILE_MINIGAME_TOTALS" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw54[]={
		tStringPtr( "FLY" ),
		tStringPtr( "HALLWAY" ),
		tStringPtr( "TRIAL_GAME_2" ),
		tStringPtr( "BOOT_CAMP" ),
		tStringPtr( "TOTALS" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames55[]={
		tStringPtr( "GAME_CONTROLS_MENU_ACCEPT" ),
		tStringPtr( "GAME_CONTROLS_MENU_CANCEL" ),
		tStringPtr( "GAME_CONTROLS_MENU_GAMERCARD" ),
		tStringPtr( "GAME_CONTROLS_MENU_PAUSE" ),
		tStringPtr( "GAME_CONTROLS_MENU_REWIND" ),
		tStringPtr( "GAME_CONTROLS_MENU_UP" ),
		tStringPtr( "GAME_CONTROLS_MENU_DOWN" ),
		tStringPtr( "GAME_CONTROLS_MENU_LEFT" ),
		tStringPtr( "GAME_CONTROLS_MENU_RIGHT" ),
		tStringPtr( "GAME_CONTROLS_MENU_CYCLE_LEADERBOARD_FILTER" ),
		tStringPtr( "GAME_CONTROLS_MENU_SHOW_INVITE_UI" ),
		tStringPtr( "GAME_CONTROLS_MENU_SHOW_LEADERBOARDS" ),
		tStringPtr( "GAME_CONTROLS_MENU_PREVIOUS_PAGE" ),
		tStringPtr( "GAME_CONTROLS_MENU_NEXT_PAGE" ),
		tStringPtr( "GAME_CONTROLS_MENU_SHOW_MULTIPLAYER_CONTROLS" ),
		tStringPtr( "GAME_CONTROLS_SELECT" ),
		tStringPtr( "GAME_CONTROLS_CANCEL" ),
		tStringPtr( "GAME_CONTROLS_PLACEMENT_MENU" ),
		tStringPtr( "GAME_CONTROLS_LAUNCH_WAVE" ),
		tStringPtr( "GAME_CONTROLS_LAUNCH_BARRAGE" ),
		tStringPtr( "GAME_CONTROLS_CAMERA_CYCLE" ),
		tStringPtr( "GAME_CONTROLS_CAMERA_CENTER" ),
		tStringPtr( "GAME_CONTROLS_CAMERA_SPEED" ),
		tStringPtr( "GAME_CONTROLS_CAMERA_FOCUS_EVENT" ),
		tStringPtr( "GAME_CONTROLS_JUMP" ),
		tStringPtr( "GAME_CONTROLS_MELEE" ),
		tStringPtr( "GAME_CONTROLS_ARTILLERY_ROTATE_LEFT" ),
		tStringPtr( "GAME_CONTROLS_ARTILLERY_ROTATE_RIGHT" ),
		tStringPtr( "GAME_CONTROLS_ENTER_EXIT_UNIT" ),
		tStringPtr( "GAME_CONTROLS_ACCELERATE" ),
		tStringPtr( "GAME_CONTROLS_DECCELERATE" ),
		tStringPtr( "GAME_CONTROLS_BOOST" ),
		tStringPtr( "GAME_CONTROLS_HANDBRAKE" ),
		tStringPtr( "GAME_CONTROLS_DECREASE_ALTITUDE" ),
		tStringPtr( "GAME_CONTROLS_INCREASE_ALTITUDE" ),
		tStringPtr( "GAME_CONTROLS_TRIGGER_PRIMARY" ),
		tStringPtr( "GAME_CONTROLS_TRIGGER_SECONDARY" ),
		tStringPtr( "GAME_CONTROLS_UNIT_QUICKSWITCH_FORWARD" ),
		tStringPtr( "GAME_CONTROLS_UNIT_QUICKSWITCH_BEHIND" ),
		tStringPtr( "GAME_CONTROLS_UNIT_QUICKSWITCH_LEFT" ),
		tStringPtr( "GAME_CONTROLS_UNIT_QUICKSWITCH_RIGHT" ),
		tStringPtr( "GAME_CONTROLS_QUICK_USE" ),
		tStringPtr( "GAME_CONTROLS_QUICK_SELL" ),
		tStringPtr( "GAME_CONTROLS_QUICK_UPGRADE" ),
		tStringPtr( "GAME_CONTROLS_QUICK_REPAIR" ),
		tStringPtr( "GAME_CONTROLS_MOVE_LEFT" ),
		tStringPtr( "GAME_CONTROLS_MOVE_RIGHT" ),
		tStringPtr( "GAME_CONTROLS_MOVE_UP" ),
		tStringPtr( "GAME_CONTROLS_MOVE_DOWN" ),
		tStringPtr( "GAME_CONTROLS_MOVE_MINMAG" ),
		tStringPtr( "GAME_CONTROLS_MOVE_MAXMAG" ),
		tStringPtr( "GAME_CONTROLS_AIM_MINMAG" ),
		tStringPtr( "GAME_CONTROLS_AIM_MAXMAG" ),
		tStringPtr( "GAME_CONTROLS_AIM_LEFT" ),
		tStringPtr( "GAME_CONTROLS_AIM_RIGHT" ),
		tStringPtr( "GAME_CONTROLS_AIM_UP" ),
		tStringPtr( "GAME_CONTROLS_AIM_DOWN" ),
		tStringPtr( "GAME_CONTROLS_BARBED_WIRE" ),
		tStringPtr( "GAME_CONTROLS_MENU_DROP_PLAYER_2" ),
		tStringPtr( "GAME_CONTROLS_CAMERA_MOVE_IN" ),
		tStringPtr( "GAME_CONTROLS_CAMERA_MOVE_OUT" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw55[]={
		tStringPtr( "MENU_ACCEPT" ),
		tStringPtr( "MENU_CANCEL" ),
		tStringPtr( "MENU_GAMERCARD" ),
		tStringPtr( "MENU_PAUSE" ),
		tStringPtr( "MENU_REWIND" ),
		tStringPtr( "MENU_UP" ),
		tStringPtr( "MENU_DOWN" ),
		tStringPtr( "MENU_LEFT" ),
		tStringPtr( "MENU_RIGHT" ),
		tStringPtr( "MENU_CYCLE_LEADERBOARD_FILTER" ),
		tStringPtr( "MENU_SHOW_INVITE_UI" ),
		tStringPtr( "MENU_SHOW_LEADERBOARDS" ),
		tStringPtr( "MENU_PREVIOUS_PAGE" ),
		tStringPtr( "MENU_NEXT_PAGE" ),
		tStringPtr( "MENU_SHOW_MULTIPLAYER_CONTROLS" ),
		tStringPtr( "SELECT" ),
		tStringPtr( "CANCEL" ),
		tStringPtr( "PLACEMENT_MENU" ),
		tStringPtr( "LAUNCH_WAVE" ),
		tStringPtr( "LAUNCH_BARRAGE" ),
		tStringPtr( "CAMERA_CYCLE" ),
		tStringPtr( "CAMERA_CENTER" ),
		tStringPtr( "CAMERA_SPEED" ),
		tStringPtr( "CAMERA_FOCUS_EVENT" ),
		tStringPtr( "JUMP" ),
		tStringPtr( "MELEE" ),
		tStringPtr( "ARTILLERY_ROTATE_LEFT" ),
		tStringPtr( "ARTILLERY_ROTATE_RIGHT" ),
		tStringPtr( "ENTER_EXIT_UNIT" ),
		tStringPtr( "ACCELERATE" ),
		tStringPtr( "DECCELERATE" ),
		tStringPtr( "BOOST" ),
		tStringPtr( "HANDBRAKE" ),
		tStringPtr( "DECREASE_ALTITUDE" ),
		tStringPtr( "INCREASE_ALTITUDE" ),
		tStringPtr( "TRIGGER_PRIMARY" ),
		tStringPtr( "TRIGGER_SECONDARY" ),
		tStringPtr( "UNIT_QUICKSWITCH_FORWARD" ),
		tStringPtr( "UNIT_QUICKSWITCH_BEHIND" ),
		tStringPtr( "UNIT_QUICKSWITCH_LEFT" ),
		tStringPtr( "UNIT_QUICKSWITCH_RIGHT" ),
		tStringPtr( "QUICK_USE" ),
		tStringPtr( "QUICK_SELL" ),
		tStringPtr( "QUICK_UPGRADE" ),
		tStringPtr( "QUICK_REPAIR" ),
		tStringPtr( "MOVE_LEFT" ),
		tStringPtr( "MOVE_RIGHT" ),
		tStringPtr( "MOVE_UP" ),
		tStringPtr( "MOVE_DOWN" ),
		tStringPtr( "MOVE_MINMAG" ),
		tStringPtr( "MOVE_MAXMAG" ),
		tStringPtr( "AIM_MINMAG" ),
		tStringPtr( "AIM_MAXMAG" ),
		tStringPtr( "AIM_LEFT" ),
		tStringPtr( "AIM_RIGHT" ),
		tStringPtr( "AIM_UP" ),
		tStringPtr( "AIM_DOWN" ),
		tStringPtr( "BARBED_WIRE" ),
		tStringPtr( "MENU_DROP_PLAYER_2" ),
		tStringPtr( "CAMERA_MOVE_IN" ),
		tStringPtr( "CAMERA_MOVE_OUT" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNames56[]={
		tStringPtr( "GAMECONTROLLER_MODE_KEYBOARDMOUSE" ),
		tStringPtr( "GAMECONTROLLER_MODE_GAMEPAD" ),
		tStringPtr::cNullPtr
	};

	static const tStringPtr cGameEnumValueNamesRaw56[]={
		tStringPtr( "KEYBOARDMOUSE" ),
		tStringPtr( "GAMEPAD" ),
		tStringPtr::cNullPtr
	};

	const tStringPtr*const cGameEnumValueNames[]={
		cGameEnumValueNames0,
		cGameEnumValueNames1,
		cGameEnumValueNames2,
		cGameEnumValueNames3,
		cGameEnumValueNames4,
		cGameEnumValueNames5,
		cGameEnumValueNames6,
		cGameEnumValueNames7,
		cGameEnumValueNames8,
		cGameEnumValueNames9,
		cGameEnumValueNames10,
		cGameEnumValueNames11,
		cGameEnumValueNames12,
		cGameEnumValueNames13,
		cGameEnumValueNames14,
		cGameEnumValueNames15,
		cGameEnumValueNames16,
		cGameEnumValueNames17,
		cGameEnumValueNames18,
		cGameEnumValueNames19,
		cGameEnumValueNames20,
		cGameEnumValueNames21,
		cGameEnumValueNames22,
		cGameEnumValueNames23,
		cGameEnumValueNames24,
		cGameEnumValueNames25,
		cGameEnumValueNames26,
		cGameEnumValueNames27,
		cGameEnumValueNames28,
		cGameEnumValueNames29,
		cGameEnumValueNames30,
		cGameEnumValueNames31,
		cGameEnumValueNames32,
		cGameEnumValueNames33,
		cGameEnumValueNames34,
		cGameEnumValueNames35,
		cGameEnumValueNames36,
		cGameEnumValueNames37,
		cGameEnumValueNames38,
		cGameEnumValueNames39,
		cGameEnumValueNames40,
		cGameEnumValueNames41,
		cGameEnumValueNames42,
		cGameEnumValueNames43,
		cGameEnumValueNames44,
		cGameEnumValueNames45,
		cGameEnumValueNames46,
		cGameEnumValueNames47,
		cGameEnumValueNames48,
		cGameEnumValueNames49,
		cGameEnumValueNames50,
		cGameEnumValueNames51,
		cGameEnumValueNames52,
		cGameEnumValueNames53,
		cGameEnumValueNames54,
		cGameEnumValueNames55,
		cGameEnumValueNames56,
		0
	};

	const tStringPtr*const cGameEnumValueNamesRaw[]={
		cGameEnumValueNamesRaw0,
		cGameEnumValueNamesRaw1,
		cGameEnumValueNamesRaw2,
		cGameEnumValueNamesRaw3,
		cGameEnumValueNamesRaw4,
		cGameEnumValueNamesRaw5,
		cGameEnumValueNamesRaw6,
		cGameEnumValueNamesRaw7,
		cGameEnumValueNamesRaw8,
		cGameEnumValueNamesRaw9,
		cGameEnumValueNamesRaw10,
		cGameEnumValueNamesRaw11,
		cGameEnumValueNamesRaw12,
		cGameEnumValueNamesRaw13,
		cGameEnumValueNamesRaw14,
		cGameEnumValueNamesRaw15,
		cGameEnumValueNamesRaw16,
		cGameEnumValueNamesRaw17,
		cGameEnumValueNamesRaw18,
		cGameEnumValueNamesRaw19,
		cGameEnumValueNamesRaw20,
		cGameEnumValueNamesRaw21,
		cGameEnumValueNamesRaw22,
		cGameEnumValueNamesRaw23,
		cGameEnumValueNamesRaw24,
		cGameEnumValueNamesRaw25,
		cGameEnumValueNamesRaw26,
		cGameEnumValueNamesRaw27,
		cGameEnumValueNamesRaw28,
		cGameEnumValueNamesRaw29,
		cGameEnumValueNamesRaw30,
		cGameEnumValueNamesRaw31,
		cGameEnumValueNamesRaw32,
		cGameEnumValueNamesRaw33,
		cGameEnumValueNamesRaw34,
		cGameEnumValueNamesRaw35,
		cGameEnumValueNamesRaw36,
		cGameEnumValueNamesRaw37,
		cGameEnumValueNamesRaw38,
		cGameEnumValueNamesRaw39,
		cGameEnumValueNamesRaw40,
		cGameEnumValueNamesRaw41,
		cGameEnumValueNamesRaw42,
		cGameEnumValueNamesRaw43,
		cGameEnumValueNamesRaw44,
		cGameEnumValueNamesRaw45,
		cGameEnumValueNamesRaw46,
		cGameEnumValueNamesRaw47,
		cGameEnumValueNamesRaw48,
		cGameEnumValueNamesRaw49,
		cGameEnumValueNamesRaw50,
		cGameEnumValueNamesRaw51,
		cGameEnumValueNamesRaw52,
		cGameEnumValueNamesRaw53,
		cGameEnumValueNamesRaw54,
		cGameEnumValueNamesRaw55,
		cGameEnumValueNamesRaw56,
		0
	};


	static const u32 cGameEnumValues0[]={
		0u,
		1u,
		2u,
		~0u
	};

	static const u32 cGameEnumValues1[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		~0u
	};

	static const u32 cGameEnumValues2[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		~0u
	};

	static const u32 cGameEnumValues3[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		16u,
		17u,
		18u,
		19u,
		20u,
		21u,
		22u,
		23u,
		24u,
		25u,
		26u,
		27u,
		28u,
		29u,
		30u,
		31u,
		32u,
		33u,
		34u,
		35u,
		36u,
		37u,
		38u,
		39u,
		40u,
		41u,
		42u,
		43u,
		44u,
		45u,
		46u,
		47u,
		48u,
		49u,
		50u,
		51u,
		52u,
		53u,
		54u,
		55u,
		56u,
		57u,
		58u,
		59u,
		60u,
		61u,
		62u,
		63u,
		64u,
		65u,
		66u,
		67u,
		68u,
		69u,
		70u,
		71u,
		72u,
		73u,
		74u,
		75u,
		76u,
		77u,
		78u,
		79u,
		80u,
		81u,
		82u,
		83u,
		84u,
		85u,
		86u,
		87u,
		88u,
		89u,
		90u,
		91u,
		92u,
		93u,
		94u,
		95u,
		96u,
		97u,
		98u,
		99u,
		100u,
		101u,
		102u,
		103u,
		104u,
		105u,
		106u,
		107u,
		108u,
		109u,
		110u,
		111u,
		112u,
		113u,
		114u,
		115u,
		116u,
		117u,
		118u,
		119u,
		120u,
		121u,
		122u,
		123u,
		124u,
		125u,
		126u,
		127u,
		128u,
		129u,
		130u,
		131u,
		132u,
		133u,
		134u,
		135u,
		136u,
		137u,
		138u,
		139u,
		~0u
	};

	static const u32 cGameEnumValues4[]={
		0u,
		1u,
		~0u
	};

	static const u32 cGameEnumValues5[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		~0u
	};

	static const u32 cGameEnumValues6[]={
		0u,
		1u,
		2u,
		~0u
	};

	static const u32 cGameEnumValues7[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		~0u
	};

	static const u32 cGameEnumValues8[]={
		0u,
		1u,
		~0u
	};

	static const u32 cGameEnumValues9[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		~0u
	};

	static const u32 cGameEnumValues10[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		~0u
	};

	static const u32 cGameEnumValues11[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		~0u
	};

	static const u32 cGameEnumValues12[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		~0u
	};

	static const u32 cGameEnumValues13[]={
		0u,
		1u,
		2u,
		3u,
		~0u
	};

	static const u32 cGameEnumValues14[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		~0u
	};

	static const u32 cGameEnumValues15[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		~0u
	};

	static const u32 cGameEnumValues16[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		~0u
	};

	static const u32 cGameEnumValues17[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		~0u
	};

	static const u32 cGameEnumValues18[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		~0u
	};

	static const u32 cGameEnumValues19[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		~0u
	};

	static const u32 cGameEnumValues20[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		~0u
	};

	static const u32 cGameEnumValues21[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		~0u
	};

	static const u32 cGameEnumValues22[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		16u,
		~0u
	};

	static const u32 cGameEnumValues23[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		~0u
	};

	static const u32 cGameEnumValues24[]={
		0u,
		1u,
		2u,
		3u,
		~0u
	};

	static const u32 cGameEnumValues25[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		16u,
		17u,
		18u,
		19u,
		20u,
		21u,
		22u,
		23u,
		24u,
		25u,
		26u,
		27u,
		28u,
		29u,
		30u,
		31u,
		32u,
		33u,
		34u,
		35u,
		36u,
		37u,
		38u,
		39u,
		40u,
		41u,
		42u,
		43u,
		44u,
		45u,
		46u,
		47u,
		48u,
		49u,
		50u,
		51u,
		52u,
		53u,
		54u,
		55u,
		56u,
		57u,
		58u,
		59u,
		60u,
		61u,
		62u,
		63u,
		64u,
		65u,
		66u,
		67u,
		68u,
		69u,
		70u,
		71u,
		72u,
		73u,
		74u,
		75u,
		76u,
		77u,
		78u,
		79u,
		80u,
		81u,
		82u,
		83u,
		84u,
		85u,
		86u,
		~0u
	};

	static const u32 cGameEnumValues26[]={
		0u,
		1u,
		~0u
	};

	static const u32 cGameEnumValues27[]={
		0u,
		1u,
		2u,
		3u,
		~0u
	};

	static const u32 cGameEnumValues28[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		16u,
		17u,
		18u,
		19u,
		20u,
		21u,
		22u,
		23u,
		24u,
		25u,
		26u,
		27u,
		28u,
		29u,
		30u,
		31u,
		32u,
		33u,
		34u,
		~0u
	};

	static const u32 cGameEnumValues29[]={
		0u,
		1u,
		2u,
		~0u
	};

	static const u32 cGameEnumValues30[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		~0u
	};

	static const u32 cGameEnumValues31[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		16u,
		17u,
		18u,
		19u,
		20u,
		21u,
		22u,
		23u,
		24u,
		25u,
		26u,
		27u,
		28u,
		29u,
		30u,
		31u,
		~0u
	};

	static const u32 cGameEnumValues32[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		16u,
		17u,
		18u,
		19u,
		20u,
		21u,
		22u,
		23u,
		24u,
		25u,
		26u,
		27u,
		28u,
		29u,
		30u,
		31u,
		32u,
		33u,
		34u,
		35u,
		36u,
		37u,
		38u,
		39u,
		40u,
		41u,
		42u,
		43u,
		44u,
		45u,
		46u,
		47u,
		48u,
		49u,
		50u,
		51u,
		52u,
		53u,
		54u,
		55u,
		56u,
		57u,
		58u,
		59u,
		60u,
		61u,
		62u,
		63u,
		64u,
		65u,
		66u,
		67u,
		68u,
		69u,
		70u,
		71u,
		72u,
		73u,
		74u,
		75u,
		76u,
		77u,
		78u,
		79u,
		80u,
		81u,
		82u,
		83u,
		84u,
		85u,
		86u,
		87u,
		88u,
		89u,
		90u,
		91u,
		92u,
		93u,
		94u,
		95u,
		96u,
		97u,
		98u,
		99u,
		100u,
		101u,
		102u,
		103u,
		104u,
		105u,
		106u,
		107u,
		108u,
		109u,
		110u,
		111u,
		112u,
		113u,
		114u,
		115u,
		116u,
		117u,
		118u,
		119u,
		120u,
		121u,
		~0u
	};

	static const u32 cGameEnumValues33[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		~0u
	};

	static const u32 cGameEnumValues34[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		~0u
	};

	static const u32 cGameEnumValues35[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		~0u
	};

	static const u32 cGameEnumValues36[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		~0u
	};

	static const u32 cGameEnumValues37[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		~0u
	};

	static const u32 cGameEnumValues38[]={
		0u,
		1u,
		2u,
		~0u
	};

	static const u32 cGameEnumValues39[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		~0u
	};

	static const u32 cGameEnumValues40[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		~0u
	};

	static const u32 cGameEnumValues41[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		~0u
	};

	static const u32 cGameEnumValues42[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		~0u
	};

	static const u32 cGameEnumValues43[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		~0u
	};

	static const u32 cGameEnumValues44[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		~0u
	};

	static const u32 cGameEnumValues45[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		~0u
	};

	static const u32 cGameEnumValues46[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		~0u
	};

	static const u32 cGameEnumValues47[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		~0u
	};

	static const u32 cGameEnumValues48[]={
		0u,
		~0u
	};

	static const u32 cGameEnumValues49[]={
		0u,
		~0u
	};

	static const u32 cGameEnumValues50[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		~0u
	};

	static const u32 cGameEnumValues51[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		~0u
	};

	static const u32 cGameEnumValues52[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		~0u
	};

	static const u32 cGameEnumValues53[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		16u,
		17u,
		18u,
		19u,
		20u,
		21u,
		22u,
		23u,
		24u,
		25u,
		26u,
		27u,
		28u,
		29u,
		30u,
		31u,
		32u,
		33u,
		34u,
		35u,
		36u,
		37u,
		~0u
	};

	static const u32 cGameEnumValues54[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		~0u
	};

	static const u32 cGameEnumValues55[]={
		0u,
		1u,
		2u,
		3u,
		4u,
		5u,
		6u,
		7u,
		8u,
		9u,
		10u,
		11u,
		12u,
		13u,
		14u,
		15u,
		16u,
		17u,
		18u,
		19u,
		20u,
		21u,
		22u,
		23u,
		24u,
		25u,
		26u,
		27u,
		28u,
		29u,
		30u,
		31u,
		32u,
		33u,
		34u,
		35u,
		36u,
		37u,
		38u,
		39u,
		40u,
		41u,
		42u,
		43u,
		44u,
		45u,
		46u,
		47u,
		48u,
		49u,
		50u,
		51u,
		52u,
		53u,
		54u,
		55u,
		56u,
		57u,
		58u,
		59u,
		60u,
		~0u
	};

	static const u32 cGameEnumValues56[]={
		0u,
		1u,
		~0u
	};

	const u32*const cGameEnumValues[]={
		cGameEnumValues0,
		cGameEnumValues1,
		cGameEnumValues2,
		cGameEnumValues3,
		cGameEnumValues4,
		cGameEnumValues5,
		cGameEnumValues6,
		cGameEnumValues7,
		cGameEnumValues8,
		cGameEnumValues9,
		cGameEnumValues10,
		cGameEnumValues11,
		cGameEnumValues12,
		cGameEnumValues13,
		cGameEnumValues14,
		cGameEnumValues15,
		cGameEnumValues16,
		cGameEnumValues17,
		cGameEnumValues18,
		cGameEnumValues19,
		cGameEnumValues20,
		cGameEnumValues21,
		cGameEnumValues22,
		cGameEnumValues23,
		cGameEnumValues24,
		cGameEnumValues25,
		cGameEnumValues26,
		cGameEnumValues27,
		cGameEnumValues28,
		cGameEnumValues29,
		cGameEnumValues30,
		cGameEnumValues31,
		cGameEnumValues32,
		cGameEnumValues33,
		cGameEnumValues34,
		cGameEnumValues35,
		cGameEnumValues36,
		cGameEnumValues37,
		cGameEnumValues38,
		cGameEnumValues39,
		cGameEnumValues40,
		cGameEnumValues41,
		cGameEnumValues42,
		cGameEnumValues43,
		cGameEnumValues44,
		cGameEnumValues45,
		cGameEnumValues46,
		cGameEnumValues47,
		cGameEnumValues48,
		cGameEnumValues49,
		cGameEnumValues50,
		cGameEnumValues51,
		cGameEnumValues52,
		cGameEnumValues53,
		cGameEnumValues54,
		cGameEnumValues55,
		cGameEnumValues56,
		0
	};



}}}


namespace Sig { namespace GameFlags
{
	const tStringPtr& fGameEventToString( u32 eventValue )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEventValues ); ++i )
			if( Detail::cGameEventValues[ i ] == eventValue )
				return Detail::cGameEventNames[ i ];
		return tStringPtr::cNullPtr;
	}
	u32 fGameEventToValue( const tStringPtr& name )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEventNames ); ++i )
			if( Detail::cGameEventNames[ i ] == name )
				return Detail::cGameEventValues[ i ];
		return ~0u;
	}
	u32 fGameEventValueStringToEnum( const tStringPtr& name )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEventValueNames ); ++i )
			if( Detail::cGameEventValueNames[ i ] == name )
				return Detail::cGameEventValues[ i ];
		return ~0u;
	}
	const tStringPtr& fAIFlagToString( u32 eventValue )
	{
		for( u32 i = 0; i < array_length( Detail::cAIFlagValues ); ++i )
			if( Detail::cAIFlagValues[ i ] == eventValue )
				return Detail::cAIFlagNames[ i ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fAIFlagToValueString( u32 eventValue )
	{
		for( u32 i = 0; i < array_length( Detail::cAIFlagValueNames ); ++i )
			if( Detail::cAIFlagValues[ i ] == eventValue )
				return Detail::cAIFlagValueNames[ i ];
		return tStringPtr::cNullPtr;
	}
	u32 fAIFlagToValue( const tStringPtr& name )
	{
		for( u32 i = 0; i < array_length( Detail::cAIFlagNames ); ++i )
			if( Detail::cAIFlagNames[ i ] == name )
				return Detail::cAIFlagValues[ i ];
		return ~0u;
	}
	u32 fAIFlagValueStringToValue( const tStringPtr& name )
	{
		for( u32 i = 0; i < array_length( Detail::cAIFlagValueNames ); ++i )
			if( Detail::cAIFlagValueNames[ i ] == name )
				return Detail::cAIFlagValues[ i ];
		return ~0u;
	}
	const tStringPtr& fTEAMEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames0 ) )
			return Detail::cGameEnumValueNames0[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fTEAMEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw0 ) )
			return Detail::cGameEnumValueNamesRaw0[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fTEAMStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames0 ); ++i )
		{
			if( Detail::cGameEnumValueNames0[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fTEAMStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fTEAMStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tTEAM" );
		return value;
	}
	u32 fTEAMValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw0 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw0[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fTEAMValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fTEAMValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tTEAM" );
		return value;
	}
	const tStringPtr& fUNIT_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames1 ) )
			return Detail::cGameEnumValueNames1[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fUNIT_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw1 ) )
			return Detail::cGameEnumValueNamesRaw1[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fUNIT_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames1 ); ++i )
		{
			if( Detail::cGameEnumValueNames1[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fUNIT_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fUNIT_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tUNIT_TYPE" );
		return value;
	}
	u32 fUNIT_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw1 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw1[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fUNIT_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fUNIT_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tUNIT_TYPE" );
		return value;
	}
	const tStringPtr& fUNIT_LEVEL_DEPRECATEDEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames2 ) )
			return Detail::cGameEnumValueNames2[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fUNIT_LEVEL_DEPRECATEDEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw2 ) )
			return Detail::cGameEnumValueNamesRaw2[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fUNIT_LEVEL_DEPRECATEDStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames2 ); ++i )
		{
			if( Detail::cGameEnumValueNames2[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fUNIT_LEVEL_DEPRECATEDStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fUNIT_LEVEL_DEPRECATEDStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tUNIT_LEVEL_DEPRECATED" );
		return value;
	}
	u32 fUNIT_LEVEL_DEPRECATEDValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw2 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw2[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fUNIT_LEVEL_DEPRECATEDValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fUNIT_LEVEL_DEPRECATEDValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tUNIT_LEVEL_DEPRECATED" );
		return value;
	}
	const tStringPtr& fUNIT_IDEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames3 ) )
			return Detail::cGameEnumValueNames3[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fUNIT_IDEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw3 ) )
			return Detail::cGameEnumValueNamesRaw3[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fUNIT_IDStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames3 ); ++i )
		{
			if( Detail::cGameEnumValueNames3[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fUNIT_IDStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fUNIT_IDStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tUNIT_ID" );
		return value;
	}
	u32 fUNIT_IDValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw3 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw3[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fUNIT_IDValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fUNIT_IDValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tUNIT_ID" );
		return value;
	}
	const tStringPtr& fBUILD_SITEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames4 ) )
			return Detail::cGameEnumValueNames4[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fBUILD_SITEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw4 ) )
			return Detail::cGameEnumValueNamesRaw4[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fBUILD_SITEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames4 ); ++i )
		{
			if( Detail::cGameEnumValueNames4[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fBUILD_SITEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fBUILD_SITEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tBUILD_SITE" );
		return value;
	}
	u32 fBUILD_SITEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw4 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw4[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fBUILD_SITEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fBUILD_SITEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tBUILD_SITE" );
		return value;
	}
	const tStringPtr& fMAP_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames5 ) )
			return Detail::cGameEnumValueNames5[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fMAP_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw5 ) )
			return Detail::cGameEnumValueNamesRaw5[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fMAP_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames5 ); ++i )
		{
			if( Detail::cGameEnumValueNames5[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fMAP_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fMAP_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tMAP_TYPE" );
		return value;
	}
	u32 fMAP_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw5 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw5[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fMAP_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fMAP_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tMAP_TYPE" );
		return value;
	}
	const tStringPtr& fARTILLERY_SOLDIEREnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames6 ) )
			return Detail::cGameEnumValueNames6[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fARTILLERY_SOLDIEREnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw6 ) )
			return Detail::cGameEnumValueNamesRaw6[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fARTILLERY_SOLDIERStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames6 ); ++i )
		{
			if( Detail::cGameEnumValueNames6[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fARTILLERY_SOLDIERStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fARTILLERY_SOLDIERStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tARTILLERY_SOLDIER" );
		return value;
	}
	u32 fARTILLERY_SOLDIERValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw6 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw6[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fARTILLERY_SOLDIERValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fARTILLERY_SOLDIERValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tARTILLERY_SOLDIER" );
		return value;
	}
	const tStringPtr& fCOUNTRYEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames7 ) )
			return Detail::cGameEnumValueNames7[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCOUNTRYEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw7 ) )
			return Detail::cGameEnumValueNamesRaw7[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCOUNTRYStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames7 ); ++i )
		{
			if( Detail::cGameEnumValueNames7[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCOUNTRYStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCOUNTRYStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCOUNTRY" );
		return value;
	}
	u32 fCOUNTRYValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw7 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw7[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCOUNTRYValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCOUNTRYValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCOUNTRY" );
		return value;
	}
	const tStringPtr& fSPECIAL_LEVEL_OBJECTEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames8 ) )
			return Detail::cGameEnumValueNames8[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fSPECIAL_LEVEL_OBJECTEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw8 ) )
			return Detail::cGameEnumValueNamesRaw8[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fSPECIAL_LEVEL_OBJECTStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames8 ); ++i )
		{
			if( Detail::cGameEnumValueNames8[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fSPECIAL_LEVEL_OBJECTStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fSPECIAL_LEVEL_OBJECTStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tSPECIAL_LEVEL_OBJECT" );
		return value;
	}
	u32 fSPECIAL_LEVEL_OBJECTValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw8 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw8[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fSPECIAL_LEVEL_OBJECTValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fSPECIAL_LEVEL_OBJECTValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tSPECIAL_LEVEL_OBJECT" );
		return value;
	}
	const tStringPtr& fDAMAGE_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames9 ) )
			return Detail::cGameEnumValueNames9[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fDAMAGE_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw9 ) )
			return Detail::cGameEnumValueNamesRaw9[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fDAMAGE_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames9 ); ++i )
		{
			if( Detail::cGameEnumValueNames9[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fDAMAGE_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fDAMAGE_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tDAMAGE_TYPE" );
		return value;
	}
	u32 fDAMAGE_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw9 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw9[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fDAMAGE_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fDAMAGE_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tDAMAGE_TYPE" );
		return value;
	}
	const tStringPtr& fTRIGGERED_BREAK_STATEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames10 ) )
			return Detail::cGameEnumValueNames10[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fTRIGGERED_BREAK_STATEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw10 ) )
			return Detail::cGameEnumValueNamesRaw10[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fTRIGGERED_BREAK_STATEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames10 ); ++i )
		{
			if( Detail::cGameEnumValueNames10[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fTRIGGERED_BREAK_STATEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fTRIGGERED_BREAK_STATEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tTRIGGERED_BREAK_STATE" );
		return value;
	}
	u32 fTRIGGERED_BREAK_STATEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw10 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw10[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fTRIGGERED_BREAK_STATEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fTRIGGERED_BREAK_STATEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tTRIGGERED_BREAK_STATE" );
		return value;
	}
	const tStringPtr& fDEBRIS_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames11 ) )
			return Detail::cGameEnumValueNames11[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fDEBRIS_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw11 ) )
			return Detail::cGameEnumValueNamesRaw11[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fDEBRIS_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames11 ); ++i )
		{
			if( Detail::cGameEnumValueNames11[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fDEBRIS_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fDEBRIS_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tDEBRIS_TYPE" );
		return value;
	}
	u32 fDEBRIS_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw11 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw11[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fDEBRIS_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fDEBRIS_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tDEBRIS_TYPE" );
		return value;
	}
	const tStringPtr& fCONTEXT_ANIM_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames12 ) )
			return Detail::cGameEnumValueNames12[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCONTEXT_ANIM_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw12 ) )
			return Detail::cGameEnumValueNamesRaw12[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCONTEXT_ANIM_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames12 ); ++i )
		{
			if( Detail::cGameEnumValueNames12[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCONTEXT_ANIM_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCONTEXT_ANIM_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCONTEXT_ANIM_TYPE" );
		return value;
	}
	u32 fCONTEXT_ANIM_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw12 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw12[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCONTEXT_ANIM_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCONTEXT_ANIM_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCONTEXT_ANIM_TYPE" );
		return value;
	}
	const tStringPtr& fGROUND_TYPE_DEPRICATEDEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames13 ) )
			return Detail::cGameEnumValueNames13[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fGROUND_TYPE_DEPRICATEDEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw13 ) )
			return Detail::cGameEnumValueNamesRaw13[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fGROUND_TYPE_DEPRICATEDStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames13 ); ++i )
		{
			if( Detail::cGameEnumValueNames13[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fGROUND_TYPE_DEPRICATEDStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fGROUND_TYPE_DEPRICATEDStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tGROUND_TYPE_DEPRICATED" );
		return value;
	}
	u32 fGROUND_TYPE_DEPRICATEDValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw13 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw13[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fGROUND_TYPE_DEPRICATEDValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fGROUND_TYPE_DEPRICATEDValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tGROUND_TYPE_DEPRICATED" );
		return value;
	}
	const tStringPtr& fLEVEL_EVENTEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames14 ) )
			return Detail::cGameEnumValueNames14[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fLEVEL_EVENTEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw14 ) )
			return Detail::cGameEnumValueNamesRaw14[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fLEVEL_EVENTStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames14 ); ++i )
		{
			if( Detail::cGameEnumValueNames14[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fLEVEL_EVENTStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fLEVEL_EVENTStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tLEVEL_EVENT" );
		return value;
	}
	u32 fLEVEL_EVENTValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw14 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw14[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fLEVEL_EVENTValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fLEVEL_EVENTValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tLEVEL_EVENT" );
		return value;
	}
	const tStringPtr& fLINKED_HITPOINTSEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames15 ) )
			return Detail::cGameEnumValueNames15[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fLINKED_HITPOINTSEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw15 ) )
			return Detail::cGameEnumValueNamesRaw15[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fLINKED_HITPOINTSStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames15 ); ++i )
		{
			if( Detail::cGameEnumValueNames15[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fLINKED_HITPOINTSStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fLINKED_HITPOINTSStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tLINKED_HITPOINTS" );
		return value;
	}
	u32 fLINKED_HITPOINTSValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw15 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw15[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fLINKED_HITPOINTSValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fLINKED_HITPOINTSValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tLINKED_HITPOINTS" );
		return value;
	}
	const tStringPtr& fTRACER_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames16 ) )
			return Detail::cGameEnumValueNames16[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fTRACER_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw16 ) )
			return Detail::cGameEnumValueNamesRaw16[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fTRACER_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames16 ); ++i )
		{
			if( Detail::cGameEnumValueNames16[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fTRACER_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fTRACER_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tTRACER_TYPE" );
		return value;
	}
	u32 fTRACER_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw16 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw16[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fTRACER_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fTRACER_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tTRACER_TYPE" );
		return value;
	}
	const tStringPtr& fDIFFICULTYEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames17 ) )
			return Detail::cGameEnumValueNames17[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fDIFFICULTYEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw17 ) )
			return Detail::cGameEnumValueNamesRaw17[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fDIFFICULTYStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames17 ); ++i )
		{
			if( Detail::cGameEnumValueNames17[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fDIFFICULTYStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fDIFFICULTYStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tDIFFICULTY" );
		return value;
	}
	u32 fDIFFICULTYValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw17 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw17[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fDIFFICULTYValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fDIFFICULTYValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tDIFFICULTY" );
		return value;
	}
	const tStringPtr& fCARGO_INDEXEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames18 ) )
			return Detail::cGameEnumValueNames18[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCARGO_INDEXEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw18 ) )
			return Detail::cGameEnumValueNamesRaw18[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCARGO_INDEXStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames18 ); ++i )
		{
			if( Detail::cGameEnumValueNames18[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCARGO_INDEXStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCARGO_INDEXStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCARGO_INDEX" );
		return value;
	}
	u32 fCARGO_INDEXValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw18 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw18[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCARGO_INDEXValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCARGO_INDEXValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCARGO_INDEX" );
		return value;
	}
	const tStringPtr& fWEAPON_INDEXEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames19 ) )
			return Detail::cGameEnumValueNames19[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fWEAPON_INDEXEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw19 ) )
			return Detail::cGameEnumValueNamesRaw19[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fWEAPON_INDEXStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames19 ); ++i )
		{
			if( Detail::cGameEnumValueNames19[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fWEAPON_INDEXStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fWEAPON_INDEXStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tWEAPON_INDEX" );
		return value;
	}
	u32 fWEAPON_INDEXValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw19 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw19[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fWEAPON_INDEXValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fWEAPON_INDEXValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tWEAPON_INDEX" );
		return value;
	}
	const tStringPtr& fTHROTTLEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames20 ) )
			return Detail::cGameEnumValueNames20[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fTHROTTLEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw20 ) )
			return Detail::cGameEnumValueNamesRaw20[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fTHROTTLEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames20 ); ++i )
		{
			if( Detail::cGameEnumValueNames20[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fTHROTTLEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fTHROTTLEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tTHROTTLE" );
		return value;
	}
	u32 fTHROTTLEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw20 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw20[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fTHROTTLEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fTHROTTLEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tTHROTTLE" );
		return value;
	}
	const tStringPtr& fWEAPON_ACTIONEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames21 ) )
			return Detail::cGameEnumValueNames21[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fWEAPON_ACTIONEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw21 ) )
			return Detail::cGameEnumValueNamesRaw21[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fWEAPON_ACTIONStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames21 ); ++i )
		{
			if( Detail::cGameEnumValueNames21[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fWEAPON_ACTIONStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fWEAPON_ACTIONStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tWEAPON_ACTION" );
		return value;
	}
	u32 fWEAPON_ACTIONValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw21 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw21[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fWEAPON_ACTIONValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fWEAPON_ACTIONValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tWEAPON_ACTION" );
		return value;
	}
	const tStringPtr& fSURFACE_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames22 ) )
			return Detail::cGameEnumValueNames22[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fSURFACE_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw22 ) )
			return Detail::cGameEnumValueNamesRaw22[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fSURFACE_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames22 ); ++i )
		{
			if( Detail::cGameEnumValueNames22[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fSURFACE_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fSURFACE_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tSURFACE_TYPE" );
		return value;
	}
	u32 fSURFACE_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw22 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw22[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fSURFACE_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fSURFACE_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tSURFACE_TYPE" );
		return value;
	}
	const tStringPtr& fCHARACTER_PROPSEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames23 ) )
			return Detail::cGameEnumValueNames23[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCHARACTER_PROPSEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw23 ) )
			return Detail::cGameEnumValueNamesRaw23[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCHARACTER_PROPSStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames23 ); ++i )
		{
			if( Detail::cGameEnumValueNames23[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCHARACTER_PROPSStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCHARACTER_PROPSStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCHARACTER_PROPS" );
		return value;
	}
	u32 fCHARACTER_PROPSValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw23 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw23[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCHARACTER_PROPSValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCHARACTER_PROPSValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCHARACTER_PROPS" );
		return value;
	}
	const tStringPtr& fWEAPON_STATEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames24 ) )
			return Detail::cGameEnumValueNames24[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fWEAPON_STATEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw24 ) )
			return Detail::cGameEnumValueNamesRaw24[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fWEAPON_STATEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames24 ); ++i )
		{
			if( Detail::cGameEnumValueNames24[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fWEAPON_STATEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fWEAPON_STATEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tWEAPON_STATE" );
		return value;
	}
	u32 fWEAPON_STATEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw24 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw24[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fWEAPON_STATEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fWEAPON_STATEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tWEAPON_STATE" );
		return value;
	}
	const tStringPtr& fAUDIO_TYPE_IDEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames25 ) )
			return Detail::cGameEnumValueNames25[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fAUDIO_TYPE_IDEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw25 ) )
			return Detail::cGameEnumValueNamesRaw25[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fAUDIO_TYPE_IDStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames25 ); ++i )
		{
			if( Detail::cGameEnumValueNames25[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fAUDIO_TYPE_IDStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fAUDIO_TYPE_IDStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tAUDIO_TYPE_ID" );
		return value;
	}
	u32 fAUDIO_TYPE_IDValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw25 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw25[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fAUDIO_TYPE_IDValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fAUDIO_TYPE_IDValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tAUDIO_TYPE_ID" );
		return value;
	}
	const tStringPtr& fEXTRA_SEAT_INDEXEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames26 ) )
			return Detail::cGameEnumValueNames26[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fEXTRA_SEAT_INDEXEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw26 ) )
			return Detail::cGameEnumValueNamesRaw26[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fEXTRA_SEAT_INDEXStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames26 ); ++i )
		{
			if( Detail::cGameEnumValueNames26[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fEXTRA_SEAT_INDEXStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fEXTRA_SEAT_INDEXStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tEXTRA_SEAT_INDEX" );
		return value;
	}
	u32 fEXTRA_SEAT_INDEXValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw26 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw26[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fEXTRA_SEAT_INDEXValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fEXTRA_SEAT_INDEXValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tEXTRA_SEAT_INDEX" );
		return value;
	}
	const tStringPtr& fWHEEL_INDEXEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames27 ) )
			return Detail::cGameEnumValueNames27[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fWHEEL_INDEXEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw27 ) )
			return Detail::cGameEnumValueNamesRaw27[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fWHEEL_INDEXStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames27 ); ++i )
		{
			if( Detail::cGameEnumValueNames27[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fWHEEL_INDEXStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fWHEEL_INDEXStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tWHEEL_INDEX" );
		return value;
	}
	u32 fWHEEL_INDEXValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw27 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw27[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fWHEEL_INDEXValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fWHEEL_INDEXValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tWHEEL_INDEX" );
		return value;
	}
	const tStringPtr& fTUTORIAL_EVENTEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames28 ) )
			return Detail::cGameEnumValueNames28[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fTUTORIAL_EVENTEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw28 ) )
			return Detail::cGameEnumValueNamesRaw28[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fTUTORIAL_EVENTStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames28 ); ++i )
		{
			if( Detail::cGameEnumValueNames28[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fTUTORIAL_EVENTStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fTUTORIAL_EVENTStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tTUTORIAL_EVENT" );
		return value;
	}
	u32 fTUTORIAL_EVENTValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw28 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw28[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fTUTORIAL_EVENTValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fTUTORIAL_EVENTValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tTUTORIAL_EVENT" );
		return value;
	}
	const tStringPtr& fPERSISTENT_EFFECT_BEHAVIOREnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames29 ) )
			return Detail::cGameEnumValueNames29[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fPERSISTENT_EFFECT_BEHAVIOREnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw29 ) )
			return Detail::cGameEnumValueNamesRaw29[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fPERSISTENT_EFFECT_BEHAVIORStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames29 ); ++i )
		{
			if( Detail::cGameEnumValueNames29[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fPERSISTENT_EFFECT_BEHAVIORStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fPERSISTENT_EFFECT_BEHAVIORStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tPERSISTENT_EFFECT_BEHAVIOR" );
		return value;
	}
	u32 fPERSISTENT_EFFECT_BEHAVIORValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw29 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw29[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fPERSISTENT_EFFECT_BEHAVIORValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fPERSISTENT_EFFECT_BEHAVIORValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tPERSISTENT_EFFECT_BEHAVIOR" );
		return value;
	}
	const tStringPtr& fSPECIAL_ENTRANCEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames30 ) )
			return Detail::cGameEnumValueNames30[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fSPECIAL_ENTRANCEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw30 ) )
			return Detail::cGameEnumValueNamesRaw30[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fSPECIAL_ENTRANCEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames30 ); ++i )
		{
			if( Detail::cGameEnumValueNames30[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fSPECIAL_ENTRANCEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fSPECIAL_ENTRANCEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tSPECIAL_ENTRANCE" );
		return value;
	}
	u32 fSPECIAL_ENTRANCEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw30 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw30[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fSPECIAL_ENTRANCEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fSPECIAL_ENTRANCEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tSPECIAL_ENTRANCE" );
		return value;
	}
	const tStringPtr& fACHIEVEMENTSEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames31 ) )
			return Detail::cGameEnumValueNames31[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fACHIEVEMENTSEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw31 ) )
			return Detail::cGameEnumValueNamesRaw31[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fACHIEVEMENTSStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames31 ); ++i )
		{
			if( Detail::cGameEnumValueNames31[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fACHIEVEMENTSStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fACHIEVEMENTSStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tACHIEVEMENTS" );
		return value;
	}
	u32 fACHIEVEMENTSValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw31 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw31[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fACHIEVEMENTSValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fACHIEVEMENTSValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tACHIEVEMENTS" );
		return value;
	}
	const tStringPtr& fSESSION_STATSEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames32 ) )
			return Detail::cGameEnumValueNames32[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fSESSION_STATSEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw32 ) )
			return Detail::cGameEnumValueNamesRaw32[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fSESSION_STATSStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames32 ); ++i )
		{
			if( Detail::cGameEnumValueNames32[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fSESSION_STATSStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fSESSION_STATSStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tSESSION_STATS" );
		return value;
	}
	u32 fSESSION_STATSValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw32 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw32[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fSESSION_STATSValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fSESSION_STATSValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tSESSION_STATS" );
		return value;
	}
	const tStringPtr& fCOMBOEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames33 ) )
			return Detail::cGameEnumValueNames33[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCOMBOEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw33 ) )
			return Detail::cGameEnumValueNamesRaw33[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCOMBOStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames33 ); ++i )
		{
			if( Detail::cGameEnumValueNames33[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCOMBOStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCOMBOStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCOMBO" );
		return value;
	}
	u32 fCOMBOValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw33 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw33[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCOMBOValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCOMBOValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCOMBO" );
		return value;
	}
	const tStringPtr& fCHALLENGE_MODEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames34 ) )
			return Detail::cGameEnumValueNames34[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCHALLENGE_MODEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw34 ) )
			return Detail::cGameEnumValueNamesRaw34[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCHALLENGE_MODEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames34 ); ++i )
		{
			if( Detail::cGameEnumValueNames34[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCHALLENGE_MODEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCHALLENGE_MODEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCHALLENGE_MODE" );
		return value;
	}
	u32 fCHALLENGE_MODEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw34 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw34[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCHALLENGE_MODEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCHALLENGE_MODEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCHALLENGE_MODE" );
		return value;
	}
	const tStringPtr& fDLCEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames35 ) )
			return Detail::cGameEnumValueNames35[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fDLCEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw35 ) )
			return Detail::cGameEnumValueNamesRaw35[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fDLCStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames35 ); ++i )
		{
			if( Detail::cGameEnumValueNames35[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fDLCStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fDLCStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tDLC" );
		return value;
	}
	u32 fDLCValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw35 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw35[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fDLCValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fDLCValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tDLC" );
		return value;
	}
	const tStringPtr& fDAMAGE_TRANSFER_MULTIPLIEREnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames36 ) )
			return Detail::cGameEnumValueNames36[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fDAMAGE_TRANSFER_MULTIPLIEREnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw36 ) )
			return Detail::cGameEnumValueNamesRaw36[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fDAMAGE_TRANSFER_MULTIPLIERStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames36 ); ++i )
		{
			if( Detail::cGameEnumValueNames36[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fDAMAGE_TRANSFER_MULTIPLIERStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fDAMAGE_TRANSFER_MULTIPLIERStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tDAMAGE_TRANSFER_MULTIPLIER" );
		return value;
	}
	u32 fDAMAGE_TRANSFER_MULTIPLIERValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw36 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw36[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fDAMAGE_TRANSFER_MULTIPLIERValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fDAMAGE_TRANSFER_MULTIPLIERValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tDAMAGE_TRANSFER_MULTIPLIER" );
		return value;
	}
	const tStringPtr& fTARGET_INDEXEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames37 ) )
			return Detail::cGameEnumValueNames37[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fTARGET_INDEXEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw37 ) )
			return Detail::cGameEnumValueNamesRaw37[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fTARGET_INDEXStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames37 ); ++i )
		{
			if( Detail::cGameEnumValueNames37[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fTARGET_INDEXStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fTARGET_INDEXStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tTARGET_INDEX" );
		return value;
	}
	u32 fTARGET_INDEXValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw37 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw37[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fTARGET_INDEXValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fTARGET_INDEXValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tTARGET_INDEX" );
		return value;
	}
	const tStringPtr& fLOGIC_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames38 ) )
			return Detail::cGameEnumValueNames38[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fLOGIC_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw38 ) )
			return Detail::cGameEnumValueNamesRaw38[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fLOGIC_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames38 ); ++i )
		{
			if( Detail::cGameEnumValueNames38[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fLOGIC_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fLOGIC_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tLOGIC_TYPE" );
		return value;
	}
	u32 fLOGIC_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw38 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw38[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fLOGIC_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fLOGIC_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tLOGIC_TYPE" );
		return value;
	}
	const tStringPtr& fPICKUPSEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames39 ) )
			return Detail::cGameEnumValueNames39[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fPICKUPSEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw39 ) )
			return Detail::cGameEnumValueNamesRaw39[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fPICKUPSStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames39 ); ++i )
		{
			if( Detail::cGameEnumValueNames39[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fPICKUPSStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fPICKUPSStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tPICKUPS" );
		return value;
	}
	u32 fPICKUPSValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw39 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw39[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fPICKUPSValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fPICKUPSValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tPICKUPS" );
		return value;
	}
	const tStringPtr& fCONTROLSEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames40 ) )
			return Detail::cGameEnumValueNames40[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCONTROLSEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw40 ) )
			return Detail::cGameEnumValueNamesRaw40[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCONTROLSStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames40 ); ++i )
		{
			if( Detail::cGameEnumValueNames40[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCONTROLSStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCONTROLSStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCONTROLS" );
		return value;
	}
	u32 fCONTROLSValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw40 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw40[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCONTROLSValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCONTROLSValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCONTROLS" );
		return value;
	}
	const tStringPtr& fCONTROLS_SETTINGEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames41 ) )
			return Detail::cGameEnumValueNames41[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCONTROLS_SETTINGEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw41 ) )
			return Detail::cGameEnumValueNamesRaw41[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCONTROLS_SETTINGStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames41 ); ++i )
		{
			if( Detail::cGameEnumValueNames41[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCONTROLS_SETTINGStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCONTROLS_SETTINGStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCONTROLS_SETTING" );
		return value;
	}
	u32 fCONTROLS_SETTINGValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw41 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw41[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCONTROLS_SETTINGValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCONTROLS_SETTINGValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCONTROLS_SETTING" );
		return value;
	}
	const tStringPtr& fPERSONALITY_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames42 ) )
			return Detail::cGameEnumValueNames42[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fPERSONALITY_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw42 ) )
			return Detail::cGameEnumValueNamesRaw42[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fPERSONALITY_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames42 ); ++i )
		{
			if( Detail::cGameEnumValueNames42[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fPERSONALITY_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fPERSONALITY_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tPERSONALITY_TYPE" );
		return value;
	}
	u32 fPERSONALITY_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw42 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw42[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fPERSONALITY_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fPERSONALITY_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tPERSONALITY_TYPE" );
		return value;
	}
	const tStringPtr& fCREWMANEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames43 ) )
			return Detail::cGameEnumValueNames43[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fCREWMANEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw43 ) )
			return Detail::cGameEnumValueNamesRaw43[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fCREWMANStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames43 ); ++i )
		{
			if( Detail::cGameEnumValueNames43[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fCREWMANStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fCREWMANStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tCREWMAN" );
		return value;
	}
	u32 fCREWMANValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw43 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw43[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fCREWMANValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fCREWMANValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tCREWMAN" );
		return value;
	}
	const tStringPtr& fFIREEFFECTOVERRIDEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames44 ) )
			return Detail::cGameEnumValueNames44[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fFIREEFFECTOVERRIDEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw44 ) )
			return Detail::cGameEnumValueNamesRaw44[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fFIREEFFECTOVERRIDEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames44 ); ++i )
		{
			if( Detail::cGameEnumValueNames44[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fFIREEFFECTOVERRIDEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fFIREEFFECTOVERRIDEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tFIREEFFECTOVERRIDE" );
		return value;
	}
	u32 fFIREEFFECTOVERRIDEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw44 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw44[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fFIREEFFECTOVERRIDEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fFIREEFFECTOVERRIDEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tFIREEFFECTOVERRIDE" );
		return value;
	}
	const tStringPtr& fVEHICLE_MOTION_FXEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames45 ) )
			return Detail::cGameEnumValueNames45[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fVEHICLE_MOTION_FXEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw45 ) )
			return Detail::cGameEnumValueNamesRaw45[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fVEHICLE_MOTION_FXStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames45 ); ++i )
		{
			if( Detail::cGameEnumValueNames45[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fVEHICLE_MOTION_FXStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fVEHICLE_MOTION_FXStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tVEHICLE_MOTION_FX" );
		return value;
	}
	u32 fVEHICLE_MOTION_FXValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw45 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw45[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fVEHICLE_MOTION_FXValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fVEHICLE_MOTION_FXValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tVEHICLE_MOTION_FX" );
		return value;
	}
	const tStringPtr& fKILL_FLAGEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames46 ) )
			return Detail::cGameEnumValueNames46[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fKILL_FLAGEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw46 ) )
			return Detail::cGameEnumValueNamesRaw46[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fKILL_FLAGStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames46 ); ++i )
		{
			if( Detail::cGameEnumValueNames46[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fKILL_FLAGStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fKILL_FLAGStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tKILL_FLAG" );
		return value;
	}
	u32 fKILL_FLAGValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw46 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw46[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fKILL_FLAGValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fKILL_FLAGValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tKILL_FLAG" );
		return value;
	}
	const tStringPtr& fLEADERBOARD_COLUMN_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames47 ) )
			return Detail::cGameEnumValueNames47[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fLEADERBOARD_COLUMN_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw47 ) )
			return Detail::cGameEnumValueNamesRaw47[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fLEADERBOARD_COLUMN_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames47 ); ++i )
		{
			if( Detail::cGameEnumValueNames47[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fLEADERBOARD_COLUMN_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fLEADERBOARD_COLUMN_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tLEADERBOARD_COLUMN_TYPE" );
		return value;
	}
	u32 fLEADERBOARD_COLUMN_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw47 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw47[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fLEADERBOARD_COLUMN_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fLEADERBOARD_COLUMN_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tLEADERBOARD_COLUMN_TYPE" );
		return value;
	}
	const tStringPtr& fPLATFORM_TYPEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames48 ) )
			return Detail::cGameEnumValueNames48[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fPLATFORM_TYPEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw48 ) )
			return Detail::cGameEnumValueNamesRaw48[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fPLATFORM_TYPEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames48 ); ++i )
		{
			if( Detail::cGameEnumValueNames48[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fPLATFORM_TYPEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fPLATFORM_TYPEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tPLATFORM_TYPE" );
		return value;
	}
	u32 fPLATFORM_TYPEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw48 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw48[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fPLATFORM_TYPEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fPLATFORM_TYPEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tPLATFORM_TYPE" );
		return value;
	}
	const tStringPtr& fDEBRIS_BEHAVIOREnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames49 ) )
			return Detail::cGameEnumValueNames49[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fDEBRIS_BEHAVIOREnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw49 ) )
			return Detail::cGameEnumValueNamesRaw49[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fDEBRIS_BEHAVIORStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames49 ); ++i )
		{
			if( Detail::cGameEnumValueNames49[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fDEBRIS_BEHAVIORStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fDEBRIS_BEHAVIORStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tDEBRIS_BEHAVIOR" );
		return value;
	}
	u32 fDEBRIS_BEHAVIORValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw49 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw49[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fDEBRIS_BEHAVIORValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fDEBRIS_BEHAVIORValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tDEBRIS_BEHAVIOR" );
		return value;
	}
	const tStringPtr& fAVATAR_AWARDSEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames50 ) )
			return Detail::cGameEnumValueNames50[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fAVATAR_AWARDSEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw50 ) )
			return Detail::cGameEnumValueNamesRaw50[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fAVATAR_AWARDSStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames50 ); ++i )
		{
			if( Detail::cGameEnumValueNames50[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fAVATAR_AWARDSStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fAVATAR_AWARDSStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tAVATAR_AWARDS" );
		return value;
	}
	u32 fAVATAR_AWARDSValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw50 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw50[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fAVATAR_AWARDSValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fAVATAR_AWARDSValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tAVATAR_AWARDS" );
		return value;
	}
	const tStringPtr& fLANGUAGEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames51 ) )
			return Detail::cGameEnumValueNames51[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fLANGUAGEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw51 ) )
			return Detail::cGameEnumValueNamesRaw51[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fLANGUAGEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames51 ); ++i )
		{
			if( Detail::cGameEnumValueNames51[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fLANGUAGEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fLANGUAGEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tLANGUAGE" );
		return value;
	}
	u32 fLANGUAGEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw51 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw51[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fLANGUAGEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fLANGUAGEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tLANGUAGE" );
		return value;
	}
	const tStringPtr& fREGIONEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames52 ) )
			return Detail::cGameEnumValueNames52[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fREGIONEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw52 ) )
			return Detail::cGameEnumValueNamesRaw52[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fREGIONStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames52 ); ++i )
		{
			if( Detail::cGameEnumValueNames52[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fREGIONStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fREGIONStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tREGION" );
		return value;
	}
	u32 fREGIONValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw52 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw52[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fREGIONValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fREGIONValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tREGION" );
		return value;
	}
	const tStringPtr& fLOCALEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames53 ) )
			return Detail::cGameEnumValueNames53[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fLOCALEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw53 ) )
			return Detail::cGameEnumValueNamesRaw53[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fLOCALEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames53 ); ++i )
		{
			if( Detail::cGameEnumValueNames53[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fLOCALEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fLOCALEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tLOCALE" );
		return value;
	}
	u32 fLOCALEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw53 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw53[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fLOCALEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fLOCALEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tLOCALE" );
		return value;
	}
	const tStringPtr& fMOBILE_MINIGAMEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames54 ) )
			return Detail::cGameEnumValueNames54[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fMOBILE_MINIGAMEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw54 ) )
			return Detail::cGameEnumValueNamesRaw54[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fMOBILE_MINIGAMEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames54 ); ++i )
		{
			if( Detail::cGameEnumValueNames54[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fMOBILE_MINIGAMEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fMOBILE_MINIGAMEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tMOBILE_MINIGAME" );
		return value;
	}
	u32 fMOBILE_MINIGAMEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw54 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw54[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fMOBILE_MINIGAMEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fMOBILE_MINIGAMEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tMOBILE_MINIGAME" );
		return value;
	}
	const tStringPtr& fGAME_CONTROLSEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames55 ) )
			return Detail::cGameEnumValueNames55[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fGAME_CONTROLSEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw55 ) )
			return Detail::cGameEnumValueNamesRaw55[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fGAME_CONTROLSStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames55 ); ++i )
		{
			if( Detail::cGameEnumValueNames55[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fGAME_CONTROLSStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fGAME_CONTROLSStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tGAME_CONTROLS" );
		return value;
	}
	u32 fGAME_CONTROLSValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw55 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw55[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fGAME_CONTROLSValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fGAME_CONTROLSValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tGAME_CONTROLS" );
		return value;
	}
	const tStringPtr& fGAMECONTROLLER_MODEEnumToString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNames56 ) )
			return Detail::cGameEnumValueNames56[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	const tStringPtr& fGAMECONTROLLER_MODEEnumToValueString( u32 enumValue )
	{
		if( enumValue < array_length( Detail::cGameEnumValueNamesRaw56 ) )
			return Detail::cGameEnumValueNamesRaw56[ enumValue ];
		return tStringPtr::cNullPtr;
	}
	u32 fGAMECONTROLLER_MODEStringToEnum( const tStringPtr& enumString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNames56 ); ++i )
		{
			if( Detail::cGameEnumValueNames56[ i ] == enumString )
				return i;
		}
		return ~0u;
	}
	u32 fGAMECONTROLLER_MODEStringToRequiredEnum( const tStringPtr& enumString )
	{
		const u32 value = fGAMECONTROLLER_MODEStringToEnum( enumString );
		log_assert( value != ~0u, "Could not convert enum string '" << enumString << "' to tGAMECONTROLLER_MODE" );
		return value;
	}
	u32 fGAMECONTROLLER_MODEValueStringToEnum( const tStringPtr& enumValueString )
	{
		for( u32 i = 0; i < array_length( Detail::cGameEnumValueNamesRaw56 ); ++i )
		{
			if( Detail::cGameEnumValueNamesRaw56[ i ] == enumValueString )
				return i;
		}
		return ~0u;
	}
	u32 fGAMECONTROLLER_MODEValueStringToRequiredEnum( const tStringPtr& enumValueString )
	{
		const u32 value = fGAMECONTROLLER_MODEValueStringToEnum( enumValueString );
		log_assert( value != ~0u, "Could not convert enum value string '" << enumValueString << "' to tGAMECONTROLLER_MODE" );
		return value;
	}

}}
