#ifndef __GameFlags__
#define __GameFlags__

// Auto-generated file containing the project's list of game flags and game enumerations.
// These values are exposed to the editor, script, and code.
// DO NOT EDIT THIS FILE MANUALLY

namespace Sig { namespace GameFlags
{

	// Flags...

	static const u32 cFLAG_GROUND = ( 1u << 0u );
	static const u32 cFLAG_SELECTABLE = ( 1u << 1u );
	static const u32 cFLAG_DUMMY = ( 1u << 2u );
	static const u32 cFLAG_COLLISION = ( 1u << 3u );
	static const u32 cFLAG_CONTEXT_ANIMATION = ( 1u << 4u );
	static const u32 cFLAG_SAVEABLE = ( 1u << 5u );
	static const u32 cFLAG_PARK_VEHICLE = ( 1u << 6u );
	static const u32 cFLAG_DROP_CARGO = ( 1u << 7u );
	static const u32 cFLAG_TURRET_BASE = ( 1u << 8u );
	static const u32 cFLAG_PROXY_COLLISION_ROOT = ( 1u << 9u );
	static const u32 cFLAG_PROXY_COLLISION_SHAPE = ( 1u << 10u );
	static const u32 cFLAG_DEFAULT_END_TRANSITION = ( 1u << 11u );
	static const u32 cFLAG_DONT_STOP_BULLETS = ( 1u << 12u );
	static const u32 cFLAG_VEHICLE_FACE_PATH_DIRECTION = ( 1u << 13u );
	static const u32 cFLAG_DONT_INHERIT_STATE_CHANGE = ( 1u << 14u );
	static const u32 cFLAG_SPAWN_AS_DEBRIS = ( 1u << 15u );
	static const u32 cFLAG_INWARD_COLLISION = ( 1u << 16u );
	static const u32 cFLAG_DOESNT_END_IN_GOALBOX = ( 1u << 17u );
	static const u32 cFLAG_LOCKED = ( 1u << 18u );
	static const u32 cFLAG_SHOW_RANGE_RINGS = ( 1u << 19u );
	static const u32 cFLAG_WALL_VOLUME = ( 1u << 20u );
	static const u32 cFLAG_WALL_PLACEMENT_ZONE = ( 1u << 21u );
	static const u32 cFLAG_DETACH_FLYING_BASE = ( 1u << 22u );
	static const u32 cFLAG_DONT_INSTA_DESTROY = ( 1u << 23u );
	static const u32 cFLAG_MINIGAME_UNIT = ( 1u << 24u );
	static const u32 cFLAG_DOESNT_TAKE_DAMAGE = ( 1u << 25u );
	static const u32 cFLAG_INSTA_DESTROY = ( 1u << 26u );
	static const u32 cFLAG_FOCAL_PROMPT = ( 1u << 27u );
	static const u32 cFLAG_BULLET_PROOF = ( 1u << 28u );
	static const u32 cFLAG_STOP_AI = ( 1u << 29u );
	static const u32 cFLAG_LOOP = ( 1u << 30u );
	static const u32 cFLAG_COUNT = 31;

	// Game Events...

	static const u32 cEVENT_INVALID = 0u;
	static const u32 cEVENT_ANIMATION = 1u;
	static const u32 cEVENT_FALL = 2u;
	static const u32 cEVENT_LAND = 3u;
	static const u32 cEVENT_USER_CONTROL_BEGIN = 4u;
	static const u32 cEVENT_USER_CONTROL_END = 5u;
	static const u32 cEVENT_TARGET_ACQUIRED = 6u;
	static const u32 cEVENT_RELOAD_START = 7u;
	static const u32 cEVENT_FOLLOW_PATH = 8u;
	static const u32 cEVENT_REACHED_END_OF_PATH = 9u;
	static const u32 cEVENT_WAYPOINT_REACHED = 10u;
	static const u32 cEVENT_USER_FIRE_BEGIN = 11u;
	static const u32 cEVENT_USER_FIRE_END = 12u;
	static const u32 cEVENT_UNIT_DESTROYED = 13u;
	static const u32 cEVENT_UNIT_ZERO_HIT_POINTS = 14u;
	static const u32 cEVENT_USER_THROW_GRENADE = 15u;
	static const u32 cEVENT_USER_MELEE = 16u;
	static const u32 cEVENT_PATH_WAIT = 17u;
	static const u32 cEVENT_CONTEXT_ANIM_START = 18u;
	static const u32 cEVENT_CONTEXT_ANIM_END = 19u;
	static const u32 cEVENT_UNIT_ALIGNED = 20u;
	static const u32 cEVENT_REAPPLY_MOTION_STATE = 21u;
	static const u32 cEVENT_BARRAGE_ENDED = 22u;
	static const u32 cEVENT_TARGET_LOST = 23u;
	static const u32 cEVENT_UPGRADE_BEGIN = 24u;
	static const u32 cEVENT_REPAIR_BEGIN = 25u;
	static const u32 cEVENT_UNIT_DAMAGED = 26u;
	static const u32 cEVENT_UNIT_STATE_CHANGED = 27u;
	static const u32 cEVENT_WEAPON_ACTION = 28u;
	static const u32 cEVENT_RANDOM_CHARACTER_ANIM = 29u;
	static const u32 cEVENT_ENTER_VEHICLE = 30u;
	static const u32 cEVENT_EXIT_VEHICLE = 31u;
	static const u32 cEVENT_TUTORIAL_EVENT = 32u;
	static const u32 cEVENT_CARGO_DROP_BEGIN = 33u;
	static const u32 cEVENT_CARGO_DROP_SPAWN = 34u;
	static const u32 cEVENT_CARGO_DROP_END = 35u;
	static const u32 cEVENT_CARGO_DROP_READY = 36u;
	static const u32 cEVENT_CANCEL_RELOAD = 37u;
	static const u32 cEVENT_REAPPLY_ONESHOT_MOTION_STATE = 38u;
	static const u32 cEVENT_GAME_EFFECT = 39u;
	static const u32 cEVENT_DO_SPECIAL_MOVE = 40u;
	static const u32 cEVENT_CONTROL_OVERRIDE_BEGIN = 41u;
	static const u32 cEVENT_CONTROL_OVERRIDE_END = 42u;
	static const u32 cEVENT_COUNT = 43;

	const tStringPtr& fGameEventToString( u32 eventValue );      // returns "GAME_EVENT_VALUE_NAME"
	u32 fGameEventToValue( const tStringPtr& name );  

	// KeyFrame Events...

	static const u32 cKEYFRAME_EVENT_DEFAULT = 0u;
	static const u32 cKEYFRAME_EVENT_EFFECT = 1u;
	static const u32 cKEYFRAME_EVENT_SPAWN_CARTRIDGE = 2u;
	static const u32 cKEYFRAME_EVENT_EJECT_CARTRIDGE = 3u;
	static const u32 cKEYFRAME_EVENT_DOOR_POP = 4u;
	static const u32 cKEYFRAME_EVENT_DOOR_CLOSE = 5u;
	static const u32 cKEYFRAME_EVENT_TOGGLE_PROPS = 6u;
	static const u32 cKEYFRAME_EVENT_FIRE_WEAPON = 7u;
	static const u32 cKEYFRAME_EVENT_ENGINE_START = 8u;
	static const u32 cKEYFRAME_EVENT_CHANGE_STATE = 9u;
	static const u32 cKEYFRAME_EVENT_REAL_DEATH = 10u;
	static const u32 cKEYFRAME_EVENT_COUNT = 11;

	// Enumerated Types...

	static const u32 cENUM_TEAM = 1u;
	static const u32 cENUM_UNIT_TYPE = 2u;
	static const u32 cENUM_UNIT_LEVEL_DEPRECATED = 3u;
	static const u32 cENUM_UNIT_ID = 4u;
	static const u32 cENUM_BUILD_SITE = 5u;
	static const u32 cENUM_MAP_TYPE = 6u;
	static const u32 cENUM_ARTILLERY_SOLDIER = 8u;
	static const u32 cENUM_COUNTRY = 9u;
	static const u32 cENUM_SPECIAL_LEVEL_OBJECT = 11u;
	static const u32 cENUM_DAMAGE_TYPE = 12u;
	static const u32 cENUM_TRIGGERED_BREAK_STATE = 13u;
	static const u32 cENUM_DEBRIS_TYPE = 14u;
	static const u32 cENUM_CONTEXT_ANIM_TYPE = 15u;
	static const u32 cENUM_GROUND_TYPE_DEPRICATED = 16u;
	static const u32 cENUM_LEVEL_EVENT = 18u;
	static const u32 cENUM_LINKED_HITPOINTS = 19u;
	static const u32 cENUM_TRACER_TYPE = 20u;
	static const u32 cENUM_DIFFICULTY = 21u;
	static const u32 cENUM_CARGO_INDEX = 22u;
	static const u32 cENUM_WEAPON_INDEX = 23u;
	static const u32 cENUM_THROTTLE = 24u;
	static const u32 cENUM_WEAPON_ACTION = 25u;
	static const u32 cENUM_SURFACE_TYPE = 26u;
	static const u32 cENUM_CHARACTER_PROPS = 27u;
	static const u32 cENUM_WEAPON_STATE = 29u;
	static const u32 cENUM_AUDIO_TYPE_ID = 30u;
	static const u32 cENUM_EXTRA_SEAT_INDEX = 31u;
	static const u32 cENUM_WHEEL_INDEX = 32u;
	static const u32 cENUM_TUTORIAL_EVENT = 33u;
	static const u32 cENUM_PERSISTENT_EFFECT_BEHAVIOR = 34u;
	static const u32 cENUM_SPECIAL_ENTRANCE = 35u;
	static const u32 cENUM_ACHIEVEMENTS = 36u;
	static const u32 cENUM_SESSION_STATS = 37u;
	static const u32 cENUM_COMBO = 38u;
	static const u32 cENUM_CHALLENGE_MODE = 39u;
	static const u32 cENUM_DLC = 40u;
	static const u32 cENUM_DAMAGE_TRANSFER_MULTIPLIER = 41u;
	static const u32 cENUM_TARGET_INDEX = 42u;
	static const u32 cENUM_LOGIC_TYPE = 43u;
	static const u32 cENUM_PICKUPS = 44u;
	static const u32 cENUM_CONTROLS = 45u;
	static const u32 cENUM_CONTROLS_SETTING = 46u;
	static const u32 cENUM_PERSONALITY_TYPE = 47u;
	static const u32 cENUM_CREWMAN = 48u;
	static const u32 cENUM_FIREEFFECTOVERRIDE = 49u;
	static const u32 cENUM_VEHICLE_MOTION_FX = 50u;
	static const u32 cENUM_KILL_FLAG = 51u;
	static const u32 cENUM_LEADERBOARD_COLUMN_TYPE = 52u;
	static const u32 cENUM_PLATFORM_TYPE = 53u;
	static const u32 cENUM_DEBRIS_BEHAVIOR = 54u;
	static const u32 cENUM_AVATAR_AWARDS = 55u;
	static const u32 cENUM_LANGUAGE = 56u;
	static const u32 cENUM_REGION = 57u;
	static const u32 cENUM_LOCALE = 58u;
	static const u32 cENUM_MOBILE_MINIGAME = 59u;
	static const u32 cENUM_COUNT = 55;

	// Enumerated Type Values...

	enum tTEAM
	{
		cTEAM_NONE = 0u,
		cTEAM_RED = 1u,
		cTEAM_BLUE = 2u,
		cTEAM_COUNT = 3,
	};
	const tStringPtr& fTEAMEnumToString( u32 enumValue );      // returns "TEAM_VALUE_NAME"
	const tStringPtr& fTEAMEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fTEAMStringToEnum( const tStringPtr& enumString );
	u32 fTEAMValueStringToEnum( const tStringPtr& enumValueString );

	enum tUNIT_TYPE
	{
		cUNIT_TYPE_NONE = 0u,
		cUNIT_TYPE_TURRET = 1u,
		cUNIT_TYPE_VEHICLE = 2u,
		cUNIT_TYPE_INFANTRY = 3u,
		cUNIT_TYPE_AIR = 4u,
		cUNIT_TYPE_BOSS = 5u,
		cUNIT_TYPE_LIGHT_PROP = 6u,
		cUNIT_TYPE_HEAVY_PROP = 7u,
		cUNIT_TYPE_I_NEED_A_UNIT_ID_AND_COUNTRY = 8u,
		cUNIT_TYPE_I_NEED_A_BREAKABLE_UNIT_ID_AND_DEFAULT_COUNTRY = 9u,
		cUNIT_TYPE_TARGET = 10u,
		cUNIT_TYPE_TOY_BOX = 11u,
		cUNIT_TYPE_PICKUP = 12u,
		cUNIT_TYPE_PASSENGER = 13u,
		cUNIT_TYPE_COUNT = 14,
	};
	const tStringPtr& fUNIT_TYPEEnumToString( u32 enumValue );      // returns "UNIT_TYPE_VALUE_NAME"
	const tStringPtr& fUNIT_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fUNIT_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fUNIT_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tUNIT_LEVEL_DEPRECATED
	{
		cUNIT_LEVEL_DEPRECATED_1 = 0u,
		cUNIT_LEVEL_DEPRECATED_2 = 1u,
		cUNIT_LEVEL_DEPRECATED_3 = 2u,
		cUNIT_LEVEL_DEPRECATED_4 = 3u,
		cUNIT_LEVEL_DEPRECATED_5 = 4u,
		cUNIT_LEVEL_DEPRECATED_6 = 5u,
		cUNIT_LEVEL_DEPRECATED_COUNT = 6,
	};
	const tStringPtr& fUNIT_LEVEL_DEPRECATEDEnumToString( u32 enumValue );      // returns "UNIT_LEVEL_DEPRECATED_VALUE_NAME"
	const tStringPtr& fUNIT_LEVEL_DEPRECATEDEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fUNIT_LEVEL_DEPRECATEDStringToEnum( const tStringPtr& enumString );
	u32 fUNIT_LEVEL_DEPRECATEDValueStringToEnum( const tStringPtr& enumValueString );

	enum tUNIT_ID
	{
		cUNIT_ID_NONE = 0u,
		cUNIT_ID_TURRET_MG_01 = 1u,
		cUNIT_ID_TURRET_MG_02 = 2u,
		cUNIT_ID_TURRET_MG_03 = 3u,
		cUNIT_ID_TURRET_MORTAR_01 = 4u,
		cUNIT_ID_TURRET_MORTAR_02 = 5u,
		cUNIT_ID_TURRET_MORTAR_03 = 6u,
		cUNIT_ID_TURRET_AT_01 = 7u,
		cUNIT_ID_TURRET_AT_02 = 8u,
		cUNIT_ID_TURRET_AT_03 = 9u,
		cUNIT_ID_TURRET_ARTY_01 = 10u,
		cUNIT_ID_TURRET_ARTY_02 = 11u,
		cUNIT_ID_TURRET_ARTY_03 = 12u,
		cUNIT_ID_TURRET_AA_01 = 13u,
		cUNIT_ID_TURRET_AA_02 = 14u,
		cUNIT_ID_TURRET_AA_03 = 15u,
		cUNIT_ID_TURRET_FLAME_01 = 16u,
		cUNIT_ID_TURRET_FLAME_02 = 17u,
		cUNIT_ID_TURRET_FLAME_03 = 18u,
		cUNIT_ID_INFANTRY_BASIC_01 = 19u,
		cUNIT_ID_INFANTRY_BASIC_02 = 20u,
		cUNIT_ID_INFANTRY_BASIC_03 = 21u,
		cUNIT_ID_INFANTRY_BASIC_04 = 22u,
		cUNIT_ID_INFANTRY_COWBOY_01 = 23u,
		cUNIT_ID_INFANTRY_ELITE_01 = 24u,
		cUNIT_ID_INFANTRY_ELITE_02 = 25u,
		cUNIT_ID_INFANTRY_MOBILE_01 = 26u,
		cUNIT_ID_INFANTRY_MOBILE_02 = 27u,
		cUNIT_ID_INFANTRY_ATV = 28u,
		cUNIT_ID_CAR_01 = 29u,
		cUNIT_ID_APC_MG_01 = 30u,
		cUNIT_ID_APC_AT_01 = 31u,
		cUNIT_ID_APC_ARTY_01 = 32u,
		cUNIT_ID_APC_AA_01 = 33u,
		cUNIT_ID_APC_IFV_01 = 34u,
		cUNIT_ID_TANK_MEDIUM_01 = 35u,
		cUNIT_ID_TANK_HEAVY_01 = 36u,
		cUNIT_ID_HELO_TRANSPORT_01 = 37u,
		cUNIT_ID_HELO_TRANSPORT_02 = 38u,
		cUNIT_ID_HELO_ATTACK_01 = 39u,
		cUNIT_ID_PLANE_TRANSPORT_01 = 40u,
		cUNIT_ID_PLANE_FIGHTER_01 = 41u,
		cUNIT_ID_PLANE_FIGHTER_02 = 42u,
		cUNIT_ID_PLANE_BOMBER_01 = 43u,
		cUNIT_ID_PROP_1 = 44u,
		cUNIT_ID_PROP_2 = 45u,
		cUNIT_ID_PROP_3 = 46u,
		cUNIT_ID_PROP_4 = 47u,
		cUNIT_ID_PROP_5 = 48u,
		cUNIT_ID_PROP_6 = 49u,
		cUNIT_ID_PROP_7 = 50u,
		cUNIT_ID_PROP_8 = 51u,
		cUNIT_ID_PROP_9 = 52u,
		cUNIT_ID_PROP_10 = 53u,
		cUNIT_ID_INFANTRY_GENERATOR = 54u,
		cUNIT_ID_ARMOR_GENERATOR = 55u,
		cUNIT_ID_AIR_GENERATOR = 56u,
		cUNIT_ID_BOSS_MI12 = 57u,
		cUNIT_ID_WALL_WIRE = 58u,
		cUNIT_ID_BOSS_MI12_AA = 59u,
		cUNIT_ID_BOSS_MI12_MG = 60u,
		cUNIT_ID_BOSS_MI12_ROTOR = 61u,
		cUNIT_ID_BOSS_TANK = 62u,
		cUNIT_ID_BOSS_TANK_TURRET = 63u,
		cUNIT_ID_BOSS_TANK_ENGINE = 64u,
		cUNIT_ID_BOSS_SUB = 65u,
		cUNIT_ID_BOSS_SUB_TOWER = 66u,
		cUNIT_ID_BOSS_SUB_SILOS = 67u,
		cUNIT_ID_SUBBOSS_TANK_01 = 68u,
		cUNIT_ID_SUBBOSS_TANK_02 = 69u,
		cUNIT_ID_SUBBOSS_TANK_03 = 70u,
		cUNIT_ID_SUBBOSS_TANK_04 = 71u,
		cUNIT_ID_SUBBOSS_HELICOPTER_01 = 72u,
		cUNIT_ID_INFANTRY_OFFICER_01 = 73u,
		cUNIT_ID_EXTRA_VEHICLE_1 = 74u,
		cUNIT_ID_EXTRA_VEHICLE_2 = 75u,
		cUNIT_ID_EXTRA_GYROCOPTER = 76u,
		cUNIT_ID_EXTRA_PAPAGALLO = 77u,
		cUNIT_ID_BOSS_FLYINGTANK = 78u,
		cUNIT_ID_BOSS_FLYINGTANK_AA = 79u,
		cUNIT_ID_BOSS_FLYINGTANK_MG = 80u,
		cUNIT_ID_TANK_SCREW_01 = 81u,
		cUNIT_ID_TARGET_100 = 82u,
		cUNIT_ID_TARGET_200 = 83u,
		cUNIT_ID_TARGET_300 = 84u,
		cUNIT_ID_BUILD_SITE = 85u,
		cUNIT_ID_BARRAGE_ARTILLERY = 86u,
		cUNIT_ID_BARRAGE_RAMBO = 87u,
		cUNIT_ID_BARRAGE_AC130_MG = 88u,
		cUNIT_ID_BARRAGE_AC130_CANNON = 89u,
		cUNIT_ID_BARRAGE_AC130_AUTOGUN = 90u,
		cUNIT_ID_TANK_ROCKET_01 = 91u,
		cUNIT_ID_TANK_NUKEPROOF_01 = 92u,
		cUNIT_ID_BARRAGE_AC130 = 93u,
		cUNIT_ID_BARRAGE_F117 = 94u,
		cUNIT_ID_FLYINGTANK_AIRBASE = 95u,
		cUNIT_ID_INFANTRY_CAPTAIN_01 = 96u,
		cUNIT_ID_INFANTRY_CAPTAIN_02 = 97u,
		cUNIT_ID_INFANTRY_CAPTAIN_03 = 98u,
		cUNIT_ID_INFANTRY_ATV_FULL_PHYSICS = 99u,
		cUNIT_ID_CAR_01_FULL_PHYSICS = 100u,
		cUNIT_ID_BOSS_FLYINGTANK_WEAKPOINT = 101u,
		cUNIT_ID_TOY_BOX = 102u,
		cUNIT_ID_FLY_SMALL_01 = 103u,
		cUNIT_ID_FLY_MEDIUM_01 = 104u,
		cUNIT_ID_FLY_LARGE_01 = 105u,
		cUNIT_ID_FLY_GOLD_01 = 106u,
		cUNIT_ID_BATTERY_01 = 107u,
		cUNIT_ID_BATTERY_02 = 108u,
		cUNIT_ID_PASSENGER = 109u,
		cUNIT_ID_PASSENGER_01 = 110u,
		cUNIT_ID_BARRAGE_SPIN = 111u,
		cUNIT_ID_BATTERY_CHARGER = 112u,
		cUNIT_ID_EXPLODING_PROP_1 = 113u,
		cUNIT_ID_EXPLODING_PROP_2 = 114u,
		cUNIT_ID_EXPLODING_PROP_3 = 115u,
		cUNIT_ID_EXPLODING_PROP_4 = 116u,
		cUNIT_ID_EXPLODING_PROP_5 = 117u,
		cUNIT_ID_BOSS_SUPERTANK = 118u,
		cUNIT_ID_USA_BARRAGE_BOMBER = 119u,
		cUNIT_ID_USSR_BARRAGE_BOMBER = 120u,
		cUNIT_ID_INFANTRY_CYCLE = 121u,
		cUNIT_ID_HELO_SUPER_HORMONE = 122u,
		cUNIT_ID_SUPERTANK_PHALANX = 123u,
		cUNIT_ID_SUPERTANK_ROCKETS = 124u,
		cUNIT_ID_WHAC_PIG = 125u,
		cUNIT_ID_WHAC_BABUSHKA = 126u,
		cUNIT_ID_TANK_ROCKET_02 = 127u,
		cUNIT_ID_TRUCK_CONVOY_01 = 128u,
		cUNIT_ID_INFANTRY_CIVILIAN_01 = 129u,
		cUNIT_ID_HELO_TRANSPORT_CHOPLIFTER_01 = 130u,
		cUNIT_ID_HELO_CHOPLIFTER_01 = 131u,
		cUNIT_ID_PIG = 132u,
		cUNIT_ID_JET_PACK = 133u,
		cUNIT_ID_COUNT = 134,
	};
	const tStringPtr& fUNIT_IDEnumToString( u32 enumValue );      // returns "UNIT_ID_VALUE_NAME"
	const tStringPtr& fUNIT_IDEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fUNIT_IDStringToEnum( const tStringPtr& enumString );
	u32 fUNIT_IDValueStringToEnum( const tStringPtr& enumValueString );

	enum tBUILD_SITE
	{
		cBUILD_SITE_SMALL = 0u,
		cBUILD_SITE_LARGE = 1u,
		cBUILD_SITE_COUNT = 2,
	};
	const tStringPtr& fBUILD_SITEEnumToString( u32 enumValue );      // returns "BUILD_SITE_VALUE_NAME"
	const tStringPtr& fBUILD_SITEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fBUILD_SITEStringToEnum( const tStringPtr& enumString );
	u32 fBUILD_SITEValueStringToEnum( const tStringPtr& enumValueString );

	enum tMAP_TYPE
	{
		cMAP_TYPE_FRONTEND = 0u,
		cMAP_TYPE_CAMPAIGN = 1u,
		cMAP_TYPE_HEADTOHEAD = 2u,
		cMAP_TYPE_SURVIVAL = 3u,
		cMAP_TYPE_MINIGAME = 4u,
		cMAP_TYPE_DEVSINGLEPLAYER = 5u,
		cMAP_TYPE_COUNT = 6,
	};
	const tStringPtr& fMAP_TYPEEnumToString( u32 enumValue );      // returns "MAP_TYPE_VALUE_NAME"
	const tStringPtr& fMAP_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fMAP_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fMAP_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tARTILLERY_SOLDIER
	{
		cARTILLERY_SOLDIER_DEFAULT = 0u,
		cARTILLERY_SOLDIER_DYNAMIC = 1u,
		cARTILLERY_SOLDIER_INCONSEQUENTIAL = 2u,
		cARTILLERY_SOLDIER_COUNT = 3,
	};
	const tStringPtr& fARTILLERY_SOLDIEREnumToString( u32 enumValue );      // returns "ARTILLERY_SOLDIER_VALUE_NAME"
	const tStringPtr& fARTILLERY_SOLDIEREnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fARTILLERY_SOLDIERStringToEnum( const tStringPtr& enumString );
	u32 fARTILLERY_SOLDIERValueStringToEnum( const tStringPtr& enumValueString );

	enum tCOUNTRY
	{
		cCOUNTRY_DEFAULT = 0u,
		cCOUNTRY_USA = 1u,
		cCOUNTRY_USSR = 2u,
		cCOUNTRY_COUNT = 3,
	};
	const tStringPtr& fCOUNTRYEnumToString( u32 enumValue );      // returns "COUNTRY_VALUE_NAME"
	const tStringPtr& fCOUNTRYEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCOUNTRYStringToEnum( const tStringPtr& enumString );
	u32 fCOUNTRYValueStringToEnum( const tStringPtr& enumValueString );

	enum tSPECIAL_LEVEL_OBJECT
	{
		cSPECIAL_LEVEL_OBJECT_DEFAULT = 0u,
		cSPECIAL_LEVEL_OBJECT_BOSS = 1u,
		cSPECIAL_LEVEL_OBJECT_COUNT = 2,
	};
	const tStringPtr& fSPECIAL_LEVEL_OBJECTEnumToString( u32 enumValue );      // returns "SPECIAL_LEVEL_OBJECT_VALUE_NAME"
	const tStringPtr& fSPECIAL_LEVEL_OBJECTEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fSPECIAL_LEVEL_OBJECTStringToEnum( const tStringPtr& enumString );
	u32 fSPECIAL_LEVEL_OBJECTValueStringToEnum( const tStringPtr& enumValueString );

	enum tDAMAGE_TYPE
	{
		cDAMAGE_TYPE_NONE = 0u,
		cDAMAGE_TYPE_BULLET = 1u,
		cDAMAGE_TYPE_EXPLOSION = 2u,
		cDAMAGE_TYPE_IMPACT = 3u,
		cDAMAGE_TYPE_FIRE = 4u,
		cDAMAGE_TYPE_STAB = 5u,
		cDAMAGE_TYPE_AREA = 6u,
		cDAMAGE_TYPE_COUNT = 7,
	};
	const tStringPtr& fDAMAGE_TYPEEnumToString( u32 enumValue );      // returns "DAMAGE_TYPE_VALUE_NAME"
	const tStringPtr& fDAMAGE_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fDAMAGE_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fDAMAGE_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tTRIGGERED_BREAK_STATE
	{
		cTRIGGERED_BREAK_STATE_STATE0 = 0u,
		cTRIGGERED_BREAK_STATE_STATE1 = 1u,
		cTRIGGERED_BREAK_STATE_STATE2 = 2u,
		cTRIGGERED_BREAK_STATE_STATE3 = 3u,
		cTRIGGERED_BREAK_STATE_STATE4 = 4u,
		cTRIGGERED_BREAK_STATE_STATE5 = 5u,
		cTRIGGERED_BREAK_STATE_STATE6 = 6u,
		cTRIGGERED_BREAK_STATE_STATE7 = 7u,
		cTRIGGERED_BREAK_STATE_STATE8 = 8u,
		cTRIGGERED_BREAK_STATE_STATE9 = 9u,
		cTRIGGERED_BREAK_STATE_COUNT = 10,
	};
	const tStringPtr& fTRIGGERED_BREAK_STATEEnumToString( u32 enumValue );      // returns "TRIGGERED_BREAK_STATE_VALUE_NAME"
	const tStringPtr& fTRIGGERED_BREAK_STATEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fTRIGGERED_BREAK_STATEStringToEnum( const tStringPtr& enumString );
	u32 fTRIGGERED_BREAK_STATEValueStringToEnum( const tStringPtr& enumValueString );

	enum tDEBRIS_TYPE
	{
		cDEBRIS_TYPE_NONE = 0u,
		cDEBRIS_TYPE_CHARACTER = 1u,
		cDEBRIS_TYPE_SMALL = 2u,
		cDEBRIS_TYPE_MEDIUM = 3u,
		cDEBRIS_TYPE_LARGE = 4u,
		cDEBRIS_TYPE_SHELL_CASING = 5u,
		cDEBRIS_TYPE_EXPLODING_BARREL = 6u,
		cDEBRIS_TYPE_AIRPLANE_WRECKAGE = 7u,
		cDEBRIS_TYPE_COUNT = 8,
	};
	const tStringPtr& fDEBRIS_TYPEEnumToString( u32 enumValue );      // returns "DEBRIS_TYPE_VALUE_NAME"
	const tStringPtr& fDEBRIS_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fDEBRIS_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fDEBRIS_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tCONTEXT_ANIM_TYPE
	{
		cCONTEXT_ANIM_TYPE_NONE = 0u,
		cCONTEXT_ANIM_TYPE_BARBED_WIRE = 1u,
		cCONTEXT_ANIM_TYPE_JUMP_DIRECTION = 2u,
		cCONTEXT_ANIM_TYPE_LADDER_CLIMB = 3u,
		cCONTEXT_ANIM_TYPE_TELEPORT = 4u,
		cCONTEXT_ANIM_TYPE_STEP_UP = 5u,
		cCONTEXT_ANIM_TYPE_WALL_CLIMB = 6u,
		cCONTEXT_ANIM_TYPE_VAULT_OVER = 7u,
		cCONTEXT_ANIM_TYPE_COUNT = 8,
	};
	const tStringPtr& fCONTEXT_ANIM_TYPEEnumToString( u32 enumValue );      // returns "CONTEXT_ANIM_TYPE_VALUE_NAME"
	const tStringPtr& fCONTEXT_ANIM_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCONTEXT_ANIM_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fCONTEXT_ANIM_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tGROUND_TYPE_DEPRICATED
	{
		cGROUND_TYPE_DEPRICATED_NONE = 0u,
		cGROUND_TYPE_DEPRICATED_DIRT = 1u,
		cGROUND_TYPE_DEPRICATED_WATER = 2u,
		cGROUND_TYPE_DEPRICATED_MUD = 3u,
		cGROUND_TYPE_DEPRICATED_COUNT = 4,
	};
	const tStringPtr& fGROUND_TYPE_DEPRICATEDEnumToString( u32 enumValue );      // returns "GROUND_TYPE_DEPRICATED_VALUE_NAME"
	const tStringPtr& fGROUND_TYPE_DEPRICATEDEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fGROUND_TYPE_DEPRICATEDStringToEnum( const tStringPtr& enumString );
	u32 fGROUND_TYPE_DEPRICATEDValueStringToEnum( const tStringPtr& enumValueString );

	enum tLEVEL_EVENT
	{
		cLEVEL_EVENT_UNIT_DESTROYED = 0u,
		cLEVEL_EVENT_REACHED_GOAL = 1u,
		cLEVEL_EVENT_REACHED_END_OF_PATH = 2u,
		cLEVEL_EVENT_ZERO_HITPOINTS = 3u,
		cLEVEL_EVENT_BOSS_STAGE_CHANGED = 4u,
		cLEVEL_EVENT_COUNT = 5,
	};
	const tStringPtr& fLEVEL_EVENTEnumToString( u32 enumValue );      // returns "LEVEL_EVENT_VALUE_NAME"
	const tStringPtr& fLEVEL_EVENTEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fLEVEL_EVENTStringToEnum( const tStringPtr& enumString );
	u32 fLEVEL_EVENTValueStringToEnum( const tStringPtr& enumValueString );

	enum tLINKED_HITPOINTS
	{
		cLINKED_HITPOINTS_DIRECT = 0u,
		cLINKED_HITPOINTS_TRANSFER = 1u,
		cLINKED_HITPOINTS_ON_DESTROYED = 2u,
		cLINKED_HITPOINTS_DIRECT_AND_ON_DESTROYED = 3u,
		cLINKED_HITPOINTS_TRANSFER_ONLY_DIRECT = 4u,
		cLINKED_HITPOINTS_COUNT = 5,
	};
	const tStringPtr& fLINKED_HITPOINTSEnumToString( u32 enumValue );      // returns "LINKED_HITPOINTS_VALUE_NAME"
	const tStringPtr& fLINKED_HITPOINTSEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fLINKED_HITPOINTSStringToEnum( const tStringPtr& enumString );
	u32 fLINKED_HITPOINTSValueStringToEnum( const tStringPtr& enumValueString );

	enum tTRACER_TYPE
	{
		cTRACER_TYPE_SHELL_1 = 0u,
		cTRACER_TYPE_SHELL_2 = 1u,
		cTRACER_TYPE_SHELL_3 = 2u,
		cTRACER_TYPE_SHELL_4 = 3u,
		cTRACER_TYPE_BULLET_1 = 4u,
		cTRACER_TYPE_BULLET_2 = 5u,
		cTRACER_TYPE_BULLET_3 = 6u,
		cTRACER_TYPE_BULLET_4 = 7u,
		cTRACER_TYPE_BULLET_TRAIL_1 = 8u,
		cTRACER_TYPE_BULLET_TRAIL_2 = 9u,
		cTRACER_TYPE_BULLET_TRAIL_3 = 10u,
		cTRACER_TYPE_BULLET_TRAIL_4 = 11u,
		cTRACER_TYPE_ROCKET_1 = 12u,
		cTRACER_TYPE_ROCKET_2 = 13u,
		cTRACER_TYPE_ROCKET_3 = 14u,
		cTRACER_TYPE_ROCKET_4 = 15u,
		cTRACER_TYPE_COUNT = 16,
	};
	const tStringPtr& fTRACER_TYPEEnumToString( u32 enumValue );      // returns "TRACER_TYPE_VALUE_NAME"
	const tStringPtr& fTRACER_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fTRACER_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fTRACER_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tDIFFICULTY
	{
		cDIFFICULTY_CASUAL = 0u,
		cDIFFICULTY_NORMAL = 1u,
		cDIFFICULTY_HARD = 2u,
		cDIFFICULTY_ELITE = 3u,
		cDIFFICULTY_GENERAL = 4u,
		cDIFFICULTY_COUNT = 5,
	};
	const tStringPtr& fDIFFICULTYEnumToString( u32 enumValue );      // returns "DIFFICULTY_VALUE_NAME"
	const tStringPtr& fDIFFICULTYEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fDIFFICULTYStringToEnum( const tStringPtr& enumString );
	u32 fDIFFICULTYValueStringToEnum( const tStringPtr& enumValueString );

	enum tCARGO_INDEX
	{
		cCARGO_INDEX_1 = 0u,
		cCARGO_INDEX_2 = 1u,
		cCARGO_INDEX_3 = 2u,
		cCARGO_INDEX_4 = 3u,
		cCARGO_INDEX_5 = 4u,
		cCARGO_INDEX_COUNT = 5,
	};
	const tStringPtr& fCARGO_INDEXEnumToString( u32 enumValue );      // returns "CARGO_INDEX_VALUE_NAME"
	const tStringPtr& fCARGO_INDEXEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCARGO_INDEXStringToEnum( const tStringPtr& enumString );
	u32 fCARGO_INDEXValueStringToEnum( const tStringPtr& enumValueString );

	enum tWEAPON_INDEX
	{
		cWEAPON_INDEX_1 = 0u,
		cWEAPON_INDEX_2 = 1u,
		cWEAPON_INDEX_3 = 2u,
		cWEAPON_INDEX_4 = 3u,
		cWEAPON_INDEX_5 = 4u,
		cWEAPON_INDEX_6 = 5u,
		cWEAPON_INDEX_7 = 6u,
		cWEAPON_INDEX_8 = 7u,
		cWEAPON_INDEX_9 = 8u,
		cWEAPON_INDEX_10 = 9u,
		cWEAPON_INDEX_11 = 10u,
		cWEAPON_INDEX_12 = 11u,
		cWEAPON_INDEX_13 = 12u,
		cWEAPON_INDEX_14 = 13u,
		cWEAPON_INDEX_15 = 14u,
		cWEAPON_INDEX_16 = 15u,
		cWEAPON_INDEX_COUNT = 16,
	};
	const tStringPtr& fWEAPON_INDEXEnumToString( u32 enumValue );      // returns "WEAPON_INDEX_VALUE_NAME"
	const tStringPtr& fWEAPON_INDEXEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fWEAPON_INDEXStringToEnum( const tStringPtr& enumString );
	u32 fWEAPON_INDEXValueStringToEnum( const tStringPtr& enumValueString );

	enum tTHROTTLE
	{
		cTHROTTLE_0 = 0u,
		cTHROTTLE_1 = 1u,
		cTHROTTLE_2 = 2u,
		cTHROTTLE_3 = 3u,
		cTHROTTLE_4 = 4u,
		cTHROTTLE_5 = 5u,
		cTHROTTLE_6 = 6u,
		cTHROTTLE_7 = 7u,
		cTHROTTLE_8 = 8u,
		cTHROTTLE_9 = 9u,
		cTHROTTLE_10 = 10u,
		cTHROTTLE_COUNT = 11,
	};
	const tStringPtr& fTHROTTLEEnumToString( u32 enumValue );      // returns "THROTTLE_VALUE_NAME"
	const tStringPtr& fTHROTTLEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fTHROTTLEStringToEnum( const tStringPtr& enumString );
	u32 fTHROTTLEValueStringToEnum( const tStringPtr& enumValueString );

	enum tWEAPON_ACTION
	{
		cWEAPON_ACTION_FIRE = 0u,
		cWEAPON_ACTION_END_FIRE = 1u,
		cWEAPON_ACTION_FIRE_INTERNAL = 2u,
		cWEAPON_ACTION_END_FIRE_INTERNAL = 3u,
		cWEAPON_ACTION_ENABLE = 4u,
		cWEAPON_ACTION_DISABLE = 5u,
		cWEAPON_ACTION_ENABLE_INTERNAL = 6u,
		cWEAPON_ACTION_DISABLE_INTERNAL = 7u,
		cWEAPON_ACTION_COUNT = 8,
	};
	const tStringPtr& fWEAPON_ACTIONEnumToString( u32 enumValue );      // returns "WEAPON_ACTION_VALUE_NAME"
	const tStringPtr& fWEAPON_ACTIONEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fWEAPON_ACTIONStringToEnum( const tStringPtr& enumString );
	u32 fWEAPON_ACTIONValueStringToEnum( const tStringPtr& enumValueString );

	enum tSURFACE_TYPE
	{
		cSURFACE_TYPE_ARMOR_MAX = 0u,
		cSURFACE_TYPE_ARMOR_MIN = 1u,
		cSURFACE_TYPE_CEMENT = 2u,
		cSURFACE_TYPE_DIRT = 3u,
		cSURFACE_TYPE_FLESH = 4u,
		cSURFACE_TYPE_GLASS = 5u,
		cSURFACE_TYPE_GRASS = 6u,
		cSURFACE_TYPE_METAL_THICK = 7u,
		cSURFACE_TYPE_METAL_THIN = 8u,
		cSURFACE_TYPE_METAL_HOLLOW = 9u,
		cSURFACE_TYPE_SAND_BAG = 10u,
		cSURFACE_TYPE_WATER = 11u,
		cSURFACE_TYPE_WOOD = 12u,
		cSURFACE_TYPE_CLOTH = 13u,
		cSURFACE_TYPE_BARBWIRE = 14u,
		cSURFACE_TYPE_SNOW = 15u,
		cSURFACE_TYPE_INSECT_SKIN = 16u,
		cSURFACE_TYPE_COUNT = 17,
	};
	const tStringPtr& fSURFACE_TYPEEnumToString( u32 enumValue );      // returns "SURFACE_TYPE_VALUE_NAME"
	const tStringPtr& fSURFACE_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fSURFACE_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fSURFACE_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tCHARACTER_PROPS
	{
		cCHARACTER_PROPS_ROCKET_LAUNCHER = 0u,
		cCHARACTER_PROPS_PISTOL = 1u,
		cCHARACTER_PROPS_FLAG = 2u,
		cCHARACTER_PROPS_WALKIE_TALKIE = 3u,
		cCHARACTER_PROPS_REMOTE = 4u,
		cCHARACTER_PROPS_RIFLE = 5u,
		cCHARACTER_PROPS_BINOCULARS = 6u,
		cCHARACTER_PROPS_WALKIE_TALKIE_LEFT = 7u,
		cCHARACTER_PROPS_REMOTE_LEFT = 8u,
		cCHARACTER_PROPS_BINOCULARS_LEFT = 9u,
		cCHARACTER_PROPS_MATCHSTICK = 10u,
		cCHARACTER_PROPS_MATCHSTICK_LEFT = 11u,
		cCHARACTER_PROPS_VIETNAM_FLAG = 12u,
		cCHARACTER_PROPS_KOREAN_FLAG = 13u,
		cCHARACTER_PROPS_SPECIAL_HELMET = 14u,
		cCHARACTER_PROPS_COUNT = 15,
	};
	const tStringPtr& fCHARACTER_PROPSEnumToString( u32 enumValue );      // returns "CHARACTER_PROPS_VALUE_NAME"
	const tStringPtr& fCHARACTER_PROPSEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCHARACTER_PROPSStringToEnum( const tStringPtr& enumString );
	u32 fCHARACTER_PROPSValueStringToEnum( const tStringPtr& enumValueString );

	enum tWEAPON_STATE
	{
		cWEAPON_STATE_IDLE = 0u,
		cWEAPON_STATE_FIRING = 1u,
		cWEAPON_STATE_RELOADING = 2u,
		cWEAPON_STATE_AIMING = 3u,
		cWEAPON_STATE_COUNT = 4,
	};
	const tStringPtr& fWEAPON_STATEEnumToString( u32 enumValue );      // returns "WEAPON_STATE_VALUE_NAME"
	const tStringPtr& fWEAPON_STATEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fWEAPON_STATEStringToEnum( const tStringPtr& enumString );
	u32 fWEAPON_STATEValueStringToEnum( const tStringPtr& enumValueString );

	enum tAUDIO_TYPE_ID
	{
		cAUDIO_TYPE_ID_DEFAULT = 0u,
		cAUDIO_TYPE_ID_OILBARREL = 1u,
		cAUDIO_TYPE_ID_TREEBAMBOO = 2u,
		cAUDIO_TYPE_ID_TREEPALM = 3u,
		cAUDIO_TYPE_ID_STREETSIGN = 4u,
		cAUDIO_TYPE_ID_TREE_DEAD = 5u,
		cAUDIO_TYPE_ID_TREE_DRYLEAVES_LG = 6u,
		cAUDIO_TYPE_ID_TREE_DRYLEAVES_SM = 7u,
		cAUDIO_TYPE_ID_TREE_LEAFY_LG = 8u,
		cAUDIO_TYPE_ID_TREE_LEAFY_SM = 9u,
		cAUDIO_TYPE_ID_LAMPPOST = 10u,
		cAUDIO_TYPE_ID_PARKBENCH = 11u,
		cAUDIO_TYPE_ID_PHONEBOOTH = 12u,
		cAUDIO_TYPE_ID_TRASHCAN = 13u,
		cAUDIO_TYPE_ID_SANDBAG = 14u,
		cAUDIO_TYPE_ID_CAR_TRABANT = 15u,
		cAUDIO_TYPE_ID_WOODCRATE = 16u,
		cAUDIO_TYPE_ID_BARBWIRE = 17u,
		cAUDIO_TYPE_ID_TELEPHONEPOLE = 18u,
		cAUDIO_TYPE_ID_BUSH_LEAFY = 19u,
		cAUDIO_TYPE_ID_HELI_USA_APACHE = 20u,
		cAUDIO_TYPE_ID_HELI_USSR_HIND = 21u,
		cAUDIO_TYPE_ID_AIRPLANE_USSR_MIG23 = 22u,
		cAUDIO_TYPE_ID_AIRPLANE_USA_F14 = 23u,
		cAUDIO_TYPE_ID_TANK_USA_M1ABRAMS = 24u,
		cAUDIO_TYPE_ID_INFANTRY_BASIC_CUBA = 25u,
		cAUDIO_TYPE_ID_INFANTRY_BASIC_KOREA = 26u,
		cAUDIO_TYPE_ID_INFANTRY_BASIC_USA = 27u,
		cAUDIO_TYPE_ID_INFANTRY_BASIC_USSR = 28u,
		cAUDIO_TYPE_ID_INFANTRY_BASIC_VIETNAM = 29u,
		cAUDIO_TYPE_ID_ATV = 30u,
		cAUDIO_TYPE_ID_TANK_USSR_T80 = 31u,
		cAUDIO_TYPE_ID_TANK_USA_M60PATTON = 32u,
		cAUDIO_TYPE_ID_TANK_USSR_T55 = 33u,
		cAUDIO_TYPE_ID_IFV_USA_M2BRADLEY = 34u,
		cAUDIO_TYPE_ID_IFV_USSR_BMP1 = 35u,
		cAUDIO_TYPE_ID_ARMOREDCAR_USA_M151JEEP = 36u,
		cAUDIO_TYPE_ID_ARMOREDCAR_USSR_BRDM1 = 37u,
		cAUDIO_TYPE_ID_APC_USA_M106 = 38u,
		cAUDIO_TYPE_ID_APC_USSR_BTR60 = 39u,
		cAUDIO_TYPE_ID_OBJ_FLAGPOLL01 = 40u,
		cAUDIO_TYPE_ID_AIRPLANE_USA_B52 = 41u,
		cAUDIO_TYPE_ID_AIRPLANE_USSR_TU95 = 42u,
		cAUDIO_TYPE_ID_AIRPLANE_USSR_AN12 = 43u,
		cAUDIO_TYPE_ID_AIRPLANE_USA_C130 = 44u,
		cAUDIO_TYPE_ID_AIRPLANE_USA_MUSTANG = 45u,
		cAUDIO_TYPE_ID_WOODTARGET_VERTICAL = 46u,
		cAUDIO_TYPE_ID_WOODTARGET_ROTATE = 47u,
		cAUDIO_TYPE_ID_HELI_USA_UH1_HUEY = 48u,
		cAUDIO_TYPE_ID_HELI_USSR_MI8_HIP = 49u,
		cAUDIO_TYPE_ID_COMMANDO_USSR = 50u,
		cAUDIO_TYPE_ID_COMMANDO_USA = 51u,
		cAUDIO_TYPE_ID_TENT = 52u,
		cAUDIO_TYPE_ID_GAS_PUMP = 53u,
		cAUDIO_TYPE_ID_BUILDING_GRASSHUT = 54u,
		cAUDIO_TYPE_ID_BUILDING_GENERAL_SM = 55u,
		cAUDIO_TYPE_ID_BUILDING_GENERAL_MD = 56u,
		cAUDIO_TYPE_ID_BUILDING_GENERAL_LG = 57u,
		cAUDIO_TYPE_ID_SHOOTINGGALLERY_TARGET = 58u,
		cAUDIO_TYPE_ID_WOODCRATE_STACK = 59u,
		cAUDIO_TYPE_ID_GASCANISTER = 60u,
		cAUDIO_TYPE_ID_BABUSHKA_SM = 61u,
		cAUDIO_TYPE_ID_BABUSHKA_LG = 62u,
		cAUDIO_TYPE_ID_VEHICLE_LARGE = 63u,
		cAUDIO_TYPE_ID_VEHICLE_BOXCAR = 64u,
		cAUDIO_TYPE_ID_BATTERY = 65u,
		cAUDIO_TYPE_ID_VEHICLE_ATV = 66u,
		cAUDIO_TYPE_ID_COMMANDO_BOX = 67u,
		cAUDIO_TYPE_ID_VEHICLE_PECHORA = 68u,
		cAUDIO_TYPE_ID_VEHICLE_LAZERTANK = 69u,
		cAUDIO_TYPE_ID_OILBARREL_STACK = 70u,
		cAUDIO_TYPE_ID_MINIGAME_BONUS = 71u,
		cAUDIO_TYPE_ID_TINSHELTER = 72u,
		cAUDIO_TYPE_ID_BAMBOOFENCE = 73u,
		cAUDIO_TYPE_ID_TOYBOX = 74u,
		cAUDIO_TYPE_ID_TARGET_100 = 75u,
		cAUDIO_TYPE_ID_COUNT = 76,
	};
	const tStringPtr& fAUDIO_TYPE_IDEnumToString( u32 enumValue );      // returns "AUDIO_TYPE_ID_VALUE_NAME"
	const tStringPtr& fAUDIO_TYPE_IDEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fAUDIO_TYPE_IDStringToEnum( const tStringPtr& enumString );
	u32 fAUDIO_TYPE_IDValueStringToEnum( const tStringPtr& enumValueString );

	enum tEXTRA_SEAT_INDEX
	{
		cEXTRA_SEAT_INDEX_1 = 0u,
		cEXTRA_SEAT_INDEX_2 = 1u,
		cEXTRA_SEAT_INDEX_COUNT = 2,
	};
	const tStringPtr& fEXTRA_SEAT_INDEXEnumToString( u32 enumValue );      // returns "EXTRA_SEAT_INDEX_VALUE_NAME"
	const tStringPtr& fEXTRA_SEAT_INDEXEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fEXTRA_SEAT_INDEXStringToEnum( const tStringPtr& enumString );
	u32 fEXTRA_SEAT_INDEXValueStringToEnum( const tStringPtr& enumValueString );

	enum tWHEEL_INDEX
	{
		cWHEEL_INDEX_LEFT_FRONT = 0u,
		cWHEEL_INDEX_RIGHT_FRONT = 1u,
		cWHEEL_INDEX_LEFT_REAR = 2u,
		cWHEEL_INDEX_RIGHT_REAR = 3u,
		cWHEEL_INDEX_COUNT = 4,
	};
	const tStringPtr& fWHEEL_INDEXEnumToString( u32 enumValue );      // returns "WHEEL_INDEX_VALUE_NAME"
	const tStringPtr& fWHEEL_INDEXEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fWHEEL_INDEXStringToEnum( const tStringPtr& enumString );
	u32 fWHEEL_INDEXValueStringToEnum( const tStringPtr& enumValueString );

	enum tTUTORIAL_EVENT
	{
		cTUTORIAL_EVENT_INPUT = 0u,
		cTUTORIAL_EVENT_UNIT_BUILT = 1u,
		cTUTORIAL_EVENT_UNIT_DESTROYED = 2u,
		cTUTORIAL_EVENT_USE_UNIT = 3u,
		cTUTORIAL_EVENT_TURRET_UPGRADE = 4u,
		cTUTORIAL_EVENT_TURRET_REPAIR = 5u,
		cTUTORIAL_EVENT_TURRET_SELL = 6u,
		cTUTORIAL_EVENT_BEGIN = 7u,
		cTUTORIAL_EVENT_CONTINUE = 8u,
		cTUTORIAL_EVENT_USE_MENU = 9u,
		cTUTORIAL_EVENT_OVERCHARGE = 10u,
		cTUTORIAL_EVENT_BARRAGE_RECEIVED = 11u,
		cTUTORIAL_EVENT_BARRAGE_ACTIVATED = 12u,
		cTUTORIAL_EVENT_MINIGAME_BEGIN = 13u,
		cTUTORIAL_EVENT_MINIGAME_END = 14u,
		cTUTORIAL_EVENT_MINIGAME_RESTART = 15u,
		cTUTORIAL_EVENT_MINIGAME_CONTINUE = 16u,
		cTUTORIAL_EVENT_PLACE_MENU = 17u,
		cTUTORIAL_EVENT_BARRAGE_ENDED = 18u,
		cTUTORIAL_EVENT_BARRAGE_USED = 19u,
		cTUTORIAL_EVENT_SKIP = 20u,
		cTUTORIAL_EVENT_MINIGAME_DEFEAT = 21u,
		cTUTORIAL_EVENT_MINIGAME_BONUS = 22u,
		cTUTORIAL_EVENT_SUSPEND = 23u,
		cTUTORIAL_EVENT_COMBO_LOST = 24u,
		cTUTORIAL_EVENT_SPECIAL_MOVE = 25u,
		cTUTORIAL_EVENT_UNIT_IN_ALARM_ZONE = 26u,
		cTUTORIAL_EVENT_ACHIEVEMENT = 27u,
		cTUTORIAL_EVENT_LUCKY_STAR_BARRAGE = 28u,
		cTUTORIAL_EVENT_HIT_APC_WITH_LOAD = 29u,
		cTUTORIAL_EVENT_APC_BEGIN_UNLOAD = 30u,
		cTUTORIAL_EVENT_TIME = 31u,
		cTUTORIAL_EVENT_BEGIN_CHARGING = 32u,
		cTUTORIAL_EVENT_UNIT_REACHED_GOAL = 33u,
		cTUTORIAL_EVENT_UNIT_IGNITED = 34u,
		cTUTORIAL_EVENT_COUNT = 35,
	};
	const tStringPtr& fTUTORIAL_EVENTEnumToString( u32 enumValue );      // returns "TUTORIAL_EVENT_VALUE_NAME"
	const tStringPtr& fTUTORIAL_EVENTEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fTUTORIAL_EVENTStringToEnum( const tStringPtr& enumString );
	u32 fTUTORIAL_EVENTValueStringToEnum( const tStringPtr& enumValueString );

	enum tPERSISTENT_EFFECT_BEHAVIOR
	{
		cPERSISTENT_EFFECT_BEHAVIOR_GAS = 0u,
		cPERSISTENT_EFFECT_BEHAVIOR_FIRE = 1u,
		cPERSISTENT_EFFECT_BEHAVIOR_STUN = 2u,
		cPERSISTENT_EFFECT_BEHAVIOR_COUNT = 3,
	};
	const tStringPtr& fPERSISTENT_EFFECT_BEHAVIOREnumToString( u32 enumValue );      // returns "PERSISTENT_EFFECT_BEHAVIOR_VALUE_NAME"
	const tStringPtr& fPERSISTENT_EFFECT_BEHAVIOREnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fPERSISTENT_EFFECT_BEHAVIORStringToEnum( const tStringPtr& enumString );
	u32 fPERSISTENT_EFFECT_BEHAVIORValueStringToEnum( const tStringPtr& enumValueString );

	enum tSPECIAL_ENTRANCE
	{
		cSPECIAL_ENTRANCE_HELI_RAMP = 0u,
		cSPECIAL_ENTRANCE_ROPE_SLIDE = 1u,
		cSPECIAL_ENTRANCE_USSR_APCMG01_LEFT = 2u,
		cSPECIAL_ENTRANCE_USSR_APCMG01_RIGHT = 3u,
		cSPECIAL_ENTRANCE_SUB_DEPLOY = 4u,
		cSPECIAL_ENTRANCE_USA_APCMG01_LEFT = 5u,
		cSPECIAL_ENTRANCE_USA_APCMG01_RIGHT = 6u,
		cSPECIAL_ENTRANCE_USSR_APCIFV01_LEFT = 7u,
		cSPECIAL_ENTRANCE_USSR_APCIFV01_RIGHT = 8u,
		cSPECIAL_ENTRANCE_SUPERTANK_DEPLOY = 9u,
		cSPECIAL_ENTRANCE_COUNT = 10,
	};
	const tStringPtr& fSPECIAL_ENTRANCEEnumToString( u32 enumValue );      // returns "SPECIAL_ENTRANCE_VALUE_NAME"
	const tStringPtr& fSPECIAL_ENTRANCEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fSPECIAL_ENTRANCEStringToEnum( const tStringPtr& enumString );
	u32 fSPECIAL_ENTRANCEValueStringToEnum( const tStringPtr& enumValueString );

	enum tACHIEVEMENTS
	{
		cACHIEVEMENTS_SHOCKING_RESULTS = 0u,
		cACHIEVEMENTS_SUNK = 1u,
		cACHIEVEMENTS_A_FEW_LOOSE_SCREWS = 2u,
		cACHIEVEMENTS_WITH_DISTINCTION = 3u,
		cACHIEVEMENTS_HIGHLY_DECORATED = 4u,
		cACHIEVEMENTS_LIKE_IT_NEVER_HAPPENED = 5u,
		cACHIEVEMENTS_A_JOB_WELL_DONE = 6u,
		cACHIEVEMENTS_EFFECTIVE_TACTICIAN = 7u,
		cACHIEVEMENTS_DEMOLITION_MAN = 8u,
		cACHIEVEMENTS_CONCENTRATED_FIRE = 9u,
		cACHIEVEMENTS_I_CAN_T_GET_A_TONE = 10u,
		cACHIEVEMENTS_BRUTE_FORCE = 11u,
		cACHIEVEMENTS_RESOLUTE = 12u,
		cACHIEVEMENTS_SYNERGY = 13u,
		cACHIEVEMENTS_IN_SYNC = 14u,
		cACHIEVEMENTS_CLUTCH_REPAIRS = 15u,
		cACHIEVEMENTS_AGGRESSIVE_INVESTMENT_STRATEGY = 16u,
		cACHIEVEMENTS_KING_OF_THE_HILL = 17u,
		cACHIEVEMENTS_PERSISTENCE = 18u,
		cACHIEVEMENTS_PERSEVERANCE = 19u,
		cACHIEVEMENTS_DLC1_DESTROY_SUPERTANK = 20u,
		cACHIEVEMENTS_DLC1_FIND_15_DOLLS = 21u,
		cACHIEVEMENTS_DLC1_BROVIET = 22u,
		cACHIEVEMENTS_DLC2_DESTROY_HOMER = 23u,
		cACHIEVEMENTS_DLC2_FIND_DOG_TAGS = 24u,
		cACHIEVEMENTS_DLC2_NAPALM_IN_VERSUS = 25u,
		cACHIEVEMENTS_COUNT = 26,
	};
	const tStringPtr& fACHIEVEMENTSEnumToString( u32 enumValue );      // returns "ACHIEVEMENTS_VALUE_NAME"
	const tStringPtr& fACHIEVEMENTSEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fACHIEVEMENTSStringToEnum( const tStringPtr& enumString );
	u32 fACHIEVEMENTSValueStringToEnum( const tStringPtr& enumValueString );

	enum tSESSION_STATS
	{
		cSESSION_STATS_SCORE = 0u,
		cSESSION_STATS_ENEMIES_REACHED_GOAL = 1u,
		cSESSION_STATS_INFANTRY_REACHED_GOAL = 2u,
		cSESSION_STATS_TOTAL_MONEY = 3u,
		cSESSION_STATS_MONEY_EARNED = 4u,
		cSESSION_STATS_UNITS_PURCHASED = 5u,
		cSESSION_STATS_UNITS_UPGRADED = 6u,
		cSESSION_STATS_UNITS_REPAIRED = 7u,
		cSESSION_STATS_KILLS = 8u,
		cSESSION_STATS_HIGHEST_COMBO = 9u,
		cSESSION_STATS_AMMO_EXPENDED = 10u,
		cSESSION_STATS_BARRAGES_CALLED_IN = 11u,
		cSESSION_STATS_KILLS_WITH_BARRAGES = 12u,
		cSESSION_STATS_TOTAL_TIME = 13u,
		cSESSION_STATS_TIME_IN_UNITS = 14u,
		cSESSION_STATS_TIME_IN_VEHICLES = 15u,
		cSESSION_STATS_TIME_IN_SHELLCAM = 16u,
		cSESSION_STATS_TRIES_BEFORE_COMPLETION = 17u,
		cSESSION_STATS_KILLS_IN_NIGHT_VISION = 18u,
		cSESSION_STATS_HIGHEST_FLYING_SOLDIER = 19u,
		cSESSION_STATS_SECONDS_SKIPPED = 20u,
		cSESSION_STATS_OVER_KILL = 21u,
		cSESSION_STATS_MONEY_SPENT = 22u,
		cSESSION_STATS_DEFENSE_SUB_SCORE = 23u,
		cSESSION_STATS_TIME_SUB_SCORE = 24u,
		cSESSION_STATS_MONEY_SUB_SCORE = 25u,
		cSESSION_STATS_MINIGAME_META_STAT = 26u,
		cSESSION_STATS_ASSISTS = 27u,
		cSESSION_STATS_OVERCHARGE = 28u,
		cSESSION_STATS_WAVE_BONUS = 29u,
		cSESSION_STATS_WAVE_CHAIN = 30u,
		cSESSION_STATS_PAYBACK = 31u,
		cSESSION_STATS_CLOSE_CALL = 32u,
		cSESSION_STATS_BOMBING_RUN = 33u,
		cSESSION_STATS_SPEED_BONUS = 34u,
		cSESSION_STATS_KILLS_WHILE_USING_TURRETS = 35u,
		cSESSION_STATS_BASIC_INFANTRY_KILLED = 36u,
		cSESSION_STATS_ELITE_INFANTRY_KILLED = 37u,
		cSESSION_STATS_ATVS_DESTROYED = 38u,
		cSESSION_STATS_CARS_DESTROYED = 39u,
		cSESSION_STATS_APCS_DESTROYED = 40u,
		cSESSION_STATS_IFVS_DESTROYED = 41u,
		cSESSION_STATS_MEDIUM_TANKS_DESTROYED = 42u,
		cSESSION_STATS_HEAVY_TANKS_DESTROYED = 43u,
		cSESSION_STATS_TRANSPORT_COPTERS_DESTROYED = 44u,
		cSESSION_STATS_GUNSHIPS_DESTROYED = 45u,
		cSESSION_STATS_ATTACK_COPTERS_DESTROYED = 46u,
		cSESSION_STATS_FIGHTER_PLANES_DESTROYED = 47u,
		cSESSION_STATS_TRANSPORT_PLANES_DESTROYED = 48u,
		cSESSION_STATS_BOMBERS_DESTROYED = 49u,
		cSESSION_STATS_TANKS_REACHED_TOY_BOX = 50u,
		cSESSION_STATS_APCS_REACHED_TOY_BOX = 51u,
		cSESSION_STATS_PLANES_REACHED_TOY_BOX = 52u,
		cSESSION_STATS_HELICOPTERS_REACHED_TOY_BOX = 53u,
		cSESSION_STATS_CARS_REACHED_TOY_BOX = 54u,
		cSESSION_STATS_ATVS_REACHED_TOY_BOX = 55u,
		cSESSION_STATS_TURRETS_LOST = 56u,
		cSESSION_STATS_VEHICLES_PURCHASED = 57u,
		cSESSION_STATS_VEHICLES_LOST = 58u,
		cSESSION_STATS_VEHICLES_DRIVEN_INTO_GOAL = 59u,
		cSESSION_STATS_VERSUS_WAVES_LAUNCHED = 60u,
		cSESSION_STATS_TIME_USING_TURRETS = 61u,
		cSESSION_STATS_TIME_USING_AC130 = 62u,
		cSESSION_STATS_TIME_USING_COMMANDO = 63u,
		cSESSION_STATS_TIME_USING_IVAN = 64u,
		cSESSION_STATS_TIME_USING_MEDIUM_TANK = 65u,
		cSESSION_STATS_TIME_USING_HEAVY_TANK = 66u,
		cSESSION_STATS_TIME_USING_ATTACK_HELICOPTER = 67u,
		cSESSION_STATS_TIME_USING_HELICOPTER_GUNSHIP = 68u,
		cSESSION_STATS_TIME_USING_FIGHTER_PLANE = 69u,
		cSESSION_STATS_MOST_KILLS_WITH_A_NUKE = 70u,
		cSESSION_STATS_TIME_SPENT_IN_TURBOCHARGE = 71u,
		cSESSION_STATS_TURBOCHARGE_KILLS = 72u,
		cSESSION_STATS_TURBOCHARGES_WITH_MACHINEGUNS = 73u,
		cSESSION_STATS_TURBOCHARGES_WITH_HOWITZERS = 74u,
		cSESSION_STATS_TURBOCHARGES_WITH_MORTARS = 75u,
		cSESSION_STATS_TURBOCHARGES_WITH_ANTI_TANK = 76u,
		cSESSION_STATS_TURBOCHARGES_WITH_MAKESHIFT = 77u,
		cSESSION_STATS_TURBOCHARGES_WITH_ANTI_AIR = 78u,
		cSESSION_STATS_MOST_HOTSWAPS_IN_A_SINGLE_TURBOCHARGE = 79u,
		cSESSION_STATS_TICKETS_LOST_IN_HEAD_2_HEAD = 80u,
		cSESSION_STATS_TICKETS_DEALT_IN_HEAD_2_HEAD = 81u,
		cSESSION_STATS_VERSUS_WINS = 82u,
		cSESSION_STATS_VERSUS_LOSSES = 83u,
		cSESSION_STATS_VERSUS_WIN_LOSS_RATIO = 84u,
		cSESSION_STATS_VERSUS_SHUT_OUTS = 85u,
		cSESSION_STATS_VERSUS_TURRETS_DESTROYED = 86u,
		cSESSION_STATS_VERSUS_PLATFORMS_CAPTURED = 87u,
		cSESSION_STATS_DECORATIONS_ACQUIRED = 88u,
		cSESSION_STATS_TOTAL_BRONZE_MEDALS = 89u,
		cSESSION_STATS_TOTAL_SILVER_MEDALS = 90u,
		cSESSION_STATS_TOTAL_GOLD_MEDALS = 91u,
		cSESSION_STATS_TOTAL_PLATINUM_MEDALS = 92u,
		cSESSION_STATS_TOTAL_CHALLENGES_EARNED = 93u,
		cSESSION_STATS_5X_COMBOS = 94u,
		cSESSION_STATS_10X_COMBOS = 95u,
		cSESSION_STATS_20X_COMBOS = 96u,
		cSESSION_STATS_40X_COMBOS = 97u,
		cSESSION_STATS_80X_COMBOS = 98u,
		cSESSION_STATS_100X_COMBOS = 99u,
		cSESSION_STATS_150X_COMBOS = 100u,
		cSESSION_STATS_200X_COMBOS = 101u,
		cSESSION_STATS_250X_COMBOS = 102u,
		cSESSION_STATS_300X_COMBOS = 103u,
		cSESSION_STATS_BULLETS_FIRED = 104u,
		cSESSION_STATS_MORTARS_SHELLS_FIRED = 105u,
		cSESSION_STATS_HOWITZER_SHELLS_FIRED = 106u,
		cSESSION_STATS_MISSILES_FIRED = 107u,
		cSESSION_STATS_BARRAGES_EARNED_FROM_RED_STARS = 108u,
		cSESSION_STATS_BARRAGES_EARNED_FROM_TURBOCHARGE = 109u,
		cSESSION_STATS_BARRAGES_PURCHASED_IN_VERSUS = 110u,
		cSESSION_STATS_INFANTRY_GASSED = 111u,
		cSESSION_STATS_INFANTRY_SET_ON_FIRE = 112u,
		cSESSION_STATS_HIGHEST_WITH_A_SINGLE_BARRAGE = 113u,
		cSESSION_STATS_MOST_BARRAGES_IN_A_SINGLE_MAP = 114u,
		cSESSION_STATS_HIGHEST_SURVIVAL_ROUND = 115u,
		cSESSION_STATS_HIGHEST_LOCKDOWN_ROUND = 116u,
		cSESSION_STATS_HIGHEST_HARDCORE_ROUND = 117u,
		cSESSION_STATS_GOLDEN_FLIES_EXPLODED = 118u,
		cSESSION_STATS_RESCUED = 119u,
		cSESSION_STATS_GOLDEN_FLIES_BONUS = 120u,
		cSESSION_STATS_STARS_SHATTERED = 121u,
		cSESSION_STATS_COUNT = 122,
	};
	const tStringPtr& fSESSION_STATSEnumToString( u32 enumValue );      // returns "SESSION_STATS_VALUE_NAME"
	const tStringPtr& fSESSION_STATSEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fSESSION_STATSStringToEnum( const tStringPtr& enumString );
	u32 fSESSION_STATSValueStringToEnum( const tStringPtr& enumValueString );

	enum tCOMBO
	{
		cCOMBO_1 = 0u,
		cCOMBO_2 = 1u,
		cCOMBO_3 = 2u,
		cCOMBO_4 = 3u,
		cCOMBO_5 = 4u,
		cCOMBO_10 = 5u,
		cCOMBO_20 = 6u,
		cCOMBO_COUNT = 7,
	};
	const tStringPtr& fCOMBOEnumToString( u32 enumValue );      // returns "COMBO_VALUE_NAME"
	const tStringPtr& fCOMBOEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCOMBOStringToEnum( const tStringPtr& enumString );
	u32 fCOMBOValueStringToEnum( const tStringPtr& enumValueString );

	enum tCHALLENGE_MODE
	{
		cCHALLENGE_MODE_SURVIVAL = 0u,
		cCHALLENGE_MODE_LOCKDOWN = 1u,
		cCHALLENGE_MODE_HARDCORE = 2u,
		cCHALLENGE_MODE_TRAUMA = 3u,
		cCHALLENGE_MODE_COMMANDO = 4u,
		cCHALLENGE_MODE_COUNT = 5,
	};
	const tStringPtr& fCHALLENGE_MODEEnumToString( u32 enumValue );      // returns "CHALLENGE_MODE_VALUE_NAME"
	const tStringPtr& fCHALLENGE_MODEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCHALLENGE_MODEStringToEnum( const tStringPtr& enumString );
	u32 fCHALLENGE_MODEValueStringToEnum( const tStringPtr& enumValueString );

	enum tDLC
	{
		cDLC_COLD_WAR = 0u,
		cDLC_EVIL_EMPIRE = 1u,
		cDLC_NAPALM = 2u,
		cDLC_COUNT = 3,
	};
	const tStringPtr& fDLCEnumToString( u32 enumValue );      // returns "DLC_VALUE_NAME"
	const tStringPtr& fDLCEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fDLCStringToEnum( const tStringPtr& enumString );
	u32 fDLCValueStringToEnum( const tStringPtr& enumValueString );

	enum tDAMAGE_TRANSFER_MULTIPLIER
	{
		cDAMAGE_TRANSFER_MULTIPLIER_ONE_TENTH = 0u,
		cDAMAGE_TRANSFER_MULTIPLIER_HALF = 1u,
		cDAMAGE_TRANSFER_MULTIPLIER_ONE = 2u,
		cDAMAGE_TRANSFER_MULTIPLIER_TWO = 3u,
		cDAMAGE_TRANSFER_MULTIPLIER_THREE = 4u,
		cDAMAGE_TRANSFER_MULTIPLIER_FIVE = 5u,
		cDAMAGE_TRANSFER_MULTIPLIER_TEN = 6u,
		cDAMAGE_TRANSFER_MULTIPLIER_TWENTY = 7u,
		cDAMAGE_TRANSFER_MULTIPLIER_THIRTY = 8u,
		cDAMAGE_TRANSFER_MULTIPLIER_FIFTY = 9u,
		cDAMAGE_TRANSFER_MULTIPLIER_COUNT = 10,
	};
	const tStringPtr& fDAMAGE_TRANSFER_MULTIPLIEREnumToString( u32 enumValue );      // returns "DAMAGE_TRANSFER_MULTIPLIER_VALUE_NAME"
	const tStringPtr& fDAMAGE_TRANSFER_MULTIPLIEREnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fDAMAGE_TRANSFER_MULTIPLIERStringToEnum( const tStringPtr& enumString );
	u32 fDAMAGE_TRANSFER_MULTIPLIERValueStringToEnum( const tStringPtr& enumValueString );

	enum tTARGET_INDEX
	{
		cTARGET_INDEX_NONE = 0u,
		cTARGET_INDEX_RANDOM = 1u,
		cTARGET_INDEX_1 = 2u,
		cTARGET_INDEX_2 = 3u,
		cTARGET_INDEX_3 = 4u,
		cTARGET_INDEX_4 = 5u,
		cTARGET_INDEX_5 = 6u,
		cTARGET_INDEX_6 = 7u,
		cTARGET_INDEX_7 = 8u,
		cTARGET_INDEX_8 = 9u,
		cTARGET_INDEX_9 = 10u,
		cTARGET_INDEX_10 = 11u,
		cTARGET_INDEX_COUNT = 12,
	};
	const tStringPtr& fTARGET_INDEXEnumToString( u32 enumValue );      // returns "TARGET_INDEX_VALUE_NAME"
	const tStringPtr& fTARGET_INDEXEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fTARGET_INDEXStringToEnum( const tStringPtr& enumString );
	u32 fTARGET_INDEXValueStringToEnum( const tStringPtr& enumValueString );

	enum tLOGIC_TYPE
	{
		cLOGIC_TYPE_TURRET = 0u,
		cLOGIC_TYPE_CHARACTER = 1u,
		cLOGIC_TYPE_VEHICLE = 2u,
		cLOGIC_TYPE_COUNT = 3,
	};
	const tStringPtr& fLOGIC_TYPEEnumToString( u32 enumValue );      // returns "LOGIC_TYPE_VALUE_NAME"
	const tStringPtr& fLOGIC_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fLOGIC_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fLOGIC_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tPICKUPS
	{
		cPICKUPS_BATTERY_1 = 0u,
		cPICKUPS_BATTERY_2 = 1u,
		cPICKUPS_OVERCHARGE = 2u,
		cPICKUPS_BARRAGE_ROLL = 3u,
		cPICKUPS_TINY_BATTERY_AMOUNT = 4u,
		cPICKUPS_PLANETARGETS = 5u,
		cPICKUPS_MORE_TIME = 6u,
		cPICKUPS_LESS_TIME = 7u,
		cPICKUPS_COUNT = 8,
	};
	const tStringPtr& fPICKUPSEnumToString( u32 enumValue );      // returns "PICKUPS_VALUE_NAME"
	const tStringPtr& fPICKUPSEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fPICKUPSStringToEnum( const tStringPtr& enumString );
	u32 fPICKUPSValueStringToEnum( const tStringPtr& enumValueString );

	enum tCONTROLS
	{
		cCONTROLS_CAMERA = 0u,
		cCONTROLS_TURRETS = 1u,
		cCONTROLS_SHELLCAM = 2u,
		cCONTROLS_PLANES = 3u,
		cCONTROLS_VEHICLES = 4u,
		cCONTROLS_CHARACTER = 5u,
		cCONTROLS_COUNT = 6,
	};
	const tStringPtr& fCONTROLSEnumToString( u32 enumValue );      // returns "CONTROLS_VALUE_NAME"
	const tStringPtr& fCONTROLSEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCONTROLSStringToEnum( const tStringPtr& enumString );
	u32 fCONTROLSValueStringToEnum( const tStringPtr& enumValueString );

	enum tCONTROLS_SETTING
	{
		cCONTROLS_SETTING_NORMAL = 0u,
		cCONTROLS_SETTING_SOUTHPAW = 1u,
		cCONTROLS_SETTING_INVERTED = 2u,
		cCONTROLS_SETTING_NORMALSOUTHPAW = 3u,
		cCONTROLS_SETTING_INVERTEDSOUTHPAW = 4u,
		cCONTROLS_SETTING_COUNT = 5,
	};
	const tStringPtr& fCONTROLS_SETTINGEnumToString( u32 enumValue );      // returns "CONTROLS_SETTING_VALUE_NAME"
	const tStringPtr& fCONTROLS_SETTINGEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCONTROLS_SETTINGStringToEnum( const tStringPtr& enumString );
	u32 fCONTROLS_SETTINGValueStringToEnum( const tStringPtr& enumValueString );

	enum tPERSONALITY_TYPE
	{
		cPERSONALITY_TYPE_CRAZY = 0u,
		cPERSONALITY_TYPE_HERO = 1u,
		cPERSONALITY_TYPE_ROOKIE = 2u,
		cPERSONALITY_TYPE_SERGEANT = 3u,
		cPERSONALITY_TYPE_COMMANDO = 4u,
		cPERSONALITY_TYPE_COUNT = 5,
	};
	const tStringPtr& fPERSONALITY_TYPEEnumToString( u32 enumValue );      // returns "PERSONALITY_TYPE_VALUE_NAME"
	const tStringPtr& fPERSONALITY_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fPERSONALITY_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fPERSONALITY_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tCREWMAN
	{
		cCREWMAN_A = 0u,
		cCREWMAN_B = 1u,
		cCREWMAN_C = 2u,
		cCREWMAN_D = 3u,
		cCREWMAN_E = 4u,
		cCREWMAN_F = 5u,
		cCREWMAN_G = 6u,
		cCREWMAN_COUNT = 7,
	};
	const tStringPtr& fCREWMANEnumToString( u32 enumValue );      // returns "CREWMAN_VALUE_NAME"
	const tStringPtr& fCREWMANEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fCREWMANStringToEnum( const tStringPtr& enumString );
	u32 fCREWMANValueStringToEnum( const tStringPtr& enumValueString );

	enum tFIREEFFECTOVERRIDE
	{
		cFIREEFFECTOVERRIDE_NONE = 0u,
		cFIREEFFECTOVERRIDE_SOLDIER_ON_FIRE = 1u,
		cFIREEFFECTOVERRIDE_BASIC_FIRE_LIGHT_SMOKE = 2u,
		cFIREEFFECTOVERRIDE_BASIC_FIRE_HEAVY_SMOKE = 3u,
		cFIREEFFECTOVERRIDE_HEAVY_FIRE_WITH_SMOKE = 4u,
		cFIREEFFECTOVERRIDE_SMALL_CRATE_FIRE = 5u,
		cFIREEFFECTOVERRIDE_LARGE_CRATE_FIRE = 6u,
		cFIREEFFECTOVERRIDE_SMALL_CRATESTACK_FIRE = 7u,
		cFIREEFFECTOVERRIDE_BIG_CRATESTACK_FIRE = 8u,
		cFIREEFFECTOVERRIDE_SMALL_TREE_FIRE = 9u,
		cFIREEFFECTOVERRIDE_LARGE_TREE_FIRE = 10u,
		cFIREEFFECTOVERRIDE_FENCE_ON_FIRE = 11u,
		cFIREEFFECTOVERRIDE_BARREL_ON_FIRE = 12u,
		cFIREEFFECTOVERRIDE_COUNT = 13,
	};
	const tStringPtr& fFIREEFFECTOVERRIDEEnumToString( u32 enumValue );      // returns "FIREEFFECTOVERRIDE_VALUE_NAME"
	const tStringPtr& fFIREEFFECTOVERRIDEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fFIREEFFECTOVERRIDEStringToEnum( const tStringPtr& enumString );
	u32 fFIREEFFECTOVERRIDEValueStringToEnum( const tStringPtr& enumValueString );

	enum tVEHICLE_MOTION_FX
	{
		cVEHICLE_MOTION_FX_PLUS_Z = 0u,
		cVEHICLE_MOTION_FX_MINUS_Z = 1u,
		cVEHICLE_MOTION_FX_PLUS_Y = 2u,
		cVEHICLE_MOTION_FX_MINUS_Y = 3u,
		cVEHICLE_MOTION_FX_RUNNING = 4u,
		cVEHICLE_MOTION_FX_STARTUP = 5u,
		cVEHICLE_MOTION_FX_COUNT = 6,
	};
	const tStringPtr& fVEHICLE_MOTION_FXEnumToString( u32 enumValue );      // returns "VEHICLE_MOTION_FX_VALUE_NAME"
	const tStringPtr& fVEHICLE_MOTION_FXEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fVEHICLE_MOTION_FXStringToEnum( const tStringPtr& enumString );
	u32 fVEHICLE_MOTION_FXValueStringToEnum( const tStringPtr& enumValueString );

	enum tKILL_FLAG
	{
		cKILL_FLAG_OVERKILL = 0u,
		cKILL_FLAG_ASSIST = 1u,
		cKILL_FLAG_BARRAGE = 2u,
		cKILL_FLAG_SPEEDBONUS = 3u,
		cKILL_FLAG_NIGHT_VISION = 4u,
		cKILL_FLAG_PRONE = 5u,
		cKILL_FLAG_COUNT = 6,
	};
	const tStringPtr& fKILL_FLAGEnumToString( u32 enumValue );      // returns "KILL_FLAG_VALUE_NAME"
	const tStringPtr& fKILL_FLAGEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fKILL_FLAGStringToEnum( const tStringPtr& enumString );
	u32 fKILL_FLAGValueStringToEnum( const tStringPtr& enumValueString );

	enum tLEADERBOARD_COLUMN_TYPE
	{
		cLEADERBOARD_COLUMN_TYPE_NUMBER = 0u,
		cLEADERBOARD_COLUMN_TYPE_TIME = 1u,
		cLEADERBOARD_COLUMN_TYPE_MEDAL = 2u,
		cLEADERBOARD_COLUMN_TYPE_CHALLENGEPROGRESS = 3u,
		cLEADERBOARD_COLUMN_TYPE_MONEY = 4u,
		cLEADERBOARD_COLUMN_TYPE_MINIGAME_META = 5u,
		cLEADERBOARD_COLUMN_TYPE_COUNT = 6,
	};
	const tStringPtr& fLEADERBOARD_COLUMN_TYPEEnumToString( u32 enumValue );      // returns "LEADERBOARD_COLUMN_TYPE_VALUE_NAME"
	const tStringPtr& fLEADERBOARD_COLUMN_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fLEADERBOARD_COLUMN_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fLEADERBOARD_COLUMN_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tPLATFORM_TYPE
	{
		cPLATFORM_TYPE_TUTORIAL = 0u,
		cPLATFORM_TYPE_COUNT = 1,
	};
	const tStringPtr& fPLATFORM_TYPEEnumToString( u32 enumValue );      // returns "PLATFORM_TYPE_VALUE_NAME"
	const tStringPtr& fPLATFORM_TYPEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fPLATFORM_TYPEStringToEnum( const tStringPtr& enumString );
	u32 fPLATFORM_TYPEValueStringToEnum( const tStringPtr& enumValueString );

	enum tDEBRIS_BEHAVIOR
	{
		cDEBRIS_BEHAVIOR_SPAWN_ALL_TRANSITION = 0u,
		cDEBRIS_BEHAVIOR_COUNT = 1,
	};
	const tStringPtr& fDEBRIS_BEHAVIOREnumToString( u32 enumValue );      // returns "DEBRIS_BEHAVIOR_VALUE_NAME"
	const tStringPtr& fDEBRIS_BEHAVIOREnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fDEBRIS_BEHAVIORStringToEnum( const tStringPtr& enumString );
	u32 fDEBRIS_BEHAVIORValueStringToEnum( const tStringPtr& enumValueString );

	enum tAVATAR_AWARDS
	{
		cAVATAR_AWARDS_FLIGHT_JACKET = 0u,
		cAVATAR_AWARDS_COMMANDO_MULLET = 1u,
		cAVATAR_AWARDS_T_SHIRT = 2u,
		cAVATAR_AWARDS_DIVIDER = 3u,
		cAVATAR_AWARDS_GAMER_PIC_BUY = 4u,
		cAVATAR_AWARDS_GAMER_PIC_BEAT = 5u,
		cAVATAR_AWARDS_COUNT = 6,
	};
	const tStringPtr& fAVATAR_AWARDSEnumToString( u32 enumValue );      // returns "AVATAR_AWARDS_VALUE_NAME"
	const tStringPtr& fAVATAR_AWARDSEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fAVATAR_AWARDSStringToEnum( const tStringPtr& enumString );
	u32 fAVATAR_AWARDSValueStringToEnum( const tStringPtr& enumValueString );

	enum tLANGUAGE
	{
		cLANGUAGE_ENGLISH = 0u,
		cLANGUAGE_GERMAN = 1u,
		cLANGUAGE_SPANISH = 2u,
		cLANGUAGE_FRENCH = 3u,
		cLANGUAGE_ITALIAN = 4u,
		cLANGUAGE_JAPANESE = 5u,
		cLANGUAGE_KOREAN = 6u,
		cLANGUAGE_CHINESE = 7u,
		cLANGUAGE_COUNT = 8,
	};
	const tStringPtr& fLANGUAGEEnumToString( u32 enumValue );      // returns "LANGUAGE_VALUE_NAME"
	const tStringPtr& fLANGUAGEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fLANGUAGEStringToEnum( const tStringPtr& enumString );
	u32 fLANGUAGEValueStringToEnum( const tStringPtr& enumValueString );

	enum tREGION
	{
		cREGION_NORTH_AMERICA = 0u,
		cREGION_ASIA = 1u,
		cREGION_EUROPE = 2u,
		cREGION_GERMANY = 3u,
		cREGION_AUSTRALIA = 4u,
		cREGION_KOREA = 5u,
		cREGION_REST_OF_WORLD = 6u,
		cREGION_COUNT = 7,
	};
	const tStringPtr& fREGIONEnumToString( u32 enumValue );      // returns "REGION_VALUE_NAME"
	const tStringPtr& fREGIONEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fREGIONStringToEnum( const tStringPtr& enumString );
	u32 fREGIONValueStringToEnum( const tStringPtr& enumValueString );

	enum tLOCALE
	{
		cLOCALE_NO_LOCALE = 0u,
		cLOCALE_AUSTRALIA = 1u,
		cLOCALE_AUSTRIA = 2u,
		cLOCALE_BELGIUM = 3u,
		cLOCALE_BRAZIL = 4u,
		cLOCALE_CANADA = 5u,
		cLOCALE_CHILE = 6u,
		cLOCALE_CHINA = 7u,
		cLOCALE_COLOMBIA = 8u,
		cLOCALE_CZECH_REPUBLIC = 9u,
		cLOCALE_DENMARK = 10u,
		cLOCALE_FINLAND = 11u,
		cLOCALE_FRANCE = 12u,
		cLOCALE_GERMANY = 13u,
		cLOCALE_GREECE = 14u,
		cLOCALE_HONG_KONG = 15u,
		cLOCALE_HUNGARY = 16u,
		cLOCALE_INDIA = 17u,
		cLOCALE_IRELAND = 18u,
		cLOCALE_ITALY = 19u,
		cLOCALE_JAPAN = 20u,
		cLOCALE_KOREA = 21u,
		cLOCALE_MEXICO = 22u,
		cLOCALE_NETHERLANDS = 23u,
		cLOCALE_NEW_ZEALAND = 24u,
		cLOCALE_NORWAY = 25u,
		cLOCALE_POLAND = 26u,
		cLOCALE_PORTUGAL = 27u,
		cLOCALE_SINGAPORE = 28u,
		cLOCALE_SLOVAK_REPUBLIC = 29u,
		cLOCALE_SOUTH_AFRICA = 30u,
		cLOCALE_SPAIN = 31u,
		cLOCALE_SWEDEN = 32u,
		cLOCALE_SWITZERLAND = 33u,
		cLOCALE_TAIWAN = 34u,
		cLOCALE_GREAT_BRITAIN = 35u,
		cLOCALE_UNITED_STATES = 36u,
		cLOCALE_RUSSIAN_FEDERATION = 37u,
		cLOCALE_COUNT = 38,
	};
	const tStringPtr& fLOCALEEnumToString( u32 enumValue );      // returns "LOCALE_VALUE_NAME"
	const tStringPtr& fLOCALEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fLOCALEStringToEnum( const tStringPtr& enumString );
	u32 fLOCALEValueStringToEnum( const tStringPtr& enumValueString );

	enum tMOBILE_MINIGAME
	{
		cMOBILE_MINIGAME_FLY = 0u,
		cMOBILE_MINIGAME_HALLWAY = 1u,
		cMOBILE_MINIGAME_TRIAL_GAME_2 = 2u,
		cMOBILE_MINIGAME_BOOT_CAMP = 3u,
		cMOBILE_MINIGAME_TOTALS = 4u,
		cMOBILE_MINIGAME_COUNT = 5,
	};
	const tStringPtr& fMOBILE_MINIGAMEEnumToString( u32 enumValue );      // returns "MOBILE_MINIGAME_VALUE_NAME"
	const tStringPtr& fMOBILE_MINIGAMEEnumToValueString( u32 enumValue ); // returns "VALUE_NAME"
	u32 fMOBILE_MINIGAMEStringToEnum( const tStringPtr& enumString );
	u32 fMOBILE_MINIGAMEValueStringToEnum( const tStringPtr& enumValueString );

}}


namespace Sig { namespace GameFlags { namespace Detail
{

	extern const tStringPtr      cGameFlagNames[];
	extern const u32             cGameFlagValues[];
	extern const tStringPtr      cGameEnumTypeNames[];
	extern const u32             cGameEnumTypeKeys[];
	extern const tStringPtr*const cGameEnumValueNames[];
	extern const u32*const       cGameEnumValues[];
	extern const tStringPtr      cGameEventNames[];
	extern const u32             cGameEventValues[];
	extern const tStringPtr      cKeyFrameEventNames[];
	extern const u32             cKeyFrameEventValues[];

}}}

#endif//__GameFlags__

