#ifndef __tPolySoupOctree__
#define __tPolySoupOctree__
#include "tOctree.hpp"
#include "tLoadInPlaceObjects.hpp"
#include "tPolySoupRaycastHit.hpp"

namespace Sig
{

	///
	/// \brief Optimization structure for performing ray-casts
	/// or other spatial queries on a bunch of mesh triangles.
	/// All data NOT generated by octree creation itself is stored 
	/// externally to the octree to minimize memory consumption, such
	/// as the actual triangle vertices, vertex indices, and root AABB;
	/// it is expected that the owner of the octree can provide this
	/// data and that it does not change between calls to fConstruct.
	class base_export tPolySoupOctree : public tOctree
	{
		declare_reflector( );

	private:

		tDynamicArray< u32 > mTriIndices;
		tFixedArray< tLoadInPlacePtrWrapper<tPolySoupOctree>, cCellCount > mChildren;

	public:
		tPolySoupOctree( );
		tPolySoupOctree( tNoOpTag );
		~tPolySoupOctree( );

		void fConstruct( 
			const Math::tAabbf& myCellAabb,
			const tPolySoupVertexList& verts, 
			const tPolySoupTriangleList& tris, 
			u32 maxDepth = 6, u32 splitThreshold = 16, f32 minEdgeLength = 0.1f );

	protected:

		void fConstruct( 
			tGrowableArray< u32 >& potentialIndices,
			const Math::tAabbf& myCellAabb,
			const tPolySoupVertexList& verts, 
			const tPolySoupTriangleList& tris,
			u32 currentDepth, u32 maxDepth = 6, u32 splitThreshold = 16, f32 minEdgeLength = 0.1f );

	public:

		void fDestroy( );

		void fCollectTris(
			tGrowableArray<Math::tTrianglef>& trisOut,
			const Math::tAabbf& aabb,
			const Math::tAabbf& myCellAabb,
			const tPolySoupVertexList& verts, 
			const tPolySoupTriangleList& tris ) const;

		void fTestRay(
			tPolySoupRayCastHit& bestHit,
			const Math::tRayf& ray,
			const Math::tAabbf& myCellAabb,
			const tPolySoupVertexList& verts, 
			const tPolySoupTriangleList& tris ) const;

		b32 fTestFrustum(
			const Math::tFrustumf& frustum,
			const Math::tAabbf& myCellAabb,
			const tPolySoupVertexList& verts, 
			const tPolySoupTriangleList& tris ) const;

		// these two are mostly for tools - slow, use at own risk
		u32 fTriangleCountRecursive( ) const;
		u32 fMemorySizeRecursive( ) const;
		b32 fEqual( const tPolySoupOctree& other ) const;
	};

}

#endif//__tPolySoupOctree__

